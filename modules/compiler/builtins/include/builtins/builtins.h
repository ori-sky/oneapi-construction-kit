// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// WARNING: This file is generated by a script, do not edit it directly. Instead
// changes should be made to the generate_header.sh script in builtins/scripts.

#ifndef __CODEPLAY_BUILTINS_H__
#define __CODEPLAY_BUILTINS_H__
#ifdef __cplusplus
extern "C" {
#endif

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#define CL_VERSION_1_0 100
#define CL_VERSION_1_1 110
#define CL_VERSION_1_2 120
#define __OPENCL_VERSION__ CL_VERSION_1_2
#define __kernel_exec(X, typen)                           \
  __kernel __attribute__((work_group_size_hint(X, 1, 1))) \
  __attribute__((vec_type_hint(typen)))
#define kernel_exec(X, typen) __kernel_exec(X, typen)
#ifdef __cplusplus
#define private
#define __private private
#define global __attribute__((address_space(1)))
#define __global global
#define constant __attribute__((address_space(2)))
#define __constant constant
#define local __attribute__((address_space(3)))
#define __local local
#endif  //__cplusplus
#ifdef __CA_BUILTINS_HALF_SUPPORT
#ifdef __cplusplus
typedef _Float16 half;
#else
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
#endif  // __cplusplus
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifndef __cplusplus
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#pragma OPENCL EXTENSION cl_khr_fp64 : enable
#else
#pragma OPENCL EXTENSION cl_khr_fp64 : disable
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __cplusplus
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;
#if defined(__SPIR64__)
typedef ulong size_t;
typedef long ptrdiff_t;
#elif defined(__SPIR32__)
typedef uint size_t;
typedef int ptrdiff_t;
#else
#error Unknown SPIR mode specified!
#endif
typedef ptrdiff_t intptr_t;
typedef size_t uintptr_t;
typedef char char2 __attribute__((ext_vector_type(2)));
typedef char char3 __attribute__((ext_vector_type(3)));
typedef char char4 __attribute__((ext_vector_type(4)));
typedef char char8 __attribute__((ext_vector_type(8)));
typedef char char16 __attribute__((ext_vector_type(16)));
typedef uchar uchar2 __attribute__((ext_vector_type(2)));
typedef uchar uchar3 __attribute__((ext_vector_type(3)));
typedef uchar uchar4 __attribute__((ext_vector_type(4)));
typedef uchar uchar8 __attribute__((ext_vector_type(8)));
typedef uchar uchar16 __attribute__((ext_vector_type(16)));
typedef short short2 __attribute__((ext_vector_type(2)));
typedef short short3 __attribute__((ext_vector_type(3)));
typedef short short4 __attribute__((ext_vector_type(4)));
typedef short short8 __attribute__((ext_vector_type(8)));
typedef short short16 __attribute__((ext_vector_type(16)));
typedef ushort ushort2 __attribute__((ext_vector_type(2)));
typedef ushort ushort3 __attribute__((ext_vector_type(3)));
typedef ushort ushort4 __attribute__((ext_vector_type(4)));
typedef ushort ushort8 __attribute__((ext_vector_type(8)));
typedef ushort ushort16 __attribute__((ext_vector_type(16)));
typedef int int2 __attribute__((ext_vector_type(2)));
typedef int int3 __attribute__((ext_vector_type(3)));
typedef int int4 __attribute__((ext_vector_type(4)));
typedef int int8 __attribute__((ext_vector_type(8)));
typedef int int16 __attribute__((ext_vector_type(16)));
typedef uint uint2 __attribute__((ext_vector_type(2)));
typedef uint uint3 __attribute__((ext_vector_type(3)));
typedef uint uint4 __attribute__((ext_vector_type(4)));
typedef uint uint8 __attribute__((ext_vector_type(8)));
typedef uint uint16 __attribute__((ext_vector_type(16)));
#ifdef __CA_BUILTINS_HALF_SUPPORT
typedef half half2 __attribute__((ext_vector_type(2)));
typedef half half3 __attribute__((ext_vector_type(3)));
typedef half half4 __attribute__((ext_vector_type(4)));
typedef half half8 __attribute__((ext_vector_type(8)));
typedef half half16 __attribute__((ext_vector_type(16)));
#endif
typedef float float2 __attribute__((ext_vector_type(2)));
typedef float float3 __attribute__((ext_vector_type(3)));
typedef float float4 __attribute__((ext_vector_type(4)));
typedef float float8 __attribute__((ext_vector_type(8)));
typedef float float16 __attribute__((ext_vector_type(16)));
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
typedef double double2 __attribute__((ext_vector_type(2)));
typedef double double3 __attribute__((ext_vector_type(3)));
typedef double double4 __attribute__((ext_vector_type(4)));
typedef double double8 __attribute__((ext_vector_type(8)));
typedef double double16 __attribute__((ext_vector_type(16)));
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
typedef long long2 __attribute__((ext_vector_type(2)));
typedef long long3 __attribute__((ext_vector_type(3)));
typedef long long4 __attribute__((ext_vector_type(4)));
typedef long long8 __attribute__((ext_vector_type(8)));
typedef long long16 __attribute__((ext_vector_type(16)));
typedef ulong ulong2 __attribute__((ext_vector_type(2)));
typedef ulong ulong3 __attribute__((ext_vector_type(3)));
typedef ulong ulong4 __attribute__((ext_vector_type(4)));
typedef ulong ulong8 __attribute__((ext_vector_type(8)));
typedef ulong ulong16 __attribute__((ext_vector_type(16)));
#define __CL_CONST_ATTRIBUTES __attribute__((overloadable, const, nothrow))
#define __CL_BUILTIN_ATTRIBUTES __attribute__((overloadable, nothrow))
#define __CL_WORK_ITEM_ATTRIBUTES __attribute__((overloadable, pure, nothrow))
#define __CL_BARRIER_ATTRIBUTES \
  __attribute__((overloadable, convergent, nothrow))
#ifdef __cplusplus
#define restrict __restrict
#endif
#ifdef __CA_BUILTINS_HALF_SUPPORT
#define HALF_DIG 3
#define HALF_MANT_DIG 11
#define HALF_MAX_10_EXP +4
#define HALF_MAX_EXP +16
#define HALF_MIN_10_EXP -4
#define HALF_MIN_EXP -13
#define HALF_RADIX 2
#define HALF_MAX 0x1.ffcp15h
#define HALF_MIN 0x1.0p-14h
#define HALF_EPSILON 0x1.0p-10h
#endif
#define FLT_DIG 6
#define FLT_MANT_DIG 24
#define FLT_MAX_10_EXP +38
#define FLT_MAX_EXP +128
#define FLT_MIN_10_EXP -37
#define FLT_MIN_EXP -125
#define FLT_RADIX 2
#define FLT_MAX 0x1.fffffep127f
#define FLT_MIN 0x1.0p-126f
#define FLT_EPSILON 0x1.0p-23f
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#define DBL_DIG 15
#define DBL_MANT_DIG 53
#define DBL_MAX_10_EXP +308
#define DBL_MAX_EXP +1024
#define DBL_MIN_10_EXP -307
#define DBL_MIN_EXP -1021
#define DBL_RADIX 2
#define DBL_MAX 0x1.fffffffffffffp1023
#define DBL_MIN 0x1.0p-1022
#define DBL_EPSILON 0x1.0p-52
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#define CHAR_BIT 8
#define CHAR_MAX SCHAR_MAX
#define CHAR_MIN SCHAR_MIN
#define INT_MAX 2147483647
#define INT_MIN (-2147483647 - 1)
#define LONG_MAX 0x7fffffffffffffffL
#define LONG_MIN (-0x7fffffffffffffffL - 1)
#define SCHAR_MAX 127
#define SCHAR_MIN (-127 - 1)
#define SHRT_MAX 32767
#define SHRT_MIN (-32767 - 1)
#define UCHAR_MAX 255
#define USHRT_MAX 65535
#define UINT_MAX 0xffffffff
#define ULONG_MAX 0xffffffffffffffffUL
#define MAXFLOAT FLT_MAX
#define HUGE_VALF __builtin_huge_valf()
#define HUGE_VAL __builtin_huge_val()
#define INFINITY __builtin_inff()
#define NAN nan((uint)0)
#ifdef __CA_BUILTINS_HALF_SUPPORT
#define M_E_H 0x1.5cp+1f16
#define M_LOG2E_H 0x1.714p+0f16
#define M_LOG10E_H 0x1.bccp-2f16
#define M_LN2_H 0x1.63p-1f16
#define M_LN10_H 0x1.26cp+1f16
#define M_PI_H 0x1.92p+1f16
#define M_PI_2_H 0x1.92p+0f16
#define M_PI_4_H 0x1.92p-1f16
#define M_1_PI_H 0x1.46p-2f16
#define M_2_PI_H 0x1.46p-1f16
#define M_2_SQRTPI_H 0x1.20cp+0f16
#define M_SQRT2_H 0x1.6ap+0f16
#define M_SQRT1_2_H 0x1.6ap-1f16
#endif
#define M_E_F 2.718281828459045235360287471352662497757247093699959574966967f
#define M_LOG2E_F \
  1.442695040888963407359924681001892137426645954152985934135449f
#define M_LOG10E_F \
  0.434294481903251827651128918916605082294397005803666566114453f
#define M_LN2_F 0.693147180559945309417232121458176568075500134360255254120680f
#define M_LN10_F 2.302585092994045684017991454684364207601101488628772976033327f
#define M_PI_F 3.141592653589793238462643383279502884197169399375105820974944f
#define M_PI_2_F 1.570796326794896619231321691639751442098584699687552910487472f
#define M_PI_4_F 0.785398163397448309615660845819875721049292349843776455243736f
#define M_1_PI_F 0.318309886183790671537767526745028724068919291480912897495334f
#define M_2_PI_F 0.636619772367581343075535053490057448137838582961825794990669f
#define M_2_SQRTPI_F \
  1.128379167095512573896158903121545171688101258657997713688171f
#define M_SQRT2_F \
  1.414213562373095048801688724209698078569671875376948073176679f
#define M_SQRT1_2_F \
  0.707106781186547524400844362104849039284835937688474036588339f
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#define M_E 0x1.5bf0a8b145769p+1
#define M_LOG2E 0x1.71547652b82fep+0
#define M_LOG10E 0x1.bcb7b1526e50ep-2
#define M_LN2 0x1.62e42fefa39efp-1
#define M_LN10 0x1.26bb1bbb55516p+1
#define M_PI 0x1.921fb54442d18p+1
#define M_PI_2 0x1.921fb54442d18p+0
#define M_PI_4 0x1.921fb54442d18p-1
#define M_1_PI 0x1.45f306dc9c883p-2
#define M_2_PI 0x1.45f306dc9c883p-1
#define M_2_SQRTPI 0x1.20dd750429b6dp+0
#define M_SQRT2 0x1.6a09e667f3bcdp+0
#define M_SQRT1_2 0x1.6a09e667f3bcdp-1
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#define FP_ILOGB0 INT_MIN
#define FP_ILOGBNAN INT_MAX
typedef uint cl_mem_fence_flags;
#define CLK_LOCAL_MEM_FENCE 1u
#define CLK_GLOBAL_MEM_FENCE 2u

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

char __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char(uchar arg);
uchar __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar(char arg);
char2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char2(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char2(short arg);
char2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char2(ushort arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
char2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char2(half arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uchar2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar2(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar2(short arg);
uchar2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar2(ushort arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uchar2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar2(half arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
short __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short(char2 arg);
short __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short(uchar2 arg);
short __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short(ushort arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
short __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short(half arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort(char2 arg);
ushort __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort(uchar2 arg);
ushort __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort(short arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ushort(half arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half(char2 arg);
half __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half(uchar2 arg);
half __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half(short arg);
half __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half(ushort arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(short2 arg);
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char4(ushort2 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(half2 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(int arg);
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(uint arg);
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(float arg);
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar4(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar4(short2 arg);
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar4(ushort2 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar4(half2 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(int arg);
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar4(uint arg);
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar4(float arg);
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short2(char4 arg);
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short2(uchar4 arg);
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short2(ushort2 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short2(half2 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short2(int arg);
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short2(uint arg);
short2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short2(float arg);
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort2(char4 arg);
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort2(uchar4 arg);
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort2(short2 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort2(half2 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort2(int arg);
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort2(uint arg);
ushort2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort2(float arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(char4 arg);
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(uchar4 arg);
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(short2 arg);
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half2(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(int arg);
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(uint arg);
half2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half2(float arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(char4 arg);
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(uchar4 arg);
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(short2 arg);
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(ushort2 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(half2 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(uint arg);
int __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int(float arg);
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(char4 arg);
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(uchar4 arg);
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(short2 arg);
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(ushort2 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(half2 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(int arg);
uint __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint(float arg);
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(char4 arg);
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(uchar4 arg);
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(short2 arg);
float __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float(ushort2 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(half2 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(int arg);
float __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float(uint arg);
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(short4 arg);
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char8(ushort4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(int2 arg);
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(uint2 arg);
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(float2 arg);
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(long arg);
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(ulong arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
char8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char8(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar8(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar8(short4 arg);
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar8(ushort4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar8(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(int2 arg);
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar8(uint2 arg);
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar8(float2 arg);
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uchar8(long arg);
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar8(ulong arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uchar8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar8(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(char8 arg);
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(uchar8 arg);
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(ushort4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(int2 arg);
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(uint2 arg);
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(float2 arg);
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short4(long arg);
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(ulong arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(char8 arg);
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(uchar8 arg);
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(short4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(int2 arg);
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(uint2 arg);
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(float2 arg);
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(long arg);
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(ulong arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(char8 arg);
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(uchar8 arg);
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(short4 arg);
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half4(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(int2 arg);
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(uint2 arg);
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(float2 arg);
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(long arg);
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(ulong arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(char8 arg);
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(uchar8 arg);
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(short4 arg);
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(ushort4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(uint2 arg);
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(float2 arg);
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(long arg);
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(ulong arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int2(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(char8 arg);
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(uchar8 arg);
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(short4 arg);
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint2(ushort4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(int2 arg);
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(float2 arg);
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(long arg);
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(ulong arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uint2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint2(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float2(char8 arg);
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float2(uchar8 arg);
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float2(short4 arg);
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float2(ushort4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float2(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(int2 arg);
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float2(uint2 arg);
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float2(long arg);
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float2(ulong arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
float2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float2(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(char8 arg);
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(uchar8 arg);
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(short4 arg);
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(ushort4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(int2 arg);
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(uint2 arg);
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(float2 arg);
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(ulong arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(char8 arg);
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(uchar8 arg);
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(short4 arg);
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong(ushort4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(int2 arg);
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(uint2 arg);
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(float2 arg);
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(long arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double(char8 arg);
double __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double(uchar8 arg);
double __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double(short4 arg);
double __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double(ushort4 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
double __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(int2 arg);
double __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double(uint2 arg);
double __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double(float2 arg);
double __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_double(long arg);
double __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double(ulong arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char16(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char16(short8 arg);
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char16(ushort8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char16(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char16(int4 arg);
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char16(uint4 arg);
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char16(float4 arg);
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char16(long2 arg);
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char16(ulong2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
char16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_char16(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(short8 arg);
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(ushort8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(int4 arg);
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(uint4 arg);
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(float4 arg);
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(long2 arg);
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(ulong2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uchar16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar16(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short8(char16 arg);
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short8(uchar16 arg);
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short8(ushort8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short8(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_short8(int4 arg);
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short8(uint4 arg);
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short8(float4 arg);
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short8(long2 arg);
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short8(ulong2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
short8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short8(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(char16 arg);
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(uchar16 arg);
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(short8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(int4 arg);
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(uint4 arg);
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(float4 arg);
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(long2 arg);
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(ulong2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort8(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(char16 arg);
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half8(uchar16 arg);
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(short8 arg);
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half8(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(int4 arg);
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(uint4 arg);
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(float4 arg);
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(long2 arg);
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half8(ulong2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
half8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half8(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(char16 arg);
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(uchar16 arg);
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(short8 arg);
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(ushort8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(uint4 arg);
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(float4 arg);
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(long2 arg);
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(ulong2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(char16 arg);
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint4(uchar16 arg);
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(short8 arg);
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint4(ushort8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(int4 arg);
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(float4 arg);
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(long2 arg);
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(ulong2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint4(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(char16 arg);
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(uchar16 arg);
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(short8 arg);
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(ushort8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(int4 arg);
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(uint4 arg);
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(long2 arg);
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(ulong2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(char16 arg);
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long2(uchar16 arg);
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(short8 arg);
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long2(ushort8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(int4 arg);
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(uint4 arg);
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(float4 arg);
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long2(ulong2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long2(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong2(char16 arg);
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong2(uchar16 arg);
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong2(short8 arg);
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong2(ushort8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong2(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong2(int4 arg);
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong2(uint4 arg);
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong2(float4 arg);
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong2(long2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong2(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(char16 arg);
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(uchar16 arg);
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(short8 arg);
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(ushort8 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(half8 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(int4 arg);
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(uint4 arg);
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(float4 arg);
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(long2 arg);
double2 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double2(ulong2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short16(ushort16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short16(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short16(int8 arg);
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short16(uint8 arg);
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short16(float8 arg);
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short16(long4 arg);
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short16(ulong4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
short16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short16(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort16(short16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort16(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort16(int8 arg);
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort16(uint8 arg);
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort16(float8 arg);
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort16(long4 arg);
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort16(ulong4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort16(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half16(short16 arg);
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half16(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half16(int8 arg);
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half16(uint8 arg);
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half16(float8 arg);
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half16(long4 arg);
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half16(ulong4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
half16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half16(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(short16 arg);
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(ushort16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(uint8 arg);
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(float8 arg);
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(long4 arg);
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(ulong4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int8(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint8(short16 arg);
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint8(ushort16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(int8 arg);
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(float8 arg);
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(long4 arg);
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint8(ulong4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uint8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint8(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float8(short16 arg);
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float8(ushort16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float8(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float8(int8 arg);
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float8(uint8 arg);
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float8(long4 arg);
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float8(ulong4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
float8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float8(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long4(short16 arg);
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long4(ushort16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(int8 arg);
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(uint8 arg);
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(float8 arg);
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(ulong4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long4(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(short16 arg);
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(ushort16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_ulong4(int8 arg);
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(uint8 arg);
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(float8 arg);
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(long4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(short16 arg);
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(ushort16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(int8 arg);
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(uint8 arg);
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(float8 arg);
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(long4 arg);
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(ulong4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int16(uint16 arg);
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_int16(float16 arg);
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int16(long8 arg);
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int16(ulong8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_int16(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint16(int16 arg);
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint16(float16 arg);
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint16(long8 arg);
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint16(ulong8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uint16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uint16(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float16(int16 arg);
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float16(uint16 arg);
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float16(long8 arg);
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float16(ulong8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
float16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float16(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long8(int16 arg);
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long8(uint16 arg);
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long8(float16 arg);
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long8(ulong8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long8(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong8(int16 arg);
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong8(uint16 arg);
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong8(float16 arg);
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong8(long8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong8(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double8(int16 arg);
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double8(uint16 arg);
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double8(float16 arg);
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double8(long8 arg);
double8 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double8(ulong8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long16(ulong16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long16(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong16(long16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong16(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double16(long16 arg);
double16 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double16(ulong16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
char3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char3(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar3(char3 arg);
char3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char3(char4 arg);
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(char3 arg);
char3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char3(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar4(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar3(char4 arg);
char4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_char4(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar3(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_uchar4(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short3(ushort3 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short3(half3 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort3(short3 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort3(half3 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half3(short3 arg);
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half3(ushort3 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short3(short4 arg);
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(short3 arg);
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short3(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(short3 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
short3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short3(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(short3 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort3(short4 arg);
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort3(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(ushort3 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort3(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half4(ushort3 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half3(short4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
short4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_short4(half3 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_half3(ushort4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ushort4(half3 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half3(half4 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_half4(half3 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(uint3 arg);
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(float3 arg);
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(int3 arg);
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(float3 arg);
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float3(int3 arg);
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float3(uint3 arg);
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(int4 arg);
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(int3 arg);
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(int3 arg);
int3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int3(float4 arg);
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float4(int3 arg);
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(int4 arg);
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint3(float4 arg);
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(uint3 arg);
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_float3(int4 arg);
int4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_int4(float3 arg);
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float3(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_uint4(float3 arg);
float3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float3(float4 arg);
float4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_float4(float3 arg);
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long3(ulong3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long3(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong3(long3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong3(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double3(long3 arg);
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double3(ulong3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long3(long4 arg);
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(long3 arg);
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long3(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(long3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long3(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(long3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong3(long4 arg);
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline)) as_long4(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong3(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(ulong3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong3(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(ulong3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double3(long4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_long4(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double3(ulong4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_ulong4(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double3(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES __attribute__((always_inline))
as_double4(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

char __CL_CONST_ATTRIBUTES convert_char(char arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(char arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(char arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(char arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(char arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(char arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(char arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(char arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(char arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(char arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(char2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(char2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(char2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(char2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(char2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(char2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(char2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(char2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(char2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(char2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(char3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(char3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(char3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(char3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(char3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(char3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(char3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(char3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(char3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(char3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(char4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(char4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(char4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(char4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(char4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(char4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(char4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(char4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(char4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(char4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(char8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(char8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(char8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(char8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(char8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(char8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(char8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(char8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(char8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(char8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(char16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(char16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(char16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(char16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(char16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(char16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(char16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(char16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(char16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(char16 arg);
char __CL_CONST_ATTRIBUTES convert_char(short arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(short arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(short arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(short arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(short arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(short arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(short arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(short arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(short arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(short arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(short2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(short2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(short2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(short2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(short2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(short2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(short2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(short2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(short2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(short2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(short3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(short3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(short3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(short3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(short3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(short3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(short3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(short3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(short3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(short3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(short4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(short4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(short4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(short4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(short4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(short4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(short4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(short4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(short4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(short4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(short8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(short8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(short8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(short8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(short8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(short8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(short8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(short8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(short8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(short8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(short16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(short16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(short16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(short16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(short16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(short16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(short16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(short16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(short16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(short16 arg);
char __CL_CONST_ATTRIBUTES convert_char(int arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(int arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(int arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(int arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(int arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(int arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(int arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(int arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(int arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(int arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(int2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(int2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(int2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(int2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(int2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(int2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(int2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(int2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(int2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(int2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(int3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(int3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(int3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(int3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(int3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(int3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(int3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(int3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(int3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(int3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(int4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(int4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(int4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(int4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(int4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(int4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(int4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(int4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(int4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(int4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(int8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(int8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(int8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(int8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(int8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(int8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(int8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(int8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(int8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(int8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(int16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(int16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(int16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(int16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(int16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(int16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(int16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(int16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(int16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(int16 arg);
char __CL_CONST_ATTRIBUTES convert_char(long arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(long arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(long arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(long arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(long arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(long arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(long arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(long arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(long arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(long arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(long2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(long2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(long2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(long2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(long2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(long2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(long2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(long2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(long2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(long2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(long3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(long3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(long3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(long3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(long3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(long3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(long3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(long3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(long3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(long3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(long4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(long4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(long4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(long4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(long4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(long4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(long4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(long4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(long4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(long4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(long8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(long8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(long8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(long8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(long8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(long8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(long8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(long8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(long8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(long8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(long16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(long16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(long16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(long16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(long16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(long16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(long16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(long16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(long16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(long16 arg);
char __CL_CONST_ATTRIBUTES convert_char(uchar arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(uchar arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(uchar arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(uchar arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(uchar arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(uchar arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(uchar arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(uchar arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(uchar arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(uchar arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(uchar2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(uchar2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(uchar3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(uchar3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(uchar3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(uchar3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(uchar3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(uchar3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(uchar3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(uchar3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(uchar3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(uchar3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(uchar4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(uchar4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(uchar8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(uchar8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(uchar16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(uchar16 arg);
char __CL_CONST_ATTRIBUTES convert_char(ushort arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(ushort arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(ushort arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(ushort arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(ushort arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(ushort arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(ushort arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(ushort arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(ushort arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(ushort arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(ushort2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(ushort2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(ushort2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(ushort2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(ushort2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(ushort2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(ushort2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(ushort2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(ushort2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(ushort2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(ushort3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(ushort3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(ushort3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(ushort3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(ushort3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(ushort3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(ushort3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(ushort3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(ushort3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(ushort3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(ushort4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(ushort4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(ushort4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(ushort4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(ushort4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(ushort4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(ushort4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(ushort4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(ushort4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(ushort4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(ushort8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(ushort8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(ushort8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(ushort8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(ushort8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(ushort8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(ushort8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(ushort8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(ushort8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(ushort8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(ushort16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(ushort16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(ushort16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(ushort16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(ushort16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(ushort16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(ushort16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(ushort16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(ushort16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(ushort16 arg);
char __CL_CONST_ATTRIBUTES convert_char(uint arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(uint arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(uint arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(uint arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(uint arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(uint arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(uint arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(uint arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(uint arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(uint arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(uint2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(uint2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(uint2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(uint2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(uint2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(uint2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(uint2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(uint2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(uint2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(uint2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(uint3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(uint3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(uint3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(uint3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(uint3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(uint3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(uint3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(uint3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(uint3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(uint3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(uint4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(uint4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(uint4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(uint4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(uint4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(uint4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(uint4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(uint4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(uint4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(uint4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(uint8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(uint8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(uint8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(uint8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(uint8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(uint8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(uint8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(uint8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(uint8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(uint8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(uint16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(uint16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(uint16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(uint16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(uint16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(uint16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(uint16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(uint16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(uint16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(uint16 arg);
char __CL_CONST_ATTRIBUTES convert_char(ulong arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(ulong arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(ulong arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(ulong arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(ulong arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(ulong arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(ulong arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(ulong arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(ulong arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(ulong arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(ulong2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(ulong2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(ulong2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(ulong2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(ulong2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(ulong2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(ulong2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(ulong2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(ulong2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(ulong2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(ulong3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(ulong3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(ulong3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(ulong3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(ulong3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(ulong3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(ulong3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(ulong3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(ulong3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(ulong3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(ulong4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(ulong4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(ulong4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(ulong4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(ulong4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(ulong4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(ulong4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(ulong4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(ulong4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(ulong4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(ulong8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(ulong8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(ulong8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(ulong8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(ulong8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(ulong8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(ulong8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(ulong8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(ulong8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(ulong8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(ulong16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(ulong16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(ulong16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(ulong16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(ulong16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(ulong16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(ulong16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(ulong16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(ulong16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
char __CL_CONST_ATTRIBUTES convert_char(half arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(half arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(half arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(half arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(half arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(half arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(half arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(half arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(half arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(half arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(half2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(half2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(half2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(half2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(half2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(half2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(half2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(half2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(half2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(half2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(half3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(half3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(half3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(half3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(half3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(half3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(half3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(half3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(half3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(half3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(half4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(half4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(half4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(half4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(half4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(half4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(half4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(half4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(half4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(half4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(half8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(half8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(half8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(half8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(half8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(half8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(half8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(half8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(half8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(half8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(half16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(half16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(half16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(half16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(half16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(half16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(half16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(half16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(half16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
char __CL_CONST_ATTRIBUTES convert_char(float arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(float arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(float arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(float arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(float arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(float arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(float arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(float arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(float arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(float arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(float2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(float2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(float2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(float2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(float2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(float2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(float2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(float2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(float2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(float2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(float3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(float3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(float3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(float3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(float3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(float3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(float3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(float3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(float3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(float3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(float4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(float4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(float4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(float4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(float4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(float4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(float4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(float4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(float4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(float4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(float8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(float8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(float8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(float8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(float8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(float8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(float8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(float8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(float8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(float8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(float16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(float16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(float16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(float16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(float16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(float16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(float16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(float16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(float16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
char __CL_CONST_ATTRIBUTES convert_char(double arg);
char __CL_CONST_ATTRIBUTES convert_char_sat(double arg);
char __CL_CONST_ATTRIBUTES convert_char_rte(double arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rte(double arg);
char __CL_CONST_ATTRIBUTES convert_char_rtz(double arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtz(double arg);
char __CL_CONST_ATTRIBUTES convert_char_rtn(double arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtn(double arg);
char __CL_CONST_ATTRIBUTES convert_char_rtp(double arg);
char __CL_CONST_ATTRIBUTES convert_char_sat_rtp(double arg);
char2 __CL_CONST_ATTRIBUTES convert_char2(double2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat(double2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rte(double2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rte(double2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtz(double2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtz(double2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtn(double2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtn(double2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_rtp(double2 arg);
char2 __CL_CONST_ATTRIBUTES convert_char2_sat_rtp(double2 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3(double3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat(double3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rte(double3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rte(double3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtz(double3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtz(double3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtn(double3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtn(double3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_rtp(double3 arg);
char3 __CL_CONST_ATTRIBUTES convert_char3_sat_rtp(double3 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4(double4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat(double4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rte(double4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rte(double4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtz(double4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtz(double4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtn(double4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtn(double4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_rtp(double4 arg);
char4 __CL_CONST_ATTRIBUTES convert_char4_sat_rtp(double4 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8(double8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat(double8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rte(double8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rte(double8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtz(double8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtz(double8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtn(double8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtn(double8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_rtp(double8 arg);
char8 __CL_CONST_ATTRIBUTES convert_char8_sat_rtp(double8 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16(double16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat(double16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rte(double16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rte(double16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtz(double16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtz(double16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtn(double16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtn(double16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_rtp(double16 arg);
char16 __CL_CONST_ATTRIBUTES convert_char16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
short __CL_CONST_ATTRIBUTES convert_short(char arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(char arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(char arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(char arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(char arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(char arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(char arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(char arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(char arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(char arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(char2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(char2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(char2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(char2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(char2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(char2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(char2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(char2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(char2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(char2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(char3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(char3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(char3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(char3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(char3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(char3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(char3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(char3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(char3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(char3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(char4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(char4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(char4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(char4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(char4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(char4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(char4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(char4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(char4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(char4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(char8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(char8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(char8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(char8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(char8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(char8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(char8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(char8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(char8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(char8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(char16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(char16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(char16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(char16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(char16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(char16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(char16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(char16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(char16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(char16 arg);
short __CL_CONST_ATTRIBUTES convert_short(short arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(short arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(short arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(short arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(short arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(short arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(short arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(short arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(short arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(short arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(short2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(short2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(short2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(short2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(short2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(short2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(short2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(short2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(short2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(short2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(short3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(short3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(short3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(short3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(short3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(short3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(short3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(short3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(short3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(short3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(short4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(short4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(short4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(short4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(short4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(short4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(short4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(short4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(short4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(short4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(short8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(short8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(short8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(short8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(short8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(short8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(short8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(short8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(short8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(short8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(short16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(short16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(short16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(short16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(short16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(short16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(short16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(short16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(short16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(short16 arg);
short __CL_CONST_ATTRIBUTES convert_short(int arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(int arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(int arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(int arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(int arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(int arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(int arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(int arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(int arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(int arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(int2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(int2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(int2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(int2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(int2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(int2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(int2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(int2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(int2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(int2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(int3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(int3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(int3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(int3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(int3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(int3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(int3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(int3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(int3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(int3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(int4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(int4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(int4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(int4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(int4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(int4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(int4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(int4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(int4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(int4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(int8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(int8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(int8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(int8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(int8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(int8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(int8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(int8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(int8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(int8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(int16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(int16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(int16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(int16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(int16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(int16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(int16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(int16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(int16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(int16 arg);
short __CL_CONST_ATTRIBUTES convert_short(long arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(long arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(long arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(long arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(long arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(long arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(long arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(long arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(long arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(long arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(long2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(long2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(long2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(long2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(long2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(long2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(long2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(long2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(long2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(long2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(long3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(long3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(long3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(long3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(long3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(long3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(long3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(long3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(long3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(long3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(long4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(long4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(long4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(long4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(long4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(long4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(long4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(long4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(long4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(long4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(long8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(long8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(long8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(long8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(long8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(long8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(long8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(long8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(long8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(long8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(long16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(long16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(long16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(long16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(long16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(long16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(long16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(long16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(long16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(long16 arg);
short __CL_CONST_ATTRIBUTES convert_short(uchar arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(uchar arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(uchar arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(uchar arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(uchar arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(uchar arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(uchar arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(uchar arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(uchar arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(uchar arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(uchar2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(uchar2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(uchar2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(uchar2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(uchar2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(uchar2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(uchar2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(uchar2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(uchar2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(uchar2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(uchar3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(uchar3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(uchar4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(uchar4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(uchar4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(uchar4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(uchar4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(uchar4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(uchar4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(uchar4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(uchar4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(uchar4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(uchar8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(uchar8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(uchar8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(uchar8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(uchar8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(uchar8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(uchar8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(uchar8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(uchar8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(uchar8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(uchar16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(uchar16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(uchar16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(uchar16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(uchar16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(uchar16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(uchar16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(uchar16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(uchar16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(uchar16 arg);
short __CL_CONST_ATTRIBUTES convert_short(ushort arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(ushort arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(ushort arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(ushort arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(ushort arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(ushort arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(ushort arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(ushort arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(ushort arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(ushort arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(ushort2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(ushort2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(ushort2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(ushort2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(ushort2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(ushort2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(ushort2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(ushort2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(ushort2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(ushort2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(ushort3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(ushort3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(ushort3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(ushort3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(ushort3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(ushort3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(ushort3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(ushort3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(ushort3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(ushort3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(ushort4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(ushort4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(ushort4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(ushort4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(ushort4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(ushort4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(ushort4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(ushort4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(ushort4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(ushort4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(ushort8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(ushort8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(ushort8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(ushort8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(ushort8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(ushort8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(ushort8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(ushort8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(ushort8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(ushort8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(ushort16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(ushort16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(ushort16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(ushort16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(ushort16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(ushort16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(ushort16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(ushort16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(ushort16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(ushort16 arg);
short __CL_CONST_ATTRIBUTES convert_short(uint arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(uint arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(uint arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(uint arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(uint arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(uint arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(uint arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(uint arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(uint arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(uint arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(uint2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(uint2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(uint2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(uint2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(uint2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(uint2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(uint2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(uint2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(uint2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(uint2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(uint3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(uint3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(uint3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(uint3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(uint3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(uint3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(uint3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(uint3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(uint3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(uint3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(uint4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(uint4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(uint4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(uint4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(uint4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(uint4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(uint4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(uint4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(uint4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(uint4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(uint8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(uint8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(uint8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(uint8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(uint8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(uint8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(uint8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(uint8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(uint8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(uint8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(uint16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(uint16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(uint16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(uint16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(uint16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(uint16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(uint16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(uint16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(uint16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(uint16 arg);
short __CL_CONST_ATTRIBUTES convert_short(ulong arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(ulong arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(ulong arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(ulong arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(ulong arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(ulong arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(ulong arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(ulong arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(ulong arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(ulong arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(ulong2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(ulong2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(ulong2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(ulong2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(ulong2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(ulong2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(ulong2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(ulong2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(ulong2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(ulong2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(ulong3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(ulong3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(ulong3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(ulong3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(ulong3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(ulong3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(ulong3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(ulong3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(ulong3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(ulong3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(ulong4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(ulong4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(ulong4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(ulong4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(ulong4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(ulong4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(ulong4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(ulong4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(ulong4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(ulong4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(ulong8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(ulong8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(ulong8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(ulong8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(ulong8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(ulong8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(ulong8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(ulong8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(ulong8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(ulong8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(ulong16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(ulong16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(ulong16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(ulong16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(ulong16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(ulong16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(ulong16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(ulong16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(ulong16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
short __CL_CONST_ATTRIBUTES convert_short(half arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(half arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(half arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(half arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(half arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(half arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(half arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(half arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(half arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(half arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(half2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(half2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(half2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(half2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(half2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(half2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(half2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(half2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(half2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(half2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(half3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(half3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(half3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(half3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(half3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(half3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(half3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(half3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(half3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(half3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(half4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(half4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(half4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(half4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(half4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(half4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(half4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(half4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(half4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(half4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(half8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(half8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(half8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(half8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(half8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(half8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(half8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(half8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(half8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(half8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(half16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(half16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(half16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(half16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(half16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(half16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(half16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(half16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(half16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
short __CL_CONST_ATTRIBUTES convert_short(float arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(float arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(float arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(float arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(float arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(float arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(float arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(float arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(float arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(float arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(float2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(float2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(float2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(float2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(float2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(float2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(float2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(float2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(float2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(float2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(float3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(float3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(float3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(float3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(float3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(float3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(float3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(float3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(float3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(float3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(float4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(float4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(float4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(float4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(float4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(float4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(float4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(float4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(float4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(float4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(float8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(float8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(float8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(float8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(float8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(float8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(float8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(float8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(float8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(float8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(float16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(float16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(float16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(float16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(float16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(float16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(float16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(float16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(float16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
short __CL_CONST_ATTRIBUTES convert_short(double arg);
short __CL_CONST_ATTRIBUTES convert_short_sat(double arg);
short __CL_CONST_ATTRIBUTES convert_short_rte(double arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rte(double arg);
short __CL_CONST_ATTRIBUTES convert_short_rtz(double arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtz(double arg);
short __CL_CONST_ATTRIBUTES convert_short_rtn(double arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtn(double arg);
short __CL_CONST_ATTRIBUTES convert_short_rtp(double arg);
short __CL_CONST_ATTRIBUTES convert_short_sat_rtp(double arg);
short2 __CL_CONST_ATTRIBUTES convert_short2(double2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat(double2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rte(double2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rte(double2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtz(double2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtz(double2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtn(double2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtn(double2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_rtp(double2 arg);
short2 __CL_CONST_ATTRIBUTES convert_short2_sat_rtp(double2 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3(double3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat(double3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rte(double3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rte(double3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtz(double3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtz(double3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtn(double3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtn(double3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_rtp(double3 arg);
short3 __CL_CONST_ATTRIBUTES convert_short3_sat_rtp(double3 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4(double4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat(double4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rte(double4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rte(double4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtz(double4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtz(double4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtn(double4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtn(double4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_rtp(double4 arg);
short4 __CL_CONST_ATTRIBUTES convert_short4_sat_rtp(double4 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8(double8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat(double8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rte(double8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rte(double8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtz(double8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtz(double8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtn(double8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtn(double8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_rtp(double8 arg);
short8 __CL_CONST_ATTRIBUTES convert_short8_sat_rtp(double8 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16(double16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat(double16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rte(double16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rte(double16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtz(double16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtz(double16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtn(double16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtn(double16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_rtp(double16 arg);
short16 __CL_CONST_ATTRIBUTES convert_short16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES convert_int(char arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(char arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(char arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(char arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(char arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(char arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(char arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(char arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(char arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(char arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(char2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(char2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(char2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(char2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(char2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(char2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(char2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(char2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(char2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(char2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(char3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(char3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(char3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(char3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(char3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(char3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(char3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(char3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(char3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(char3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(char4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(char4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(char4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(char4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(char4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(char4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(char4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(char4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(char4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(char4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(char8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(char8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(char8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(char8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(char8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(char8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(char8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(char8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(char8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(char8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(char16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(char16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(char16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(char16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(char16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(char16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(char16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(char16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(char16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(char16 arg);
int __CL_CONST_ATTRIBUTES convert_int(short arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(short arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(short arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(short arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(short arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(short arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(short arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(short arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(short arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(short arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(short2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(short2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(short2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(short2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(short2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(short2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(short2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(short2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(short2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(short2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(short3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(short3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(short3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(short3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(short3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(short3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(short3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(short3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(short3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(short3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(short4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(short4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(short4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(short4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(short4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(short4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(short4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(short4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(short4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(short4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(short8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(short8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(short8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(short8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(short8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(short8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(short8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(short8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(short8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(short8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(short16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(short16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(short16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(short16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(short16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(short16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(short16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(short16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(short16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(short16 arg);
int __CL_CONST_ATTRIBUTES convert_int(int arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(int arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(int arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(int arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(int arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(int arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(int arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(int arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(int arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(int arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(int2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(int2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(int2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(int2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(int2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(int2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(int2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(int2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(int2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(int2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(int3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(int3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(int3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(int3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(int3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(int3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(int3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(int3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(int3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(int3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(int4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(int4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(int4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(int4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(int4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(int4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(int4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(int4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(int4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(int4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(int8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(int8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(int8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(int8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(int8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(int8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(int8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(int8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(int8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(int8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(int16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(int16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(int16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(int16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(int16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(int16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(int16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(int16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(int16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(int16 arg);
int __CL_CONST_ATTRIBUTES convert_int(long arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(long arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(long arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(long arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(long arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(long arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(long arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(long arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(long arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(long arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(long2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(long2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(long2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(long2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(long2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(long2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(long2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(long2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(long2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(long2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(long3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(long3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(long3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(long3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(long3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(long3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(long3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(long3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(long3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(long3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(long4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(long4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(long4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(long4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(long4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(long4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(long4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(long4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(long4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(long4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(long8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(long8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(long8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(long8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(long8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(long8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(long8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(long8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(long8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(long8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(long16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(long16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(long16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(long16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(long16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(long16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(long16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(long16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(long16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(long16 arg);
int __CL_CONST_ATTRIBUTES convert_int(uchar arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(uchar arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(uchar arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(uchar arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(uchar arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(uchar arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(uchar arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(uchar arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(uchar arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(uchar arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(uchar2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(uchar2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(uchar2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(uchar2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(uchar2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(uchar2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(uchar2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(uchar2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(uchar2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(uchar2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(uchar3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(uchar3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(uchar3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(uchar3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(uchar3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(uchar3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(uchar3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(uchar3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(uchar3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(uchar3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(uchar4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(uchar4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(uchar4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(uchar4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(uchar4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(uchar4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(uchar4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(uchar4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(uchar4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(uchar4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(uchar8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(uchar8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(uchar8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(uchar8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(uchar8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(uchar8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(uchar8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(uchar8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(uchar8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(uchar8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(uchar16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(uchar16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(uchar16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(uchar16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(uchar16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(uchar16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(uchar16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(uchar16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(uchar16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(uchar16 arg);
int __CL_CONST_ATTRIBUTES convert_int(ushort arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(ushort arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(ushort arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(ushort arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(ushort arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(ushort arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(ushort arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(ushort arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(ushort arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(ushort arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(ushort2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(ushort2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(ushort2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(ushort2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(ushort2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(ushort2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(ushort2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(ushort2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(ushort2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(ushort2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(ushort3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(ushort3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(ushort3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(ushort3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(ushort3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(ushort3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(ushort3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(ushort3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(ushort3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(ushort3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(ushort4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(ushort4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(ushort4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(ushort4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(ushort4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(ushort4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(ushort4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(ushort4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(ushort4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(ushort4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(ushort8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(ushort8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(ushort8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(ushort8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(ushort8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(ushort8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(ushort8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(ushort8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(ushort8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(ushort8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(ushort16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(ushort16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(ushort16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(ushort16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(ushort16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(ushort16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(ushort16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(ushort16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(ushort16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(ushort16 arg);
int __CL_CONST_ATTRIBUTES convert_int(uint arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(uint arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(uint arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(uint arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(uint arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(uint arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(uint arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(uint arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(uint arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(uint arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(uint2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(uint2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(uint2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(uint2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(uint2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(uint2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(uint2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(uint2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(uint2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(uint2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(uint3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(uint3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(uint3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(uint3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(uint3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(uint3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(uint3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(uint3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(uint3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(uint3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(uint4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(uint4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(uint4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(uint4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(uint4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(uint4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(uint4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(uint4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(uint4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(uint4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(uint8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(uint8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(uint8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(uint8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(uint8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(uint8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(uint8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(uint8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(uint8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(uint8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(uint16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(uint16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(uint16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(uint16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(uint16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(uint16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(uint16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(uint16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(uint16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(uint16 arg);
int __CL_CONST_ATTRIBUTES convert_int(ulong arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(ulong arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(ulong arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(ulong arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(ulong arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(ulong arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(ulong arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(ulong arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(ulong arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(ulong arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(ulong2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(ulong2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(ulong2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(ulong2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(ulong2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(ulong2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(ulong2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(ulong2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(ulong2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(ulong2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(ulong3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(ulong3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(ulong3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(ulong3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(ulong3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(ulong3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(ulong3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(ulong3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(ulong3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(ulong3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(ulong4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(ulong4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(ulong4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(ulong4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(ulong4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(ulong4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(ulong4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(ulong4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(ulong4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(ulong4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(ulong8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(ulong8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(ulong8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(ulong8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(ulong8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(ulong8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(ulong8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(ulong8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(ulong8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(ulong8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(ulong16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(ulong16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(ulong16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(ulong16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(ulong16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(ulong16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(ulong16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(ulong16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(ulong16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES convert_int(half arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(half arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(half arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(half arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(half arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(half arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(half arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(half arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(half arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(half arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(half2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(half2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(half2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(half2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(half2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(half2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(half2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(half2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(half2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(half2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(half3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(half3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(half3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(half3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(half3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(half3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(half3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(half3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(half3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(half3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(half4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(half4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(half4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(half4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(half4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(half4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(half4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(half4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(half4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(half4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(half8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(half8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(half8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(half8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(half8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(half8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(half8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(half8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(half8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(half8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(half16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(half16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(half16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(half16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(half16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(half16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(half16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(half16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(half16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES convert_int(float arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(float arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(float arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(float arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(float arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(float arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(float arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(float arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(float arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(float arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(float2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(float2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(float2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(float2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(float2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(float2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(float2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(float2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(float2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(float2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(float3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(float3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(float3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(float3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(float3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(float3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(float3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(float3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(float3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(float3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(float4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(float4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(float4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(float4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(float4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(float4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(float4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(float4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(float4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(float4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(float8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(float8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(float8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(float8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(float8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(float8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(float8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(float8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(float8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(float8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(float16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(float16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(float16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(float16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(float16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(float16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(float16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(float16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(float16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES convert_int(double arg);
int __CL_CONST_ATTRIBUTES convert_int_sat(double arg);
int __CL_CONST_ATTRIBUTES convert_int_rte(double arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rte(double arg);
int __CL_CONST_ATTRIBUTES convert_int_rtz(double arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtz(double arg);
int __CL_CONST_ATTRIBUTES convert_int_rtn(double arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtn(double arg);
int __CL_CONST_ATTRIBUTES convert_int_rtp(double arg);
int __CL_CONST_ATTRIBUTES convert_int_sat_rtp(double arg);
int2 __CL_CONST_ATTRIBUTES convert_int2(double2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat(double2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rte(double2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rte(double2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtz(double2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtz(double2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtn(double2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtn(double2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_rtp(double2 arg);
int2 __CL_CONST_ATTRIBUTES convert_int2_sat_rtp(double2 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3(double3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat(double3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rte(double3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rte(double3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtz(double3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtz(double3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtn(double3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtn(double3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_rtp(double3 arg);
int3 __CL_CONST_ATTRIBUTES convert_int3_sat_rtp(double3 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4(double4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat(double4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rte(double4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rte(double4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtz(double4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtz(double4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtn(double4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtn(double4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_rtp(double4 arg);
int4 __CL_CONST_ATTRIBUTES convert_int4_sat_rtp(double4 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8(double8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat(double8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rte(double8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rte(double8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtz(double8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtz(double8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtn(double8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtn(double8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_rtp(double8 arg);
int8 __CL_CONST_ATTRIBUTES convert_int8_sat_rtp(double8 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16(double16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat(double16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rte(double16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rte(double16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtz(double16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtz(double16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtn(double16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtn(double16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_rtp(double16 arg);
int16 __CL_CONST_ATTRIBUTES convert_int16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
long __CL_CONST_ATTRIBUTES convert_long(char arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(char arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(char arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(char arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(char arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(char arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(char arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(char arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(char arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(char arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(char2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(char2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(char2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(char2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(char2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(char2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(char2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(char2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(char2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(char2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(char3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(char3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(char3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(char3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(char3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(char3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(char3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(char3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(char3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(char3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(char4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(char4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(char4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(char4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(char4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(char4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(char4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(char4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(char4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(char4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(char8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(char8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(char8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(char8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(char8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(char8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(char8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(char8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(char8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(char8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(char16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(char16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(char16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(char16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(char16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(char16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(char16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(char16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(char16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(char16 arg);
long __CL_CONST_ATTRIBUTES convert_long(short arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(short arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(short arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(short arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(short arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(short arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(short arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(short arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(short arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(short arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(short2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(short2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(short2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(short2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(short2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(short2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(short2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(short2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(short2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(short2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(short3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(short3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(short3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(short3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(short3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(short3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(short3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(short3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(short3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(short3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(short4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(short4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(short4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(short4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(short4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(short4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(short4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(short4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(short4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(short4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(short8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(short8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(short8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(short8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(short8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(short8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(short8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(short8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(short8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(short8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(short16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(short16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(short16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(short16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(short16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(short16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(short16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(short16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(short16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(short16 arg);
long __CL_CONST_ATTRIBUTES convert_long(int arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(int arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(int arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(int arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(int arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(int arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(int arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(int arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(int arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(int arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(int2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(int2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(int2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(int2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(int2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(int2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(int2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(int2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(int2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(int2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(int3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(int3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(int3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(int3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(int3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(int3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(int3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(int3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(int3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(int3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(int4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(int4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(int4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(int4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(int4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(int4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(int4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(int4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(int4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(int4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(int8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(int8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(int8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(int8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(int8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(int8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(int8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(int8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(int8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(int8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(int16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(int16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(int16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(int16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(int16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(int16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(int16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(int16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(int16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(int16 arg);
long __CL_CONST_ATTRIBUTES convert_long(long arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(long arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(long arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(long arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(long arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(long arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(long arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(long arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(long arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(long arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(long2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(long2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(long2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(long2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(long2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(long2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(long2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(long2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(long2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(long2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(long3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(long3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(long3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(long3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(long3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(long3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(long3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(long3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(long3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(long3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(long4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(long4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(long4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(long4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(long4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(long4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(long4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(long4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(long4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(long4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(long8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(long8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(long8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(long8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(long8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(long8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(long8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(long8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(long8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(long8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(long16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(long16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(long16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(long16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(long16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(long16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(long16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(long16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(long16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(long16 arg);
long __CL_CONST_ATTRIBUTES convert_long(uchar arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(uchar arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(uchar arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(uchar arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(uchar arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(uchar arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(uchar arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(uchar arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(uchar arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(uchar arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(uchar2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(uchar2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(uchar2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(uchar2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(uchar2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(uchar2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(uchar2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(uchar2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(uchar2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(uchar2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(uchar3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(uchar3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(uchar3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(uchar3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(uchar3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(uchar3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(uchar3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(uchar3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(uchar3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(uchar3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(uchar4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(uchar4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(uchar4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(uchar4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(uchar4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(uchar4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(uchar4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(uchar4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(uchar4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(uchar4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(uchar8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(uchar8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(uchar8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(uchar8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(uchar8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(uchar8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(uchar8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(uchar8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(uchar8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(uchar8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(uchar16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(uchar16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(uchar16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(uchar16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(uchar16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(uchar16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(uchar16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(uchar16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(uchar16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(uchar16 arg);
long __CL_CONST_ATTRIBUTES convert_long(ushort arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(ushort arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(ushort arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(ushort arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(ushort arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(ushort arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(ushort arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(ushort arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(ushort arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(ushort arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(ushort2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(ushort2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(ushort2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(ushort2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(ushort2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(ushort2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(ushort2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(ushort2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(ushort2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(ushort2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(ushort3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(ushort3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(ushort3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(ushort3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(ushort3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(ushort3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(ushort3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(ushort3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(ushort3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(ushort3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(ushort4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(ushort4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(ushort4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(ushort4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(ushort4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(ushort4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(ushort4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(ushort4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(ushort4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(ushort4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(ushort8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(ushort8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(ushort8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(ushort8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(ushort8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(ushort8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(ushort8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(ushort8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(ushort8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(ushort8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(ushort16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(ushort16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(ushort16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(ushort16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(ushort16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(ushort16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(ushort16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(ushort16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(ushort16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(ushort16 arg);
long __CL_CONST_ATTRIBUTES convert_long(uint arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(uint arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(uint arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(uint arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(uint arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(uint arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(uint arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(uint arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(uint arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(uint arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(uint2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(uint2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(uint2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(uint2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(uint2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(uint2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(uint2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(uint2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(uint2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(uint2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(uint3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(uint3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(uint3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(uint3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(uint3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(uint3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(uint3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(uint3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(uint3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(uint3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(uint4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(uint4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(uint4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(uint4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(uint4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(uint4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(uint4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(uint4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(uint4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(uint4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(uint8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(uint8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(uint8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(uint8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(uint8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(uint8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(uint8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(uint8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(uint8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(uint8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(uint16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(uint16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(uint16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(uint16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(uint16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(uint16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(uint16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(uint16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(uint16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(uint16 arg);
long __CL_CONST_ATTRIBUTES convert_long(ulong arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(ulong arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(ulong arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(ulong arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(ulong arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(ulong arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(ulong arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(ulong arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(ulong arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(ulong arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(ulong2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(ulong2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(ulong2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(ulong2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(ulong2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(ulong2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(ulong2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(ulong2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(ulong2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(ulong2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(ulong3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(ulong3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(ulong3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(ulong3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(ulong3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(ulong3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(ulong3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(ulong3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(ulong3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(ulong3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(ulong4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(ulong4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(ulong4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(ulong4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(ulong4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(ulong4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(ulong4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(ulong4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(ulong4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(ulong4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(ulong8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(ulong8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(ulong8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(ulong8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(ulong8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(ulong8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(ulong8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(ulong8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(ulong8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(ulong8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(ulong16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(ulong16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(ulong16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(ulong16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(ulong16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(ulong16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(ulong16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(ulong16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(ulong16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
long __CL_CONST_ATTRIBUTES convert_long(half arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(half arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(half arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(half arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(half arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(half arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(half arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(half arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(half arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(half arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(half2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(half2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(half2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(half2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(half2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(half2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(half2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(half2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(half2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(half2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(half3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(half3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(half3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(half3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(half3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(half3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(half3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(half3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(half3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(half3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(half4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(half4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(half4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(half4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(half4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(half4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(half4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(half4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(half4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(half4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(half8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(half8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(half8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(half8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(half8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(half8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(half8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(half8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(half8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(half8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(half16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(half16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(half16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(half16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(half16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(half16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(half16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(half16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(half16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
long __CL_CONST_ATTRIBUTES convert_long(float arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(float arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(float arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(float arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(float arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(float arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(float arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(float arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(float arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(float arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(float2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(float2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(float2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(float2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(float2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(float2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(float2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(float2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(float2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(float2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(float3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(float3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(float3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(float3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(float3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(float3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(float3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(float3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(float3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(float3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(float4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(float4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(float4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(float4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(float4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(float4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(float4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(float4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(float4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(float4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(float8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(float8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(float8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(float8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(float8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(float8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(float8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(float8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(float8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(float8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(float16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(float16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(float16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(float16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(float16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(float16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(float16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(float16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(float16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
long __CL_CONST_ATTRIBUTES convert_long(double arg);
long __CL_CONST_ATTRIBUTES convert_long_sat(double arg);
long __CL_CONST_ATTRIBUTES convert_long_rte(double arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rte(double arg);
long __CL_CONST_ATTRIBUTES convert_long_rtz(double arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtz(double arg);
long __CL_CONST_ATTRIBUTES convert_long_rtn(double arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtn(double arg);
long __CL_CONST_ATTRIBUTES convert_long_rtp(double arg);
long __CL_CONST_ATTRIBUTES convert_long_sat_rtp(double arg);
long2 __CL_CONST_ATTRIBUTES convert_long2(double2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat(double2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rte(double2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rte(double2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtz(double2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtz(double2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtn(double2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtn(double2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_rtp(double2 arg);
long2 __CL_CONST_ATTRIBUTES convert_long2_sat_rtp(double2 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3(double3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat(double3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rte(double3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rte(double3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtz(double3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtz(double3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtn(double3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtn(double3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_rtp(double3 arg);
long3 __CL_CONST_ATTRIBUTES convert_long3_sat_rtp(double3 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4(double4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat(double4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rte(double4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rte(double4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtz(double4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtz(double4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtn(double4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtn(double4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_rtp(double4 arg);
long4 __CL_CONST_ATTRIBUTES convert_long4_sat_rtp(double4 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8(double8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat(double8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rte(double8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rte(double8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtz(double8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtz(double8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtn(double8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtn(double8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_rtp(double8 arg);
long8 __CL_CONST_ATTRIBUTES convert_long8_sat_rtp(double8 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16(double16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat(double16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rte(double16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rte(double16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtz(double16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtz(double16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtn(double16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtn(double16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_rtp(double16 arg);
long16 __CL_CONST_ATTRIBUTES convert_long16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uchar __CL_CONST_ATTRIBUTES convert_uchar(char arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(char arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(char arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(char arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(char arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(char arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(char arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(char arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(char arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(char arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(char2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(char2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(char3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(char3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(char4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(char4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(char8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(char8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(char16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(char16 arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar(short arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(short arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(short arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(short arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(short arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(short arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(short arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(short arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(short arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(short arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(short2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(short2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(short2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(short2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(short2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(short2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(short2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(short2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(short2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(short2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(short3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(short3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(short3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(short3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(short3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(short3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(short3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(short3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(short3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(short3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(short4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(short4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(short4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(short4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(short4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(short4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(short4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(short4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(short4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(short4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(short8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(short8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(short8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(short8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(short8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(short8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(short8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(short8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(short8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(short8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(short16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(short16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(short16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(short16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(short16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(short16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(short16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(short16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(short16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(short16 arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar(int arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(int arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(int arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(int arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(int arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(int arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(int arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(int arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(int arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(int arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(int2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(int2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(int2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(int2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(int2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(int2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(int2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(int2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(int2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(int2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(int3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(int3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(int3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(int3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(int3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(int3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(int3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(int3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(int3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(int3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(int4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(int4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(int4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(int4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(int4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(int4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(int4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(int4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(int4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(int4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(int8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(int8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(int8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(int8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(int8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(int8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(int8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(int8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(int8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(int8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(int16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(int16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(int16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(int16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(int16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(int16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(int16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(int16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(int16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(int16 arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar(long arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(long arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(long arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(long arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(long arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(long arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(long arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(long arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(long arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(long arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(long2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(long2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(long2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(long2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(long2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(long2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(long2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(long2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(long2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(long2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(long3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(long3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(long3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(long3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(long3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(long3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(long3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(long3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(long3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(long3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(long4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(long4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(long4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(long4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(long4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(long4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(long4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(long4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(long4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(long4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(long8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(long8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(long8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(long8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(long8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(long8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(long8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(long8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(long8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(long8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(long16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(long16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(long16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(long16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(long16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(long16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(long16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(long16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(long16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(long16 arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar(uchar arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(uchar arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(uchar arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(uchar arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(uchar arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(uchar arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(uchar arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(uchar arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(uchar arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(uchar arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(uchar2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(uchar2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(uchar2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(uchar2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(uchar2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(uchar2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(uchar2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(uchar2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(uchar2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(uchar2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(uchar3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(uchar3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(uchar4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(uchar4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(uchar8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(uchar8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(uchar8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(uchar8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(uchar8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(uchar8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(uchar8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(uchar8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(uchar8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(uchar8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(uchar16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(uchar16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(uchar16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(uchar16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(uchar16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(uchar16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(uchar16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(uchar16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(uchar16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(uchar16 arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar(ushort arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(ushort arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(ushort arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(ushort arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(ushort arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(ushort arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(ushort arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(ushort arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(ushort arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(ushort arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(ushort2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(ushort2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(ushort2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(ushort2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(ushort2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(ushort2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(ushort2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(ushort2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(ushort2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(ushort2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(ushort3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(ushort3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(ushort3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(ushort3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(ushort3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(ushort3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(ushort3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(ushort3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(ushort3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(ushort3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(ushort4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(ushort4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(ushort4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(ushort4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(ushort4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(ushort4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(ushort4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(ushort4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(ushort4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(ushort4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(ushort8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(ushort8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(ushort8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(ushort8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(ushort8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(ushort8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(ushort8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(ushort8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(ushort8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(ushort8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(ushort16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(ushort16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(ushort16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(ushort16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(ushort16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(ushort16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(ushort16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(ushort16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(ushort16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(ushort16 arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar(uint arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(uint arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(uint arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(uint arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(uint arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(uint arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(uint arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(uint arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(uint arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(uint arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(uint2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(uint2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(uint2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(uint2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(uint2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(uint2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(uint2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(uint2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(uint2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(uint2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(uint3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(uint3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(uint3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(uint3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(uint3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(uint3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(uint3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(uint3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(uint3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(uint3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(uint4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(uint4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(uint4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(uint4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(uint4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(uint4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(uint4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(uint4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(uint4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(uint4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(uint8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(uint8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(uint8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(uint8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(uint8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(uint8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(uint8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(uint8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(uint8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(uint8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(uint16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(uint16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(uint16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(uint16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(uint16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(uint16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(uint16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(uint16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(uint16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(uint16 arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar(ulong arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(ulong arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(ulong arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(ulong arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(ulong arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(ulong arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(ulong arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(ulong arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(ulong arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(ulong arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(ulong2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(ulong2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(ulong2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(ulong2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(ulong2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(ulong2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(ulong2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(ulong2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(ulong2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(ulong2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(ulong3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(ulong3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(ulong3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(ulong3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(ulong3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(ulong3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(ulong3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(ulong3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(ulong3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(ulong3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(ulong4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(ulong4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(ulong4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(ulong4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(ulong4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(ulong4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(ulong4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(ulong4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(ulong4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(ulong4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(ulong8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(ulong8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(ulong8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(ulong8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(ulong8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(ulong8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(ulong8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(ulong8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(ulong8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(ulong8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(ulong16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(ulong16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(ulong16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(ulong16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(ulong16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(ulong16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(ulong16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(ulong16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(ulong16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uchar __CL_CONST_ATTRIBUTES convert_uchar(half arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(half arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(half arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(half arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(half arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(half arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(half arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(half arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(half arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(half arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(half2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(half2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(half2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(half2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(half2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(half2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(half2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(half2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(half2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(half2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(half3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(half3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(half3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(half3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(half3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(half3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(half3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(half3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(half3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(half3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(half4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(half4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(half4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(half4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(half4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(half4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(half4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(half4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(half4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(half4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(half8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(half8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(half8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(half8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(half8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(half8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(half8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(half8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(half8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(half8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(half16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(half16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(half16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(half16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(half16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(half16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(half16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(half16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(half16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uchar __CL_CONST_ATTRIBUTES convert_uchar(float arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(float arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(float arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(float arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(float arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(float arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(float arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(float arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(float arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(float arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(float2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(float2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(float2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(float2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(float2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(float2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(float2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(float2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(float2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(float2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(float3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(float3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(float3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(float3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(float3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(float3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(float3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(float3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(float3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(float3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(float4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(float4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(float4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(float4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(float4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(float4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(float4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(float4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(float4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(float4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(float8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(float8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(float8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(float8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(float8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(float8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(float8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(float8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(float8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(float8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(float16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(float16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(float16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(float16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(float16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(float16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(float16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(float16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(float16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uchar __CL_CONST_ATTRIBUTES convert_uchar(double arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat(double arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rte(double arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rte(double arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtz(double arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtz(double arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtn(double arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtn(double arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_rtp(double arg);
uchar __CL_CONST_ATTRIBUTES convert_uchar_sat_rtp(double arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2(double2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat(double2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rte(double2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rte(double2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtz(double2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtz(double2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtn(double2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtn(double2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_rtp(double2 arg);
uchar2 __CL_CONST_ATTRIBUTES convert_uchar2_sat_rtp(double2 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3(double3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat(double3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rte(double3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rte(double3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtz(double3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtz(double3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtn(double3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtn(double3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_rtp(double3 arg);
uchar3 __CL_CONST_ATTRIBUTES convert_uchar3_sat_rtp(double3 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4(double4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat(double4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rte(double4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rte(double4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtz(double4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtz(double4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtn(double4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtn(double4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_rtp(double4 arg);
uchar4 __CL_CONST_ATTRIBUTES convert_uchar4_sat_rtp(double4 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8(double8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat(double8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rte(double8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rte(double8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtz(double8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtz(double8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtn(double8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtn(double8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_rtp(double8 arg);
uchar8 __CL_CONST_ATTRIBUTES convert_uchar8_sat_rtp(double8 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16(double16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat(double16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rte(double16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rte(double16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtz(double16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtz(double16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtn(double16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtn(double16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_rtp(double16 arg);
uchar16 __CL_CONST_ATTRIBUTES convert_uchar16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_ushort(char arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(char arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(char arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(char arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(char arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(char arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(char arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(char arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(char arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(char arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(char2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(char2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(char2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(char2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(char2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(char2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(char2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(char2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(char2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(char2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(char3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(char3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(char3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(char3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(char3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(char3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(char3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(char3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(char3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(char3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(char4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(char4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(char4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(char4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(char4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(char4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(char4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(char4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(char4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(char4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(char8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(char8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(char8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(char8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(char8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(char8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(char8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(char8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(char8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(char8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(char16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(char16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(char16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(char16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(char16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(char16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(char16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(char16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(char16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(char16 arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort(short arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(short arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(short arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(short arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(short arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(short arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(short arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(short arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(short arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(short arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(short2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(short2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(short2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(short2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(short2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(short2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(short2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(short2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(short2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(short2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(short3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(short3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(short3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(short3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(short3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(short3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(short3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(short3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(short3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(short3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(short4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(short4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(short4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(short4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(short4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(short4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(short4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(short4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(short4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(short4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(short8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(short8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(short8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(short8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(short8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(short8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(short8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(short8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(short8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(short8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(short16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(short16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(short16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(short16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(short16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(short16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(short16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(short16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(short16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(short16 arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort(int arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(int arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(int arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(int arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(int arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(int arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(int arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(int arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(int arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(int arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(int2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(int2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(int2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(int2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(int2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(int2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(int2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(int2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(int2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(int2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(int3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(int3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(int3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(int3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(int3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(int3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(int3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(int3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(int3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(int3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(int4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(int4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(int4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(int4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(int4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(int4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(int4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(int4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(int4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(int4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(int8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(int8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(int8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(int8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(int8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(int8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(int8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(int8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(int8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(int8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(int16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(int16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(int16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(int16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(int16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(int16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(int16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(int16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(int16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(int16 arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort(long arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(long arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(long arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(long arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(long arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(long arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(long arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(long arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(long arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(long arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(long2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(long2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(long2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(long2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(long2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(long2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(long2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(long2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(long2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(long2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(long3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(long3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(long3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(long3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(long3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(long3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(long3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(long3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(long3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(long3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(long4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(long4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(long4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(long4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(long4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(long4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(long4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(long4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(long4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(long4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(long8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(long8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(long8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(long8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(long8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(long8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(long8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(long8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(long8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(long8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(long16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(long16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(long16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(long16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(long16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(long16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(long16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(long16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(long16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(long16 arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort(uchar arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(uchar arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(uchar arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(uchar arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(uchar arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(uchar arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(uchar arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(uchar arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(uchar arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(uchar arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(uchar2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(uchar2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(uchar2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(uchar2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(uchar2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(uchar2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(uchar2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(uchar2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(uchar2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(uchar2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(uchar3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(uchar3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(uchar3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(uchar3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(uchar3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(uchar3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(uchar3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(uchar3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(uchar3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(uchar3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(uchar4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(uchar4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(uchar4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(uchar4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(uchar4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(uchar4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(uchar4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(uchar4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(uchar4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(uchar4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(uchar8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(uchar8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(uchar8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(uchar8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(uchar8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(uchar8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(uchar8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(uchar8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(uchar8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(uchar8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(uchar16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(uchar16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(uchar16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(uchar16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(uchar16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(uchar16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(uchar16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(uchar16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(uchar16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(uchar16 arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort(ushort arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(ushort arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(ushort arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(ushort arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(ushort arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(ushort arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(ushort arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(ushort arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(ushort arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(ushort arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(ushort2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(ushort2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(ushort2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(ushort2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(ushort2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(ushort2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(ushort2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(ushort2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(ushort2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(ushort2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(ushort3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(ushort3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(ushort4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(ushort4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(ushort8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(ushort8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(ushort8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(ushort8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(ushort8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(ushort8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(ushort8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(ushort8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(ushort8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(ushort8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(ushort16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(ushort16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(ushort16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(ushort16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(ushort16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(ushort16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(ushort16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(ushort16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(ushort16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(ushort16 arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort(uint arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(uint arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(uint arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(uint arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(uint arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(uint arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(uint arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(uint arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(uint arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(uint arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(uint2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(uint2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(uint2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(uint2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(uint2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(uint2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(uint2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(uint2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(uint2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(uint2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(uint3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(uint3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(uint3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(uint3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(uint3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(uint3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(uint3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(uint3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(uint3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(uint3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(uint4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(uint4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(uint4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(uint4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(uint4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(uint4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(uint4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(uint4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(uint4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(uint4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(uint8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(uint8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(uint8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(uint8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(uint8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(uint8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(uint8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(uint8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(uint8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(uint8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(uint16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(uint16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(uint16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(uint16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(uint16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(uint16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(uint16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(uint16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(uint16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(uint16 arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort(ulong arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(ulong arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(ulong arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(ulong arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(ulong arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(ulong arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(ulong arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(ulong arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(ulong arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(ulong arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(ulong2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(ulong2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(ulong2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(ulong2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(ulong2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(ulong2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(ulong2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(ulong2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(ulong2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(ulong2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(ulong3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(ulong3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(ulong3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(ulong3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(ulong3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(ulong3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(ulong3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(ulong3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(ulong3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(ulong3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(ulong4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(ulong4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(ulong4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(ulong4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(ulong4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(ulong4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(ulong4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(ulong4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(ulong4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(ulong4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(ulong8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(ulong8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(ulong8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(ulong8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(ulong8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(ulong8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(ulong8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(ulong8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(ulong8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(ulong8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(ulong16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(ulong16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(ulong16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(ulong16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(ulong16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(ulong16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(ulong16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(ulong16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(ulong16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_ushort(half arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(half arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(half arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(half arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(half arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(half arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(half arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(half arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(half arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(half arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(half2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(half2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(half2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(half2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(half2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(half2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(half2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(half2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(half2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(half2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(half3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(half3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(half3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(half3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(half3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(half3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(half3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(half3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(half3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(half3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(half4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(half4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(half4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(half4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(half4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(half4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(half4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(half4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(half4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(half4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(half8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(half8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(half8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(half8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(half8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(half8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(half8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(half8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(half8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(half8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(half16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(half16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(half16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(half16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(half16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(half16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(half16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(half16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(half16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_ushort(float arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(float arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(float arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(float arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(float arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(float arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(float arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(float arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(float arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(float arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(float2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(float2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(float2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(float2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(float2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(float2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(float2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(float2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(float2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(float2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(float3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(float3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(float3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(float3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(float3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(float3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(float3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(float3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(float3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(float3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(float4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(float4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(float4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(float4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(float4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(float4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(float4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(float4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(float4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(float4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(float8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(float8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(float8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(float8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(float8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(float8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(float8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(float8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(float8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(float8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(float16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(float16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(float16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(float16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(float16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(float16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(float16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(float16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(float16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_ushort(double arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat(double arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rte(double arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rte(double arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtz(double arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtz(double arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtn(double arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtn(double arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_rtp(double arg);
ushort __CL_CONST_ATTRIBUTES convert_ushort_sat_rtp(double arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2(double2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat(double2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rte(double2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rte(double2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtz(double2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtz(double2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtn(double2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtn(double2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_rtp(double2 arg);
ushort2 __CL_CONST_ATTRIBUTES convert_ushort2_sat_rtp(double2 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3(double3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat(double3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rte(double3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rte(double3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtz(double3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtz(double3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtn(double3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtn(double3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_rtp(double3 arg);
ushort3 __CL_CONST_ATTRIBUTES convert_ushort3_sat_rtp(double3 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4(double4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat(double4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rte(double4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rte(double4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtz(double4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtz(double4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtn(double4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtn(double4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_rtp(double4 arg);
ushort4 __CL_CONST_ATTRIBUTES convert_ushort4_sat_rtp(double4 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8(double8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat(double8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rte(double8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rte(double8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtz(double8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtz(double8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtn(double8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtn(double8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_rtp(double8 arg);
ushort8 __CL_CONST_ATTRIBUTES convert_ushort8_sat_rtp(double8 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16(double16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat(double16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rte(double16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rte(double16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtz(double16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtz(double16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtn(double16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtn(double16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_rtp(double16 arg);
ushort16 __CL_CONST_ATTRIBUTES convert_ushort16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint __CL_CONST_ATTRIBUTES convert_uint(char arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(char arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(char arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(char arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(char arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(char arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(char arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(char arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(char arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(char arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(char2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(char2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(char2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(char2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(char2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(char2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(char2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(char2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(char2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(char2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(char3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(char3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(char3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(char3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(char3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(char3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(char3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(char3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(char3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(char3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(char4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(char4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(char4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(char4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(char4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(char4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(char4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(char4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(char4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(char4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(char8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(char8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(char8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(char8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(char8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(char8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(char8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(char8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(char8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(char8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(char16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(char16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(char16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(char16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(char16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(char16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(char16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(char16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(char16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(char16 arg);
uint __CL_CONST_ATTRIBUTES convert_uint(short arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(short arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(short arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(short arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(short arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(short arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(short arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(short arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(short arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(short arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(short2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(short2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(short2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(short2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(short2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(short2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(short2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(short2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(short2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(short2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(short3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(short3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(short3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(short3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(short3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(short3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(short3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(short3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(short3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(short3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(short4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(short4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(short4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(short4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(short4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(short4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(short4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(short4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(short4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(short4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(short8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(short8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(short8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(short8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(short8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(short8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(short8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(short8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(short8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(short8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(short16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(short16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(short16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(short16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(short16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(short16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(short16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(short16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(short16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(short16 arg);
uint __CL_CONST_ATTRIBUTES convert_uint(int arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(int arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(int arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(int arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(int arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(int arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(int arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(int arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(int arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(int arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(int2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(int2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(int2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(int2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(int2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(int2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(int2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(int2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(int2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(int2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(int3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(int3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(int3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(int3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(int3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(int3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(int3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(int3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(int3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(int3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(int4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(int4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(int4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(int4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(int4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(int4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(int4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(int4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(int4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(int4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(int8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(int8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(int8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(int8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(int8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(int8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(int8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(int8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(int8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(int8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(int16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(int16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(int16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(int16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(int16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(int16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(int16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(int16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(int16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(int16 arg);
uint __CL_CONST_ATTRIBUTES convert_uint(long arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(long arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(long arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(long arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(long arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(long arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(long arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(long arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(long arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(long arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(long2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(long2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(long2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(long2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(long2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(long2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(long2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(long2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(long2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(long2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(long3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(long3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(long3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(long3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(long3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(long3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(long3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(long3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(long3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(long3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(long4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(long4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(long4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(long4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(long4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(long4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(long4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(long4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(long4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(long4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(long8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(long8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(long8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(long8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(long8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(long8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(long8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(long8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(long8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(long8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(long16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(long16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(long16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(long16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(long16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(long16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(long16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(long16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(long16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(long16 arg);
uint __CL_CONST_ATTRIBUTES convert_uint(uchar arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(uchar arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(uchar arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(uchar arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(uchar arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(uchar arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(uchar arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(uchar arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(uchar arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(uchar arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(uchar2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(uchar2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(uchar2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(uchar2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(uchar2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(uchar2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(uchar2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(uchar2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(uchar2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(uchar2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(uchar3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(uchar3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(uchar3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(uchar3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(uchar3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(uchar3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(uchar3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(uchar3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(uchar3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(uchar3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(uchar4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(uchar4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(uchar4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(uchar4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(uchar4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(uchar4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(uchar4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(uchar4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(uchar4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(uchar4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(uchar8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(uchar8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(uchar8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(uchar8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(uchar8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(uchar8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(uchar8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(uchar8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(uchar8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(uchar8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(uchar16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(uchar16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(uchar16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(uchar16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(uchar16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(uchar16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(uchar16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(uchar16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(uchar16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(uchar16 arg);
uint __CL_CONST_ATTRIBUTES convert_uint(ushort arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(ushort arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(ushort arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(ushort arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(ushort arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(ushort arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(ushort arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(ushort arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(ushort arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(ushort arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(ushort2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(ushort2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(ushort2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(ushort2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(ushort2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(ushort2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(ushort2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(ushort2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(ushort2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(ushort2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(ushort3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(ushort3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(ushort3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(ushort3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(ushort3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(ushort3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(ushort3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(ushort3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(ushort3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(ushort3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(ushort4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(ushort4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(ushort4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(ushort4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(ushort4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(ushort4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(ushort4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(ushort4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(ushort4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(ushort4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(ushort8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(ushort8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(ushort8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(ushort8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(ushort8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(ushort8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(ushort8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(ushort8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(ushort8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(ushort8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(ushort16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(ushort16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(ushort16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(ushort16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(ushort16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(ushort16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(ushort16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(ushort16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(ushort16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(ushort16 arg);
uint __CL_CONST_ATTRIBUTES convert_uint(uint arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(uint arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(uint arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(uint arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(uint arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(uint arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(uint arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(uint arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(uint arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(uint arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(uint2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(uint2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(uint2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(uint2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(uint2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(uint2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(uint2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(uint2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(uint2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(uint2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(uint3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(uint3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(uint4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(uint4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(uint8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(uint8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(uint8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(uint8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(uint8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(uint8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(uint8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(uint8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(uint8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(uint8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(uint16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(uint16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(uint16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(uint16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(uint16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(uint16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(uint16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(uint16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(uint16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(uint16 arg);
uint __CL_CONST_ATTRIBUTES convert_uint(ulong arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(ulong arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(ulong arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(ulong arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(ulong arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(ulong arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(ulong arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(ulong arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(ulong arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(ulong arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(ulong2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(ulong2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(ulong2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(ulong2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(ulong2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(ulong2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(ulong2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(ulong2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(ulong2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(ulong2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(ulong3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(ulong3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(ulong3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(ulong3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(ulong3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(ulong3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(ulong3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(ulong3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(ulong3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(ulong3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(ulong4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(ulong4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(ulong4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(ulong4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(ulong4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(ulong4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(ulong4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(ulong4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(ulong4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(ulong4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(ulong8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(ulong8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(ulong8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(ulong8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(ulong8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(ulong8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(ulong8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(ulong8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(ulong8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(ulong8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(ulong16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(ulong16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(ulong16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(ulong16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(ulong16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(ulong16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(ulong16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(ulong16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(ulong16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
uint __CL_CONST_ATTRIBUTES convert_uint(half arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(half arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(half arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(half arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(half arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(half arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(half arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(half arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(half arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(half arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(half2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(half2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(half2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(half2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(half2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(half2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(half2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(half2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(half2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(half2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(half3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(half3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(half3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(half3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(half3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(half3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(half3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(half3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(half3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(half3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(half4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(half4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(half4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(half4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(half4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(half4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(half4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(half4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(half4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(half4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(half8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(half8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(half8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(half8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(half8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(half8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(half8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(half8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(half8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(half8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(half16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(half16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(half16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(half16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(half16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(half16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(half16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(half16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(half16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
uint __CL_CONST_ATTRIBUTES convert_uint(float arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(float arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(float arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(float arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(float arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(float arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(float arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(float arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(float arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(float arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(float2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(float2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(float2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(float2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(float2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(float2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(float2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(float2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(float2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(float2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(float3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(float3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(float3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(float3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(float3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(float3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(float3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(float3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(float3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(float3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(float4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(float4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(float4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(float4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(float4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(float4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(float4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(float4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(float4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(float4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(float8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(float8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(float8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(float8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(float8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(float8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(float8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(float8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(float8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(float8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(float16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(float16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(float16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(float16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(float16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(float16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(float16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(float16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(float16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
uint __CL_CONST_ATTRIBUTES convert_uint(double arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat(double arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rte(double arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rte(double arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtz(double arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtz(double arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtn(double arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtn(double arg);
uint __CL_CONST_ATTRIBUTES convert_uint_rtp(double arg);
uint __CL_CONST_ATTRIBUTES convert_uint_sat_rtp(double arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2(double2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat(double2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rte(double2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rte(double2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtz(double2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtz(double2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtn(double2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtn(double2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_rtp(double2 arg);
uint2 __CL_CONST_ATTRIBUTES convert_uint2_sat_rtp(double2 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3(double3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat(double3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rte(double3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rte(double3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtz(double3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtz(double3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtn(double3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtn(double3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_rtp(double3 arg);
uint3 __CL_CONST_ATTRIBUTES convert_uint3_sat_rtp(double3 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4(double4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat(double4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rte(double4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rte(double4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtz(double4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtz(double4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtn(double4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtn(double4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_rtp(double4 arg);
uint4 __CL_CONST_ATTRIBUTES convert_uint4_sat_rtp(double4 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8(double8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat(double8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rte(double8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rte(double8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtz(double8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtz(double8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtn(double8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtn(double8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_rtp(double8 arg);
uint8 __CL_CONST_ATTRIBUTES convert_uint8_sat_rtp(double8 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16(double16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat(double16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rte(double16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rte(double16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtz(double16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtz(double16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtn(double16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtn(double16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_rtp(double16 arg);
uint16 __CL_CONST_ATTRIBUTES convert_uint16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ulong __CL_CONST_ATTRIBUTES convert_ulong(char arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(char arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(char arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(char arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(char arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(char arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(char arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(char arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(char arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(char arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(char2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(char2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(char2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(char2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(char2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(char2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(char2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(char2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(char2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(char2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(char3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(char3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(char3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(char3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(char3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(char3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(char3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(char3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(char3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(char3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(char4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(char4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(char4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(char4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(char4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(char4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(char4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(char4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(char4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(char4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(char8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(char8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(char8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(char8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(char8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(char8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(char8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(char8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(char8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(char8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(char16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(char16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(char16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(char16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(char16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(char16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(char16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(char16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(char16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(char16 arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong(short arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(short arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(short arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(short arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(short arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(short arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(short arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(short arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(short arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(short arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(short2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(short2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(short2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(short2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(short2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(short2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(short2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(short2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(short2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(short2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(short3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(short3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(short3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(short3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(short3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(short3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(short3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(short3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(short3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(short3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(short4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(short4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(short4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(short4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(short4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(short4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(short4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(short4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(short4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(short4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(short8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(short8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(short8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(short8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(short8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(short8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(short8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(short8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(short8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(short8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(short16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(short16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(short16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(short16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(short16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(short16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(short16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(short16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(short16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(short16 arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong(int arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(int arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(int arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(int arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(int arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(int arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(int arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(int arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(int arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(int arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(int2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(int2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(int2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(int2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(int2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(int2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(int2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(int2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(int2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(int2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(int3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(int3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(int3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(int3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(int3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(int3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(int3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(int3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(int3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(int3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(int4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(int4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(int4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(int4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(int4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(int4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(int4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(int4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(int4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(int4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(int8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(int8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(int8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(int8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(int8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(int8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(int8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(int8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(int8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(int8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(int16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(int16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(int16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(int16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(int16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(int16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(int16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(int16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(int16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(int16 arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong(long arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(long arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(long arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(long arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(long arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(long arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(long arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(long arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(long arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(long arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(long2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(long2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(long2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(long2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(long2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(long2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(long2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(long2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(long2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(long2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(long3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(long3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(long3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(long3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(long3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(long3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(long3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(long3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(long3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(long3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(long4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(long4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(long4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(long4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(long4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(long4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(long4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(long4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(long4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(long4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(long8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(long8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(long8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(long8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(long8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(long8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(long8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(long8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(long8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(long8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(long16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(long16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(long16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(long16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(long16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(long16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(long16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(long16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(long16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(long16 arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong(uchar arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(uchar arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(uchar arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(uchar arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(uchar arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(uchar arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(uchar arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(uchar arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(uchar arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(uchar arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(uchar2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(uchar2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(uchar2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(uchar2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(uchar2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(uchar2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(uchar2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(uchar2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(uchar2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(uchar2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(uchar3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(uchar3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(uchar3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(uchar3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(uchar3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(uchar3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(uchar3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(uchar3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(uchar3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(uchar3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(uchar4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(uchar4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(uchar4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(uchar4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(uchar4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(uchar4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(uchar4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(uchar4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(uchar4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(uchar4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(uchar8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(uchar8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(uchar8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(uchar8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(uchar8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(uchar8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(uchar8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(uchar8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(uchar8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(uchar8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(uchar16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(uchar16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(uchar16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(uchar16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(uchar16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(uchar16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(uchar16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(uchar16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(uchar16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(uchar16 arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong(ushort arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(ushort arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(ushort arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(ushort arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(ushort arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(ushort arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(ushort arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(ushort arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(ushort arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(ushort arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(ushort2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(ushort2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(ushort2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(ushort2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(ushort2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(ushort2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(ushort2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(ushort2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(ushort2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(ushort2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(ushort3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(ushort3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(ushort3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(ushort3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(ushort3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(ushort3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(ushort3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(ushort3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(ushort3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(ushort3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(ushort4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(ushort4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(ushort4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(ushort4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(ushort4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(ushort4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(ushort4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(ushort4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(ushort4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(ushort4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(ushort8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(ushort8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(ushort8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(ushort8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(ushort8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(ushort8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(ushort8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(ushort8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(ushort8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(ushort8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(ushort16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(ushort16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(ushort16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(ushort16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(ushort16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(ushort16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(ushort16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(ushort16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(ushort16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(ushort16 arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong(uint arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(uint arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(uint arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(uint arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(uint arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(uint arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(uint arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(uint arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(uint arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(uint arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(uint2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(uint2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(uint2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(uint2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(uint2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(uint2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(uint2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(uint2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(uint2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(uint2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(uint3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(uint3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(uint3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(uint3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(uint3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(uint3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(uint3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(uint3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(uint3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(uint3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(uint4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(uint4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(uint4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(uint4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(uint4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(uint4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(uint4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(uint4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(uint4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(uint4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(uint8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(uint8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(uint8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(uint8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(uint8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(uint8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(uint8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(uint8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(uint8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(uint8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(uint16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(uint16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(uint16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(uint16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(uint16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(uint16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(uint16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(uint16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(uint16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(uint16 arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong(ulong arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(ulong arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(ulong arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(ulong arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(ulong arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(ulong arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(ulong arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(ulong arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(ulong arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(ulong arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(ulong2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(ulong2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(ulong2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(ulong2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(ulong2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(ulong2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(ulong2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(ulong2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(ulong2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(ulong2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(ulong3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(ulong3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(ulong4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(ulong4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(ulong8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(ulong8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(ulong8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(ulong8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(ulong8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(ulong8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(ulong8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(ulong8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(ulong8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(ulong8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(ulong16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(ulong16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(ulong16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(ulong16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(ulong16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(ulong16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(ulong16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(ulong16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(ulong16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
ulong __CL_CONST_ATTRIBUTES convert_ulong(half arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(half arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(half arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(half arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(half arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(half arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(half arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(half arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(half arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(half arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(half2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(half2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(half2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(half2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(half2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(half2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(half2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(half2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(half2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(half2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(half3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(half3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(half3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(half3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(half3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(half3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(half3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(half3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(half3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(half3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(half4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(half4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(half4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(half4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(half4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(half4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(half4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(half4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(half4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(half4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(half8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(half8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(half8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(half8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(half8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(half8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(half8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(half8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(half8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(half8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(half16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(half16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(half16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(half16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(half16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(half16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(half16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(half16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(half16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
ulong __CL_CONST_ATTRIBUTES convert_ulong(float arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(float arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(float arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(float arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(float arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(float arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(float arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(float arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(float arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(float arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(float2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(float2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(float2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(float2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(float2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(float2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(float2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(float2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(float2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(float2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(float3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(float3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(float3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(float3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(float3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(float3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(float3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(float3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(float3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(float3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(float4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(float4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(float4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(float4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(float4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(float4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(float4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(float4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(float4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(float4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(float8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(float8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(float8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(float8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(float8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(float8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(float8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(float8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(float8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(float8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(float16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(float16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(float16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(float16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(float16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(float16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(float16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(float16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(float16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ulong __CL_CONST_ATTRIBUTES convert_ulong(double arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat(double arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rte(double arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rte(double arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtz(double arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtz(double arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtn(double arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtn(double arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_rtp(double arg);
ulong __CL_CONST_ATTRIBUTES convert_ulong_sat_rtp(double arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2(double2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat(double2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rte(double2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rte(double2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtz(double2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtz(double2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtn(double2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtn(double2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_rtp(double2 arg);
ulong2 __CL_CONST_ATTRIBUTES convert_ulong2_sat_rtp(double2 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3(double3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat(double3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rte(double3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rte(double3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtz(double3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtz(double3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtn(double3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtn(double3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_rtp(double3 arg);
ulong3 __CL_CONST_ATTRIBUTES convert_ulong3_sat_rtp(double3 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4(double4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat(double4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rte(double4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rte(double4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtz(double4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtz(double4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtn(double4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtn(double4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_rtp(double4 arg);
ulong4 __CL_CONST_ATTRIBUTES convert_ulong4_sat_rtp(double4 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8(double8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat(double8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rte(double8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rte(double8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtz(double8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtz(double8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtn(double8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtn(double8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_rtp(double8 arg);
ulong8 __CL_CONST_ATTRIBUTES convert_ulong8_sat_rtp(double8 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16(double16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat(double16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rte(double16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rte(double16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtz(double16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtz(double16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtn(double16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtn(double16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_rtp(double16 arg);
ulong16 __CL_CONST_ATTRIBUTES convert_ulong16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES convert_half(char arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(char arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(char arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(char arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(char arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(char arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(char arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(char arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(char arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(char arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(char2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(char2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(char2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(char2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(char2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(char2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(char2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(char2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(char2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(char2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(char3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(char3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(char3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(char3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(char3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(char3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(char3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(char3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(char3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(char3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(char4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(char4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(char4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(char4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(char4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(char4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(char4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(char4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(char4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(char4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(char8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(char8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(char8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(char8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(char8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(char8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(char8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(char8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(char8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(char8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(char16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(char16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(char16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(char16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(char16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(char16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(char16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(char16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(char16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(char16 arg);
half __CL_CONST_ATTRIBUTES convert_half(short arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(short arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(short arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(short arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(short arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(short arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(short arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(short arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(short arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(short arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(short2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(short2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(short2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(short2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(short2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(short2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(short2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(short2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(short2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(short2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(short3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(short3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(short3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(short3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(short3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(short3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(short3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(short3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(short3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(short3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(short4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(short4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(short4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(short4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(short4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(short4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(short4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(short4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(short4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(short4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(short8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(short8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(short8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(short8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(short8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(short8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(short8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(short8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(short8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(short8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(short16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(short16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(short16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(short16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(short16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(short16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(short16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(short16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(short16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(short16 arg);
half __CL_CONST_ATTRIBUTES convert_half(int arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(int arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(int arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(int arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(int arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(int arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(int arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(int arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(int arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(int arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(int2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(int2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(int2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(int2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(int2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(int2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(int2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(int2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(int2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(int2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(int3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(int3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(int3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(int3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(int3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(int3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(int3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(int3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(int3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(int3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(int4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(int4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(int4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(int4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(int4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(int4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(int4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(int4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(int4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(int4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(int8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(int8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(int8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(int8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(int8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(int8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(int8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(int8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(int8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(int8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(int16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(int16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(int16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(int16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(int16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(int16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(int16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(int16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(int16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(int16 arg);
half __CL_CONST_ATTRIBUTES convert_half(long arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(long arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(long arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(long arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(long arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(long arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(long arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(long arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(long arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(long arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(long2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(long2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(long2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(long2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(long2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(long2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(long2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(long2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(long2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(long2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(long3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(long3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(long3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(long3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(long3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(long3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(long3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(long3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(long3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(long3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(long4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(long4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(long4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(long4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(long4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(long4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(long4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(long4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(long4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(long4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(long8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(long8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(long8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(long8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(long8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(long8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(long8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(long8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(long8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(long8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(long16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(long16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(long16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(long16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(long16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(long16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(long16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(long16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(long16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(long16 arg);
half __CL_CONST_ATTRIBUTES convert_half(uchar arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(uchar arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(uchar arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(uchar arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(uchar arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(uchar arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(uchar arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(uchar arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(uchar arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(uchar arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(uchar2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(uchar2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(uchar2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(uchar2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(uchar2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(uchar2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(uchar2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(uchar2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(uchar2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(uchar2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(uchar3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(uchar3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(uchar3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(uchar3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(uchar3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(uchar3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(uchar3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(uchar3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(uchar3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(uchar3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(uchar4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(uchar4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(uchar4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(uchar4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(uchar4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(uchar4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(uchar4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(uchar4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(uchar4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(uchar4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(uchar8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(uchar8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(uchar8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(uchar8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(uchar8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(uchar8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(uchar8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(uchar8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(uchar8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(uchar8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(uchar16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(uchar16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(uchar16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(uchar16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(uchar16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(uchar16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(uchar16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(uchar16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(uchar16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(uchar16 arg);
half __CL_CONST_ATTRIBUTES convert_half(ushort arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(ushort arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(ushort arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(ushort arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(ushort arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(ushort arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(ushort arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(ushort arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(ushort arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(ushort arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(ushort2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(ushort2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(ushort3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(ushort3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(ushort3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(ushort3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(ushort3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(ushort3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(ushort3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(ushort3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(ushort3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(ushort3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(ushort4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(ushort4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(ushort8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(ushort8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(ushort16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(ushort16 arg);
half __CL_CONST_ATTRIBUTES convert_half(uint arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(uint arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(uint arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(uint arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(uint arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(uint arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(uint arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(uint arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(uint arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(uint arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(uint2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(uint2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(uint2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(uint2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(uint2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(uint2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(uint2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(uint2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(uint2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(uint2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(uint3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(uint3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(uint3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(uint3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(uint3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(uint3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(uint3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(uint3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(uint3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(uint3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(uint4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(uint4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(uint4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(uint4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(uint4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(uint4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(uint4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(uint4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(uint4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(uint4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(uint8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(uint8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(uint8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(uint8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(uint8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(uint8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(uint8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(uint8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(uint8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(uint8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(uint16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(uint16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(uint16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(uint16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(uint16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(uint16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(uint16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(uint16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(uint16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(uint16 arg);
half __CL_CONST_ATTRIBUTES convert_half(ulong arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(ulong arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(ulong arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(ulong arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(ulong arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(ulong arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(ulong arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(ulong arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(ulong arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(ulong arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(ulong2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(ulong2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(ulong2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(ulong2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(ulong2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(ulong2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(ulong2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(ulong2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(ulong2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(ulong2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(ulong3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(ulong3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(ulong3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(ulong3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(ulong3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(ulong3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(ulong3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(ulong3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(ulong3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(ulong3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(ulong4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(ulong4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(ulong4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(ulong4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(ulong4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(ulong4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(ulong4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(ulong4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(ulong4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(ulong4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(ulong8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(ulong8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(ulong8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(ulong8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(ulong8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(ulong8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(ulong8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(ulong8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(ulong8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(ulong8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(ulong16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(ulong16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(ulong16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(ulong16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(ulong16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(ulong16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(ulong16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(ulong16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(ulong16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES convert_half(half arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(half arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(half arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(half arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(half arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(half arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(half arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(half arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(half arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(half arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(half2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(half2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(half2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(half2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(half2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(half2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(half2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(half2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(half2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(half2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(half3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(half3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(half3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(half3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(half3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(half3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(half3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(half3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(half3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(half3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(half4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(half4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(half4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(half4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(half4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(half4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(half4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(half4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(half4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(half4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(half8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(half8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(half8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(half8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(half8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(half8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(half8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(half8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(half8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(half8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(half16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(half16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(half16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(half16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(half16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(half16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(half16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(half16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(half16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES convert_half(float arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(float arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(float arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(float arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(float arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(float arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(float arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(float arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(float arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(float arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(float2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(float2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(float2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(float2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(float2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(float2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(float2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(float2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(float2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(float2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(float3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(float3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(float3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(float3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(float3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(float3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(float3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(float3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(float3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(float3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(float4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(float4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(float4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(float4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(float4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(float4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(float4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(float4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(float4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(float4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(float8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(float8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(float8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(float8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(float8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(float8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(float8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(float8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(float8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(float8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(float16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(float16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(float16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(float16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(float16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(float16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(float16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(float16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(float16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
half __CL_CONST_ATTRIBUTES convert_half(double arg);
half __CL_CONST_ATTRIBUTES convert_half_sat(double arg);
half __CL_CONST_ATTRIBUTES convert_half_rte(double arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rte(double arg);
half __CL_CONST_ATTRIBUTES convert_half_rtz(double arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtz(double arg);
half __CL_CONST_ATTRIBUTES convert_half_rtn(double arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtn(double arg);
half __CL_CONST_ATTRIBUTES convert_half_rtp(double arg);
half __CL_CONST_ATTRIBUTES convert_half_sat_rtp(double arg);
half2 __CL_CONST_ATTRIBUTES convert_half2(double2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat(double2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rte(double2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rte(double2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtz(double2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtz(double2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtn(double2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtn(double2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_rtp(double2 arg);
half2 __CL_CONST_ATTRIBUTES convert_half2_sat_rtp(double2 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3(double3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat(double3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rte(double3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rte(double3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtz(double3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtz(double3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtn(double3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtn(double3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_rtp(double3 arg);
half3 __CL_CONST_ATTRIBUTES convert_half3_sat_rtp(double3 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4(double4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat(double4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rte(double4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rte(double4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtz(double4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtz(double4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtn(double4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtn(double4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_rtp(double4 arg);
half4 __CL_CONST_ATTRIBUTES convert_half4_sat_rtp(double4 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8(double8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat(double8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rte(double8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rte(double8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtz(double8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtz(double8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtn(double8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtn(double8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_rtp(double8 arg);
half8 __CL_CONST_ATTRIBUTES convert_half8_sat_rtp(double8 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16(double16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat(double16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rte(double16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rte(double16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtz(double16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtz(double16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtn(double16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtn(double16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_rtp(double16 arg);
half16 __CL_CONST_ATTRIBUTES convert_half16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES convert_float(char arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(char arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(char arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(char arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(char arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(char arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(char arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(char arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(char arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(char arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(char2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(char2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(char2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(char2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(char2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(char2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(char2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(char2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(char2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(char2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(char3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(char3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(char3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(char3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(char3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(char3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(char3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(char3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(char3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(char3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(char4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(char4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(char4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(char4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(char4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(char4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(char4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(char4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(char4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(char4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(char8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(char8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(char8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(char8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(char8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(char8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(char8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(char8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(char8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(char8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(char16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(char16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(char16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(char16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(char16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(char16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(char16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(char16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(char16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(char16 arg);
float __CL_CONST_ATTRIBUTES convert_float(short arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(short arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(short arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(short arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(short arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(short arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(short arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(short arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(short arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(short arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(short2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(short2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(short2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(short2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(short2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(short2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(short2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(short2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(short2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(short2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(short3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(short3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(short3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(short3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(short3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(short3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(short3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(short3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(short3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(short3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(short4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(short4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(short4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(short4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(short4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(short4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(short4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(short4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(short4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(short4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(short8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(short8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(short8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(short8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(short8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(short8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(short8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(short8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(short8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(short8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(short16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(short16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(short16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(short16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(short16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(short16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(short16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(short16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(short16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(short16 arg);
float __CL_CONST_ATTRIBUTES convert_float(int arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(int arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(int arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(int arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(int arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(int arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(int arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(int arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(int arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(int arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(int2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(int2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(int2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(int2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(int2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(int2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(int2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(int2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(int2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(int2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(int3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(int3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(int3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(int3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(int3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(int3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(int3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(int3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(int3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(int3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(int4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(int4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(int4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(int4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(int4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(int4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(int4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(int4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(int4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(int4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(int8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(int8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(int8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(int8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(int8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(int8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(int8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(int8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(int8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(int8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(int16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(int16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(int16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(int16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(int16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(int16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(int16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(int16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(int16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(int16 arg);
float __CL_CONST_ATTRIBUTES convert_float(long arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(long arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(long arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(long arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(long arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(long arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(long arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(long arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(long arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(long arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(long2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(long2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(long2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(long2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(long2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(long2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(long2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(long2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(long2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(long2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(long3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(long3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(long3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(long3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(long3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(long3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(long3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(long3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(long3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(long3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(long4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(long4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(long4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(long4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(long4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(long4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(long4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(long4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(long4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(long4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(long8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(long8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(long8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(long8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(long8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(long8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(long8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(long8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(long8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(long8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(long16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(long16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(long16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(long16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(long16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(long16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(long16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(long16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(long16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(long16 arg);
float __CL_CONST_ATTRIBUTES convert_float(uchar arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(uchar arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(uchar arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(uchar arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(uchar arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(uchar arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(uchar arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(uchar arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(uchar arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(uchar arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(uchar2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(uchar2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(uchar2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(uchar2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(uchar2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(uchar2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(uchar2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(uchar2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(uchar2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(uchar2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(uchar3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(uchar3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(uchar3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(uchar3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(uchar3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(uchar3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(uchar3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(uchar3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(uchar3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(uchar3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(uchar4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(uchar4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(uchar4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(uchar4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(uchar4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(uchar4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(uchar4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(uchar4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(uchar4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(uchar4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(uchar8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(uchar8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(uchar8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(uchar8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(uchar8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(uchar8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(uchar8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(uchar8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(uchar8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(uchar8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(uchar16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(uchar16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(uchar16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(uchar16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(uchar16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(uchar16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(uchar16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(uchar16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(uchar16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(uchar16 arg);
float __CL_CONST_ATTRIBUTES convert_float(ushort arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(ushort arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(ushort arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(ushort arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(ushort arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(ushort arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(ushort arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(ushort arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(ushort arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(ushort arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(ushort2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(ushort2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(ushort2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(ushort2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(ushort2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(ushort2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(ushort2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(ushort2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(ushort2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(ushort2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(ushort3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(ushort3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(ushort3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(ushort3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(ushort3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(ushort3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(ushort3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(ushort3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(ushort3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(ushort3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(ushort4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(ushort4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(ushort4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(ushort4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(ushort4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(ushort4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(ushort4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(ushort4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(ushort4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(ushort4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(ushort8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(ushort8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(ushort8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(ushort8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(ushort8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(ushort8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(ushort8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(ushort8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(ushort8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(ushort8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(ushort16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(ushort16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(ushort16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(ushort16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(ushort16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(ushort16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(ushort16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(ushort16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(ushort16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(ushort16 arg);
float __CL_CONST_ATTRIBUTES convert_float(uint arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(uint arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(uint arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(uint arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(uint arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(uint arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(uint arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(uint arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(uint arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(uint arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(uint2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(uint2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(uint2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(uint2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(uint2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(uint2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(uint2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(uint2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(uint2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(uint2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(uint3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(uint3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(uint3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(uint3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(uint3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(uint3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(uint3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(uint3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(uint3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(uint3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(uint4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(uint4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(uint4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(uint4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(uint4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(uint4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(uint4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(uint4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(uint4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(uint4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(uint8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(uint8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(uint8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(uint8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(uint8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(uint8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(uint8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(uint8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(uint8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(uint8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(uint16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(uint16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(uint16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(uint16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(uint16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(uint16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(uint16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(uint16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(uint16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(uint16 arg);
float __CL_CONST_ATTRIBUTES convert_float(ulong arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(ulong arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(ulong arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(ulong arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(ulong arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(ulong arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(ulong arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(ulong arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(ulong arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(ulong arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(ulong2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(ulong2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(ulong2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(ulong2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(ulong2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(ulong2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(ulong2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(ulong2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(ulong2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(ulong2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(ulong3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(ulong3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(ulong3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(ulong3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(ulong3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(ulong3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(ulong3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(ulong3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(ulong3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(ulong3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(ulong4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(ulong4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(ulong4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(ulong4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(ulong4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(ulong4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(ulong4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(ulong4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(ulong4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(ulong4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(ulong8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(ulong8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(ulong8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(ulong8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(ulong8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(ulong8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(ulong8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(ulong8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(ulong8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(ulong8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(ulong16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(ulong16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(ulong16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(ulong16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(ulong16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(ulong16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(ulong16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(ulong16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(ulong16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES convert_float(half arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(half arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(half arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(half arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(half arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(half arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(half arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(half arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(half arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(half arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(half2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(half2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(half2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(half2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(half2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(half2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(half2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(half2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(half2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(half2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(half3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(half3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(half3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(half3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(half3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(half3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(half3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(half3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(half3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(half3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(half4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(half4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(half4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(half4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(half4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(half4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(half4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(half4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(half4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(half4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(half8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(half8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(half8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(half8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(half8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(half8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(half8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(half8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(half8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(half8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(half16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(half16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(half16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(half16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(half16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(half16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(half16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(half16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(half16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES convert_float(float arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(float arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(float arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(float arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(float arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(float arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(float arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(float arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(float arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(float arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(float2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(float2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(float2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(float2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(float2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(float2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(float2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(float2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(float2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(float2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(float3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(float3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(float3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(float3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(float3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(float3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(float3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(float3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(float3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(float3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(float4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(float4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(float4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(float4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(float4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(float4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(float4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(float4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(float4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(float4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(float8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(float8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(float8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(float8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(float8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(float8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(float8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(float8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(float8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(float8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(float16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(float16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(float16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(float16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(float16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(float16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(float16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(float16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(float16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
float __CL_CONST_ATTRIBUTES convert_float(double arg);
float __CL_CONST_ATTRIBUTES convert_float_sat(double arg);
float __CL_CONST_ATTRIBUTES convert_float_rte(double arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rte(double arg);
float __CL_CONST_ATTRIBUTES convert_float_rtz(double arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtz(double arg);
float __CL_CONST_ATTRIBUTES convert_float_rtn(double arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtn(double arg);
float __CL_CONST_ATTRIBUTES convert_float_rtp(double arg);
float __CL_CONST_ATTRIBUTES convert_float_sat_rtp(double arg);
float2 __CL_CONST_ATTRIBUTES convert_float2(double2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat(double2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rte(double2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rte(double2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtz(double2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtz(double2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtn(double2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtn(double2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_rtp(double2 arg);
float2 __CL_CONST_ATTRIBUTES convert_float2_sat_rtp(double2 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3(double3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat(double3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rte(double3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rte(double3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtz(double3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtz(double3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtn(double3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtn(double3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_rtp(double3 arg);
float3 __CL_CONST_ATTRIBUTES convert_float3_sat_rtp(double3 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4(double4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat(double4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rte(double4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rte(double4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtz(double4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtz(double4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtn(double4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtn(double4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_rtp(double4 arg);
float4 __CL_CONST_ATTRIBUTES convert_float4_sat_rtp(double4 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8(double8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat(double8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rte(double8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rte(double8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtz(double8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtz(double8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtn(double8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtn(double8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_rtp(double8 arg);
float8 __CL_CONST_ATTRIBUTES convert_float8_sat_rtp(double8 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16(double16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat(double16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rte(double16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rte(double16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtz(double16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtz(double16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtn(double16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtn(double16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_rtp(double16 arg);
float16 __CL_CONST_ATTRIBUTES convert_float16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES convert_double(char arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(char arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(char arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(char arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(char arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(char arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(char arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(char arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(char arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(char arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(char2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(char2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(char2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(char2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(char2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(char2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(char2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(char2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(char2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(char2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(char3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(char3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(char3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(char3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(char3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(char3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(char3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(char3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(char3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(char3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(char4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(char4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(char4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(char4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(char4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(char4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(char4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(char4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(char4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(char4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(char8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(char8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(char8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(char8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(char8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(char8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(char8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(char8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(char8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(char8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(char16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(char16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(char16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(char16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(char16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(char16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(char16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(char16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(char16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(char16 arg);
double __CL_CONST_ATTRIBUTES convert_double(short arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(short arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(short arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(short arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(short arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(short arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(short arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(short arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(short arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(short arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(short2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(short2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(short2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(short2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(short2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(short2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(short2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(short2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(short2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(short2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(short3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(short3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(short3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(short3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(short3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(short3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(short3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(short3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(short3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(short3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(short4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(short4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(short4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(short4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(short4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(short4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(short4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(short4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(short4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(short4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(short8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(short8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(short8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(short8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(short8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(short8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(short8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(short8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(short8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(short8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(short16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(short16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(short16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(short16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(short16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(short16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(short16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(short16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(short16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(short16 arg);
double __CL_CONST_ATTRIBUTES convert_double(int arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(int arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(int arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(int arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(int arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(int arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(int arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(int arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(int arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(int arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(int2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(int2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(int2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(int2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(int2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(int2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(int2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(int2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(int2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(int2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(int3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(int3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(int3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(int3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(int3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(int3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(int3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(int3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(int3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(int3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(int4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(int4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(int4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(int4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(int4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(int4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(int4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(int4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(int4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(int4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(int8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(int8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(int8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(int8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(int8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(int8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(int8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(int8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(int8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(int8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(int16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(int16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(int16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(int16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(int16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(int16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(int16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(int16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(int16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(int16 arg);
double __CL_CONST_ATTRIBUTES convert_double(long arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(long arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(long arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(long arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(long arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(long arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(long arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(long arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(long arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(long arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(long2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(long2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(long2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(long2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(long2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(long2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(long2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(long2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(long2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(long2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(long3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(long3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(long3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(long3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(long3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(long3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(long3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(long3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(long3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(long3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(long4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(long4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(long4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(long4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(long4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(long4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(long4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(long4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(long4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(long4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(long8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(long8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(long8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(long8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(long8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(long8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(long8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(long8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(long8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(long8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(long16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(long16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(long16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(long16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(long16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(long16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(long16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(long16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(long16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(long16 arg);
double __CL_CONST_ATTRIBUTES convert_double(uchar arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(uchar arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(uchar arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(uchar arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(uchar arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(uchar arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(uchar arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(uchar arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(uchar arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(uchar arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(uchar2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(uchar2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(uchar2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(uchar2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(uchar2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(uchar2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(uchar2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(uchar2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(uchar2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(uchar2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(uchar3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(uchar3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(uchar3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(uchar3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(uchar3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(uchar3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(uchar3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(uchar3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(uchar3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(uchar3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(uchar4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(uchar4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(uchar4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(uchar4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(uchar4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(uchar4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(uchar4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(uchar4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(uchar4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(uchar4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(uchar8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(uchar8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(uchar8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(uchar8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(uchar8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(uchar8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(uchar8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(uchar8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(uchar8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(uchar8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(uchar16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(uchar16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(uchar16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(uchar16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(uchar16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(uchar16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(uchar16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(uchar16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(uchar16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(uchar16 arg);
double __CL_CONST_ATTRIBUTES convert_double(ushort arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(ushort arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(ushort arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(ushort arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(ushort arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(ushort arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(ushort arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(ushort arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(ushort arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(ushort arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(ushort2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(ushort2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(ushort2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(ushort2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(ushort2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(ushort2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(ushort2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(ushort2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(ushort2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(ushort2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(ushort3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(ushort3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(ushort3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(ushort3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(ushort3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(ushort3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(ushort3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(ushort3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(ushort3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(ushort3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(ushort4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(ushort4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(ushort4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(ushort4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(ushort4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(ushort4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(ushort4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(ushort4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(ushort4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(ushort4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(ushort8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(ushort8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(ushort8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(ushort8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(ushort8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(ushort8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(ushort8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(ushort8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(ushort8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(ushort8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(ushort16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(ushort16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(ushort16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(ushort16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(ushort16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(ushort16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(ushort16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(ushort16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(ushort16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(ushort16 arg);
double __CL_CONST_ATTRIBUTES convert_double(uint arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(uint arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(uint arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(uint arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(uint arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(uint arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(uint arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(uint arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(uint arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(uint arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(uint2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(uint2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(uint2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(uint2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(uint2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(uint2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(uint2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(uint2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(uint2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(uint2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(uint3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(uint3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(uint3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(uint3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(uint3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(uint3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(uint3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(uint3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(uint3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(uint3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(uint4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(uint4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(uint4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(uint4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(uint4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(uint4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(uint4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(uint4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(uint4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(uint4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(uint8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(uint8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(uint8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(uint8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(uint8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(uint8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(uint8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(uint8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(uint8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(uint8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(uint16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(uint16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(uint16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(uint16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(uint16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(uint16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(uint16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(uint16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(uint16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(uint16 arg);
double __CL_CONST_ATTRIBUTES convert_double(ulong arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(ulong arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(ulong arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(ulong arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(ulong arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(ulong arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(ulong arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(ulong arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(ulong arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(ulong arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(ulong2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(ulong2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(ulong2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(ulong2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(ulong2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(ulong2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(ulong2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(ulong2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(ulong2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(ulong2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(ulong3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(ulong3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(ulong3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(ulong3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(ulong3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(ulong3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(ulong3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(ulong3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(ulong3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(ulong3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(ulong4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(ulong4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(ulong4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(ulong4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(ulong4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(ulong4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(ulong4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(ulong4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(ulong4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(ulong4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(ulong8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(ulong8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(ulong8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(ulong8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(ulong8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(ulong8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(ulong8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(ulong8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(ulong8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(ulong8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(ulong16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(ulong16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(ulong16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(ulong16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(ulong16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(ulong16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(ulong16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(ulong16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(ulong16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(ulong16 arg);
#ifdef __CA_BUILTINS_HALF_SUPPORT
double __CL_CONST_ATTRIBUTES convert_double(half arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(half arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(half arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(half arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(half arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(half arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(half arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(half arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(half arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(half arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(half2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(half2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(half2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(half2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(half2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(half2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(half2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(half2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(half2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(half2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(half3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(half3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(half3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(half3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(half3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(half3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(half3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(half3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(half3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(half3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(half4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(half4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(half4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(half4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(half4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(half4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(half4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(half4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(half4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(half4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(half8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(half8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(half8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(half8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(half8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(half8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(half8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(half8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(half8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(half8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(half16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(half16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(half16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(half16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(half16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(half16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(half16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(half16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(half16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(half16 arg);
#endif  // __CA_BUILTINS_HALF_SUPPORT
double __CL_CONST_ATTRIBUTES convert_double(float arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(float arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(float arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(float arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(float arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(float arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(float arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(float arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(float arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(float arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(float2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(float2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(float2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(float2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(float2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(float2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(float2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(float2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(float2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(float2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(float3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(float3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(float3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(float3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(float3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(float3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(float3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(float3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(float3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(float3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(float4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(float4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(float4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(float4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(float4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(float4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(float4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(float4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(float4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(float4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(float8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(float8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(float8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(float8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(float8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(float8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(float8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(float8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(float8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(float8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(float16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(float16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(float16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(float16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(float16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(float16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(float16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(float16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(float16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES convert_double(double arg);
double __CL_CONST_ATTRIBUTES convert_double_sat(double arg);
double __CL_CONST_ATTRIBUTES convert_double_rte(double arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rte(double arg);
double __CL_CONST_ATTRIBUTES convert_double_rtz(double arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtz(double arg);
double __CL_CONST_ATTRIBUTES convert_double_rtn(double arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtn(double arg);
double __CL_CONST_ATTRIBUTES convert_double_rtp(double arg);
double __CL_CONST_ATTRIBUTES convert_double_sat_rtp(double arg);
double2 __CL_CONST_ATTRIBUTES convert_double2(double2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat(double2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rte(double2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rte(double2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtz(double2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtz(double2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtn(double2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtn(double2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_rtp(double2 arg);
double2 __CL_CONST_ATTRIBUTES convert_double2_sat_rtp(double2 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3(double3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat(double3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rte(double3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rte(double3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtz(double3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtz(double3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtn(double3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtn(double3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_rtp(double3 arg);
double3 __CL_CONST_ATTRIBUTES convert_double3_sat_rtp(double3 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4(double4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat(double4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rte(double4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rte(double4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtz(double4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtz(double4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtn(double4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtn(double4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_rtp(double4 arg);
double4 __CL_CONST_ATTRIBUTES convert_double4_sat_rtp(double4 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8(double8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat(double8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rte(double8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rte(double8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtz(double8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtz(double8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtn(double8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtn(double8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_rtp(double8 arg);
double8 __CL_CONST_ATTRIBUTES convert_double8_sat_rtp(double8 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16(double16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat(double16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rte(double16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rte(double16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtz(double16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtz(double16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtn(double16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtn(double16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_rtp(double16 arg);
double16 __CL_CONST_ATTRIBUTES convert_double16_sat_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float __CL_CONST_ATTRIBUTES convert_half_to_float(ushort arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES convert_half_to_double(ushort arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rte(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rte(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rtz(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rtz(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rtn(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rtn(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_float_to_half_rtp(float arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort __CL_CONST_ATTRIBUTES convert_double_to_half_rtp(double arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float2 __CL_CONST_ATTRIBUTES convert_half2_to_float2(ushort2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES convert_half2_to_double2(ushort2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rte(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rte(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rtz(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rtz(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rtn(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rtn(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_float2_to_half2_rtp(float2 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort2 __CL_CONST_ATTRIBUTES convert_double2_to_half2_rtp(double2 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float3 __CL_CONST_ATTRIBUTES convert_half3_to_float3(ushort3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES convert_half3_to_double3(ushort3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rte(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rte(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rtz(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rtz(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rtn(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rtn(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_float3_to_half3_rtp(float3 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort3 __CL_CONST_ATTRIBUTES convert_double3_to_half3_rtp(double3 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float4 __CL_CONST_ATTRIBUTES convert_half4_to_float4(ushort4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES convert_half4_to_double4(ushort4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rte(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rte(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rtz(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rtz(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rtn(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rtn(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_float4_to_half4_rtp(float4 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort4 __CL_CONST_ATTRIBUTES convert_double4_to_half4_rtp(double4 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float8 __CL_CONST_ATTRIBUTES convert_half8_to_float8(ushort8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES convert_half8_to_double8(ushort8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rte(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rte(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rtz(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rtz(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rtn(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rtn(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_float8_to_half8_rtp(float8 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort8 __CL_CONST_ATTRIBUTES convert_double8_to_half8_rtp(double8 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
float16 __CL_CONST_ATTRIBUTES convert_half16_to_float16(ushort16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES convert_half16_to_double16(ushort16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rte(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rte(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rtz(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rtz(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rtn(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rtn(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_float16_to_half16_rtp(float16 arg);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
ushort16 __CL_CONST_ATTRIBUTES convert_double16_to_half16_rtp(double16 arg);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifndef __cplusplus
char2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                     const private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                     const private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                     const private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                     const private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                     const constant char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                     const constant char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                     const constant char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                     const constant char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
char16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const constant char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const constant short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const constant short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const constant short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const constant short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
short16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const constant short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                      const private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const constant int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const constant int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const constant int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const constant int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
int16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                      const constant int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                     const private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                     const private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                     const private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                     const private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                     const constant long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                     const constant long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                     const constant long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                     const constant long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
long16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const constant long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const constant uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const constant uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const constant uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const constant uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uchar16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const constant uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                       const private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                       const private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                       const private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                       const private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                         const private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                       const global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                       const global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                       const global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                       const global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                         const global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                       const local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                       const local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                       const local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                       const local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                         const local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                       const constant ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                       const constant ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                       const constant ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                       const constant ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ushort16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                         const constant ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                     const private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                     const private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                     const private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                     const private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                     const constant uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                     const constant uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                     const constant uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                     const constant uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
uint16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const constant uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const local ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const local ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const local ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const local ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const local ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const constant ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const constant ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const constant ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const constant ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
ulong16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const constant ulong* pointer);
#endif  //__cplusplus
#ifdef __CA_BUILTINS_HALF_SUPPORT
#ifndef __cplusplus
half2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                     const private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                     const private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                     const private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                     const private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const local half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const local half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const local half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const local half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const local half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                     const constant half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                     const constant half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                     const constant half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                     const constant half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
half16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                       const constant half* pointer);
#endif  //__cplusplus
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifndef __cplusplus
float2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const local float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const local float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const local float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const local float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const local float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                      const constant float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                      const constant float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                      const constant float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                      const constant float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
float16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                        const constant float* pointer);
#endif  //__cplusplus
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#ifndef __cplusplus
double2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                       const private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                       const private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                       const private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                       const private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                         const private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                       const global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                       const global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                       const global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                       const global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                         const global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                       const local double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                       const local double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                       const local double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                       const local double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                         const local double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset,
                                       const constant double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset,
                                       const constant double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset,
                                       const constant double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset,
                                       const constant double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
double16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset,
                                         const constant double* pointer);
#endif  //__cplusplus
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(char2 payload, size_t offset,
                                     private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(char3 payload, size_t offset,
                                     private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(char4 payload, size_t offset,
                                     private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(char8 payload, size_t offset,
                                     private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(char16 payload, size_t offset,
                                      private char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(char2 payload, size_t offset,
                                     global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(char3 payload, size_t offset,
                                     global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(char4 payload, size_t offset,
                                     global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(char8 payload, size_t offset,
                                     global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(char16 payload, size_t offset,
                                      global char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(char2 payload, size_t offset,
                                     local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(char3 payload, size_t offset,
                                     local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(char4 payload, size_t offset,
                                     local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(char8 payload, size_t offset,
                                     local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(char16 payload, size_t offset,
                                      local char* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(short2 payload, size_t offset,
                                     private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(short3 payload, size_t offset,
                                     private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(short4 payload, size_t offset,
                                     private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(short8 payload, size_t offset,
                                     private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(short16 payload, size_t offset,
                                      private short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(short2 payload, size_t offset,
                                     global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(short3 payload, size_t offset,
                                     global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(short4 payload, size_t offset,
                                     global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(short8 payload, size_t offset,
                                     global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(short16 payload, size_t offset,
                                      global short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(short2 payload, size_t offset,
                                     local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(short3 payload, size_t offset,
                                     local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(short4 payload, size_t offset,
                                     local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(short8 payload, size_t offset,
                                     local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(short16 payload, size_t offset,
                                      local short* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(int2 payload, size_t offset,
                                     private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(int3 payload, size_t offset,
                                     private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(int4 payload, size_t offset,
                                     private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(int8 payload, size_t offset,
                                     private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(int16 payload, size_t offset,
                                      private int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(int2 payload, size_t offset,
                                     global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(int3 payload, size_t offset,
                                     global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(int4 payload, size_t offset,
                                     global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(int8 payload, size_t offset,
                                     global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(int16 payload, size_t offset,
                                      global int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(int2 payload, size_t offset,
                                     local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(int3 payload, size_t offset,
                                     local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(int4 payload, size_t offset,
                                     local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(int8 payload, size_t offset,
                                     local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(int16 payload, size_t offset,
                                      local int* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(long2 payload, size_t offset,
                                     private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(long3 payload, size_t offset,
                                     private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(long4 payload, size_t offset,
                                     private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(long8 payload, size_t offset,
                                     private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(long16 payload, size_t offset,
                                      private long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(long2 payload, size_t offset,
                                     global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(long3 payload, size_t offset,
                                     global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(long4 payload, size_t offset,
                                     global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(long8 payload, size_t offset,
                                     global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(long16 payload, size_t offset,
                                      global long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(long2 payload, size_t offset,
                                     local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(long3 payload, size_t offset,
                                     local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(long4 payload, size_t offset,
                                     local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(long8 payload, size_t offset,
                                     local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(long16 payload, size_t offset,
                                      local long* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(uchar2 payload, size_t offset,
                                     private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(uchar3 payload, size_t offset,
                                     private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(uchar4 payload, size_t offset,
                                     private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(uchar8 payload, size_t offset,
                                     private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(uchar16 payload, size_t offset,
                                      private uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(uchar2 payload, size_t offset,
                                     global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(uchar3 payload, size_t offset,
                                     global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(uchar4 payload, size_t offset,
                                     global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(uchar8 payload, size_t offset,
                                     global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(uchar16 payload, size_t offset,
                                      global uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(uchar2 payload, size_t offset,
                                     local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(uchar3 payload, size_t offset,
                                     local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(uchar4 payload, size_t offset,
                                     local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(uchar8 payload, size_t offset,
                                     local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(uchar16 payload, size_t offset,
                                      local uchar* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(ushort2 payload, size_t offset,
                                     private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(ushort3 payload, size_t offset,
                                     private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(ushort4 payload, size_t offset,
                                     private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(ushort8 payload, size_t offset,
                                     private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(ushort16 payload, size_t offset,
                                      private ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(ushort2 payload, size_t offset,
                                     global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(ushort3 payload, size_t offset,
                                     global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(ushort4 payload, size_t offset,
                                     global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(ushort8 payload, size_t offset,
                                     global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(ushort16 payload, size_t offset,
                                      global ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(ushort2 payload, size_t offset,
                                     local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(ushort3 payload, size_t offset,
                                     local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(ushort4 payload, size_t offset,
                                     local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(ushort8 payload, size_t offset,
                                     local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(ushort16 payload, size_t offset,
                                      local ushort* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(uint2 payload, size_t offset,
                                     private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(uint3 payload, size_t offset,
                                     private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(uint4 payload, size_t offset,
                                     private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(uint8 payload, size_t offset,
                                     private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(uint16 payload, size_t offset,
                                      private uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(uint2 payload, size_t offset,
                                     global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(uint3 payload, size_t offset,
                                     global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(uint4 payload, size_t offset,
                                     global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(uint8 payload, size_t offset,
                                     global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(uint16 payload, size_t offset,
                                      global uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(uint2 payload, size_t offset,
                                     local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(uint3 payload, size_t offset,
                                     local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(uint4 payload, size_t offset,
                                     local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(uint8 payload, size_t offset,
                                     local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(uint16 payload, size_t offset,
                                      local uint* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(ulong2 payload, size_t offset,
                                     private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(ulong3 payload, size_t offset,
                                     private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(ulong4 payload, size_t offset,
                                     private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(ulong8 payload, size_t offset,
                                     private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(ulong16 payload, size_t offset,
                                      private ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(ulong2 payload, size_t offset,
                                     global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(ulong3 payload, size_t offset,
                                     global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(ulong4 payload, size_t offset,
                                     global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(ulong8 payload, size_t offset,
                                     global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(ulong16 payload, size_t offset,
                                      global ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(ulong2 payload, size_t offset,
                                     local ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(ulong3 payload, size_t offset,
                                     local ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(ulong4 payload, size_t offset,
                                     local ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(ulong8 payload, size_t offset,
                                     local ulong* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(ulong16 payload, size_t offset,
                                      local ulong* pointer);
#endif  //__cplusplus
#ifdef __CA_BUILTINS_HALF_SUPPORT
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(half2 payload, size_t offset,
                                     private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(half3 payload, size_t offset,
                                     private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(half4 payload, size_t offset,
                                     private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(half8 payload, size_t offset,
                                     private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(half16 payload, size_t offset,
                                      private half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(half2 payload, size_t offset,
                                     global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(half3 payload, size_t offset,
                                     global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(half4 payload, size_t offset,
                                     global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(half8 payload, size_t offset,
                                     global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(half16 payload, size_t offset,
                                      global half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(half2 payload, size_t offset,
                                     local half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(half3 payload, size_t offset,
                                     local half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(half4 payload, size_t offset,
                                     local half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(half8 payload, size_t offset,
                                     local half* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(half16 payload, size_t offset,
                                      local half* pointer);
#endif  //__cplusplus
#endif  // __CA_BUILTINS_HALF_SUPPORT
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(float2 payload, size_t offset,
                                     private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(float3 payload, size_t offset,
                                     private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(float4 payload, size_t offset,
                                     private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(float8 payload, size_t offset,
                                     private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(float16 payload, size_t offset,
                                      private float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(float2 payload, size_t offset,
                                     global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(float3 payload, size_t offset,
                                     global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(float4 payload, size_t offset,
                                     global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(float8 payload, size_t offset,
                                     global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(float16 payload, size_t offset,
                                      global float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(float2 payload, size_t offset,
                                     local float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(float3 payload, size_t offset,
                                     local float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(float4 payload, size_t offset,
                                     local float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(float8 payload, size_t offset,
                                     local float* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(float16 payload, size_t offset,
                                      local float* pointer);
#endif  //__cplusplus
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(double2 payload, size_t offset,
                                     private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(double3 payload, size_t offset,
                                     private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(double4 payload, size_t offset,
                                     private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(double8 payload, size_t offset,
                                     private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(double16 payload, size_t offset,
                                      private double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(double2 payload, size_t offset,
                                     global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(double3 payload, size_t offset,
                                     global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(double4 payload, size_t offset,
                                     global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(double8 payload, size_t offset,
                                     global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(double16 payload, size_t offset,
                                      global double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(double2 payload, size_t offset,
                                     local double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore3(double3 payload, size_t offset,
                                     local double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore4(double4 payload, size_t offset,
                                     local double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore8(double8 payload, size_t offset,
                                     local double* pointer);
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore16(double16 payload, size_t offset,
                                      local double* pointer);
#endif  //__cplusplus
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifndef __cplusplus
float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset,
                                         const private half* pointer);
float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset,
                                           const private half* pointer);
float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset,
                                           const private half* pointer);
float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset,
                                           const private half* pointer);
float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset,
                                           const private half* pointer);
float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const private half* pointer);
float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset,
                                         const global half* pointer);
float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset,
                                           const global half* pointer);
float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset,
                                           const global half* pointer);
float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset,
                                           const global half* pointer);
float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset,
                                           const global half* pointer);
float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const global half* pointer);
float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset,
                                         const local half* pointer);
float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset,
                                           const local half* pointer);
float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset,
                                           const local half* pointer);
float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset,
                                           const local half* pointer);
float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset,
                                           const local half* pointer);
float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const local half* pointer);
float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset,
                                         const constant half* pointer);
float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset,
                                           const constant half* pointer);
float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset,
                                           const constant half* pointer);
float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset,
                                           const constant half* pointer);
float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset,
                                           const constant half* pointer);
float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const constant half* pointer);
float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset,
                                          const private half* pointer);
float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset,
                                            const private half* pointer);
float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset,
                                            const private half* pointer);
float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset,
                                            const private half* pointer);
float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset,
                                            const private half* pointer);
float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const private half* pointer);
float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset,
                                          const global half* pointer);
float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset,
                                            const global half* pointer);
float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset,
                                            const global half* pointer);
float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset,
                                            const global half* pointer);
float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset,
                                            const global half* pointer);
float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const global half* pointer);
float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset,
                                          const local half* pointer);
float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset,
                                            const local half* pointer);
float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset,
                                            const local half* pointer);
float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset,
                                            const local half* pointer);
float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset,
                                            const local half* pointer);
float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const local half* pointer);
float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset,
                                          const constant half* pointer);
float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset,
                                            const constant half* pointer);
float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset,
                                            const constant half* pointer);
float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset,
                                            const constant half* pointer);
float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset,
                                            const constant half* pointer);
float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const constant half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half(float data, size_t offset,
                                         private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(float data, size_t offset,
                                             private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(float data, size_t offset,
                                             private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(float data, size_t offset,
                                             private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(float data, size_t offset,
                                             private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2(float2 data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(float2 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(float2 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(float2 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(float2 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3(float3 data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(float3 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(float3 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(float3 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(float3 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4(float4 data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(float4 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(float4 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(float4 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(float4 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8(float8 data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(float8 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(float8 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(float8 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(float8 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16(float16 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(float16 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(float16 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(float16 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(float16 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half(float data, size_t offset,
                                         global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(float data, size_t offset,
                                             global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(float data, size_t offset,
                                             global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(float data, size_t offset,
                                             global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(float data, size_t offset,
                                             global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2(float2 data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(float2 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(float2 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(float2 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(float2 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3(float3 data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(float3 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(float3 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(float3 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(float3 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4(float4 data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(float4 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(float4 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(float4 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(float4 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8(float8 data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(float8 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(float8 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(float8 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(float8 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16(float16 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(float16 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(float16 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(float16 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(float16 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half(float data, size_t offset,
                                         local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(float data, size_t offset,
                                             local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(float data, size_t offset,
                                             local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(float data, size_t offset,
                                             local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(float data, size_t offset,
                                             local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2(float2 data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(float2 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(float2 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(float2 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(float2 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3(float3 data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(float3 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(float3 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(float3 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(float3 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4(float4 data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(float4 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(float4 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(float4 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(float4 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8(float8 data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(float8 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(float8 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(float8 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(float8 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16(float16 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(float16 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(float16 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(float16 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(float16 data, size_t offset,
                                               local half* pointer);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstore_half(double data, size_t offset,
                                         private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(double data, size_t offset,
                                             private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(double data, size_t offset,
                                             private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(double data, size_t offset,
                                             private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(double data, size_t offset,
                                             private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2(double2 data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(double2 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(double2 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(double2 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(double2 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3(double3 data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(double3 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(double3 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(double3 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(double3 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4(double4 data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(double4 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(double4 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(double4 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(double4 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8(double8 data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(double8 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(double8 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(double8 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(double8 data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16(double16 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(double16 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(double16 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(double16 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(double16 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half(double data, size_t offset,
                                         global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(double data, size_t offset,
                                             global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(double data, size_t offset,
                                             global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(double data, size_t offset,
                                             global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(double data, size_t offset,
                                             global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2(double2 data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(double2 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(double2 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(double2 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(double2 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3(double3 data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(double3 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(double3 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(double3 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(double3 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4(double4 data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(double4 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(double4 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(double4 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(double4 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8(double8 data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(double8 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(double8 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(double8 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(double8 data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16(double16 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(double16 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(double16 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(double16 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(double16 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half(double data, size_t offset,
                                         local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(double data, size_t offset,
                                             local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(double data, size_t offset,
                                             local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(double data, size_t offset,
                                             local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(double data, size_t offset,
                                             local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2(double2 data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(double2 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(double2 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(double2 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(double2 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3(double3 data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(double3 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(double3 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(double3 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(double3 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4(double4 data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(double4 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(double4 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(double4 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(double4 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8(double8 data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(double8 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(double8 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(double8 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(double8 data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16(double16 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(double16 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(double16 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(double16 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(double16 data, size_t offset,
                                               local half* pointer);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstorea_half(float data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(float data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(float data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(float data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(float data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2(float2 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(float2 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(float2 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(float2 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(float2 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3(float3 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(float3 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(float3 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(float3 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(float3 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4(float4 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(float4 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(float4 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(float4 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(float4 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8(float8 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(float8 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(float8 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(float8 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(float8 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16(float16 data, size_t offset,
                                            private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(float16 data, size_t offset,
                                                private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(float16 data, size_t offset,
                                                private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(float16 data, size_t offset,
                                                private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(float16 data, size_t offset,
                                                private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half(float data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(float data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(float data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(float data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(float data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2(float2 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(float2 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(float2 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(float2 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(float2 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3(float3 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(float3 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(float3 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(float3 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(float3 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4(float4 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(float4 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(float4 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(float4 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(float4 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8(float8 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(float8 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(float8 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(float8 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(float8 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16(float16 data, size_t offset,
                                            global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(float16 data, size_t offset,
                                                global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(float16 data, size_t offset,
                                                global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(float16 data, size_t offset,
                                                global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(float16 data, size_t offset,
                                                global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half(float data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(float data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(float data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(float data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(float data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2(float2 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(float2 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(float2 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(float2 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(float2 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3(float3 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(float3 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(float3 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(float3 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(float3 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4(float4 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(float4 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(float4 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(float4 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(float4 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8(float8 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(float8 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(float8 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(float8 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(float8 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16(float16 data, size_t offset,
                                            local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(float16 data, size_t offset,
                                                local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(float16 data, size_t offset,
                                                local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(float16 data, size_t offset,
                                                local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(float16 data, size_t offset,
                                                local half* pointer);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstorea_half(double data, size_t offset,
                                          private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(double data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(double data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(double data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(double data, size_t offset,
                                              private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2(double2 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(double2 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(double2 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(double2 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(double2 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3(double3 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(double3 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(double3 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(double3 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(double3 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4(double4 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(double4 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(double4 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(double4 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(double4 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8(double8 data, size_t offset,
                                           private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(double8 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(double8 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(double8 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(double8 data, size_t offset,
                                               private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16(double16 data, size_t offset,
                                            private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(double16 data, size_t offset,
                                                private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(double16 data, size_t offset,
                                                private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(double16 data, size_t offset,
                                                private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(double16 data, size_t offset,
                                                private half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half(double data, size_t offset,
                                          global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(double data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(double data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(double data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(double data, size_t offset,
                                              global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2(double2 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(double2 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(double2 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(double2 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(double2 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3(double3 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(double3 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(double3 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(double3 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(double3 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4(double4 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(double4 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(double4 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(double4 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(double4 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8(double8 data, size_t offset,
                                           global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(double8 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(double8 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(double8 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(double8 data, size_t offset,
                                               global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16(double16 data, size_t offset,
                                            global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(double16 data, size_t offset,
                                                global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(double16 data, size_t offset,
                                                global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(double16 data, size_t offset,
                                                global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(double16 data, size_t offset,
                                                global half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half(double data, size_t offset,
                                          local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(double data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(double data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(double data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(double data, size_t offset,
                                              local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2(double2 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(double2 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(double2 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(double2 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(double2 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3(double3 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(double3 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(double3 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(double3 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(double3 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4(double4 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(double4 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(double4 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(double4 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(double4 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8(double8 data, size_t offset,
                                           local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(double8 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(double8 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(double8 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(double8 data, size_t offset,
                                               local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16(double16 data, size_t offset,
                                            local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(double16 data, size_t offset,
                                                local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(double16 data, size_t offset,
                                                local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(double16 data, size_t offset,
                                                local half* pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(double16 data, size_t offset,
                                                local half* pointer);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  //__cplusplus

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

uchar __CL_CONST_ATTRIBUTES abs(char x);
uchar __CL_CONST_ATTRIBUTES abs(uchar x);
uchar __CL_CONST_ATTRIBUTES abs_diff(char x, char y);
uchar __CL_CONST_ATTRIBUTES abs_diff(uchar x, uchar y);
uchar2 __CL_CONST_ATTRIBUTES abs(char2 x);
uchar2 __CL_CONST_ATTRIBUTES abs(uchar2 x);
uchar2 __CL_CONST_ATTRIBUTES abs_diff(char2 x, char2 y);
uchar2 __CL_CONST_ATTRIBUTES abs_diff(uchar2 x, uchar2 y);
uchar3 __CL_CONST_ATTRIBUTES abs(char3 x);
uchar3 __CL_CONST_ATTRIBUTES abs(uchar3 x);
uchar3 __CL_CONST_ATTRIBUTES abs_diff(char3 x, char3 y);
uchar3 __CL_CONST_ATTRIBUTES abs_diff(uchar3 x, uchar3 y);
uchar4 __CL_CONST_ATTRIBUTES abs(char4 x);
uchar4 __CL_CONST_ATTRIBUTES abs(uchar4 x);
uchar4 __CL_CONST_ATTRIBUTES abs_diff(char4 x, char4 y);
uchar4 __CL_CONST_ATTRIBUTES abs_diff(uchar4 x, uchar4 y);
uchar8 __CL_CONST_ATTRIBUTES abs(char8 x);
uchar8 __CL_CONST_ATTRIBUTES abs(uchar8 x);
uchar8 __CL_CONST_ATTRIBUTES abs_diff(char8 x, char8 y);
uchar8 __CL_CONST_ATTRIBUTES abs_diff(uchar8 x, uchar8 y);
uchar16 __CL_CONST_ATTRIBUTES abs(char16 x);
uchar16 __CL_CONST_ATTRIBUTES abs(uchar16 x);
uchar16 __CL_CONST_ATTRIBUTES abs_diff(char16 x, char16 y);
uchar16 __CL_CONST_ATTRIBUTES abs_diff(uchar16 x, uchar16 y);
ushort __CL_CONST_ATTRIBUTES abs(short x);
ushort __CL_CONST_ATTRIBUTES abs(ushort x);
ushort __CL_CONST_ATTRIBUTES abs_diff(short x, short y);
ushort __CL_CONST_ATTRIBUTES abs_diff(ushort x, ushort y);
ushort2 __CL_CONST_ATTRIBUTES abs(short2 x);
ushort2 __CL_CONST_ATTRIBUTES abs(ushort2 x);
ushort2 __CL_CONST_ATTRIBUTES abs_diff(short2 x, short2 y);
ushort2 __CL_CONST_ATTRIBUTES abs_diff(ushort2 x, ushort2 y);
ushort3 __CL_CONST_ATTRIBUTES abs(short3 x);
ushort3 __CL_CONST_ATTRIBUTES abs(ushort3 x);
ushort3 __CL_CONST_ATTRIBUTES abs_diff(short3 x, short3 y);
ushort3 __CL_CONST_ATTRIBUTES abs_diff(ushort3 x, ushort3 y);
ushort4 __CL_CONST_ATTRIBUTES abs(short4 x);
ushort4 __CL_CONST_ATTRIBUTES abs(ushort4 x);
ushort4 __CL_CONST_ATTRIBUTES abs_diff(short4 x, short4 y);
ushort4 __CL_CONST_ATTRIBUTES abs_diff(ushort4 x, ushort4 y);
ushort8 __CL_CONST_ATTRIBUTES abs(short8 x);
ushort8 __CL_CONST_ATTRIBUTES abs(ushort8 x);
ushort8 __CL_CONST_ATTRIBUTES abs_diff(short8 x, short8 y);
ushort8 __CL_CONST_ATTRIBUTES abs_diff(ushort8 x, ushort8 y);
ushort16 __CL_CONST_ATTRIBUTES abs(short16 x);
ushort16 __CL_CONST_ATTRIBUTES abs(ushort16 x);
ushort16 __CL_CONST_ATTRIBUTES abs_diff(short16 x, short16 y);
ushort16 __CL_CONST_ATTRIBUTES abs_diff(ushort16 x, ushort16 y);
uint __CL_CONST_ATTRIBUTES abs(int x);
uint __CL_CONST_ATTRIBUTES abs(uint x);
uint __CL_CONST_ATTRIBUTES abs_diff(int x, int y);
uint __CL_CONST_ATTRIBUTES abs_diff(uint x, uint y);
uint2 __CL_CONST_ATTRIBUTES abs(int2 x);
uint2 __CL_CONST_ATTRIBUTES abs(uint2 x);
uint2 __CL_CONST_ATTRIBUTES abs_diff(int2 x, int2 y);
uint2 __CL_CONST_ATTRIBUTES abs_diff(uint2 x, uint2 y);
uint3 __CL_CONST_ATTRIBUTES abs(int3 x);
uint3 __CL_CONST_ATTRIBUTES abs(uint3 x);
uint3 __CL_CONST_ATTRIBUTES abs_diff(int3 x, int3 y);
uint3 __CL_CONST_ATTRIBUTES abs_diff(uint3 x, uint3 y);
uint4 __CL_CONST_ATTRIBUTES abs(int4 x);
uint4 __CL_CONST_ATTRIBUTES abs(uint4 x);
uint4 __CL_CONST_ATTRIBUTES abs_diff(int4 x, int4 y);
uint4 __CL_CONST_ATTRIBUTES abs_diff(uint4 x, uint4 y);
uint8 __CL_CONST_ATTRIBUTES abs(int8 x);
uint8 __CL_CONST_ATTRIBUTES abs(uint8 x);
uint8 __CL_CONST_ATTRIBUTES abs_diff(int8 x, int8 y);
uint8 __CL_CONST_ATTRIBUTES abs_diff(uint8 x, uint8 y);
uint16 __CL_CONST_ATTRIBUTES abs(int16 x);
uint16 __CL_CONST_ATTRIBUTES abs(uint16 x);
uint16 __CL_CONST_ATTRIBUTES abs_diff(int16 x, int16 y);
uint16 __CL_CONST_ATTRIBUTES abs_diff(uint16 x, uint16 y);
ulong __CL_CONST_ATTRIBUTES abs(long x);
ulong __CL_CONST_ATTRIBUTES abs(ulong x);
ulong __CL_CONST_ATTRIBUTES abs_diff(long x, long y);
ulong __CL_CONST_ATTRIBUTES abs_diff(ulong x, ulong y);
ulong2 __CL_CONST_ATTRIBUTES abs(long2 x);
ulong2 __CL_CONST_ATTRIBUTES abs(ulong2 x);
ulong2 __CL_CONST_ATTRIBUTES abs_diff(long2 x, long2 y);
ulong2 __CL_CONST_ATTRIBUTES abs_diff(ulong2 x, ulong2 y);
ulong3 __CL_CONST_ATTRIBUTES abs(long3 x);
ulong3 __CL_CONST_ATTRIBUTES abs(ulong3 x);
ulong3 __CL_CONST_ATTRIBUTES abs_diff(long3 x, long3 y);
ulong3 __CL_CONST_ATTRIBUTES abs_diff(ulong3 x, ulong3 y);
ulong4 __CL_CONST_ATTRIBUTES abs(long4 x);
ulong4 __CL_CONST_ATTRIBUTES abs(ulong4 x);
ulong4 __CL_CONST_ATTRIBUTES abs_diff(long4 x, long4 y);
ulong4 __CL_CONST_ATTRIBUTES abs_diff(ulong4 x, ulong4 y);
ulong8 __CL_CONST_ATTRIBUTES abs(long8 x);
ulong8 __CL_CONST_ATTRIBUTES abs(ulong8 x);
ulong8 __CL_CONST_ATTRIBUTES abs_diff(long8 x, long8 y);
ulong8 __CL_CONST_ATTRIBUTES abs_diff(ulong8 x, ulong8 y);
ulong16 __CL_CONST_ATTRIBUTES abs(long16 x);
ulong16 __CL_CONST_ATTRIBUTES abs(ulong16 x);
ulong16 __CL_CONST_ATTRIBUTES abs_diff(long16 x, long16 y);
ulong16 __CL_CONST_ATTRIBUTES abs_diff(ulong16 x, ulong16 y);
char2 __CL_CONST_ATTRIBUTES max(char2 x, char y);
char2 __CL_CONST_ATTRIBUTES min(char2 x, char y);
char2 __CL_CONST_ATTRIBUTES clamp(char2 x, char y, char z);
char3 __CL_CONST_ATTRIBUTES max(char3 x, char y);
char3 __CL_CONST_ATTRIBUTES min(char3 x, char y);
char3 __CL_CONST_ATTRIBUTES clamp(char3 x, char y, char z);
char4 __CL_CONST_ATTRIBUTES max(char4 x, char y);
char4 __CL_CONST_ATTRIBUTES min(char4 x, char y);
char4 __CL_CONST_ATTRIBUTES clamp(char4 x, char y, char z);
char8 __CL_CONST_ATTRIBUTES max(char8 x, char y);
char8 __CL_CONST_ATTRIBUTES min(char8 x, char y);
char8 __CL_CONST_ATTRIBUTES clamp(char8 x, char y, char z);
char16 __CL_CONST_ATTRIBUTES max(char16 x, char y);
char16 __CL_CONST_ATTRIBUTES min(char16 x, char y);
char16 __CL_CONST_ATTRIBUTES clamp(char16 x, char y, char z);
short2 __CL_CONST_ATTRIBUTES max(short2 x, short y);
short2 __CL_CONST_ATTRIBUTES min(short2 x, short y);
short2 __CL_CONST_ATTRIBUTES clamp(short2 x, short y, short z);
short3 __CL_CONST_ATTRIBUTES max(short3 x, short y);
short3 __CL_CONST_ATTRIBUTES min(short3 x, short y);
short3 __CL_CONST_ATTRIBUTES clamp(short3 x, short y, short z);
short4 __CL_CONST_ATTRIBUTES max(short4 x, short y);
short4 __CL_CONST_ATTRIBUTES min(short4 x, short y);
short4 __CL_CONST_ATTRIBUTES clamp(short4 x, short y, short z);
short8 __CL_CONST_ATTRIBUTES max(short8 x, short y);
short8 __CL_CONST_ATTRIBUTES min(short8 x, short y);
short8 __CL_CONST_ATTRIBUTES clamp(short8 x, short y, short z);
short16 __CL_CONST_ATTRIBUTES max(short16 x, short y);
short16 __CL_CONST_ATTRIBUTES min(short16 x, short y);
short16 __CL_CONST_ATTRIBUTES clamp(short16 x, short y, short z);
int2 __CL_CONST_ATTRIBUTES max(int2 x, int y);
int2 __CL_CONST_ATTRIBUTES min(int2 x, int y);
int2 __CL_CONST_ATTRIBUTES clamp(int2 x, int y, int z);
int3 __CL_CONST_ATTRIBUTES max(int3 x, int y);
int3 __CL_CONST_ATTRIBUTES min(int3 x, int y);
int3 __CL_CONST_ATTRIBUTES clamp(int3 x, int y, int z);
int4 __CL_CONST_ATTRIBUTES max(int4 x, int y);
int4 __CL_CONST_ATTRIBUTES min(int4 x, int y);
int4 __CL_CONST_ATTRIBUTES clamp(int4 x, int y, int z);
int8 __CL_CONST_ATTRIBUTES max(int8 x, int y);
int8 __CL_CONST_ATTRIBUTES min(int8 x, int y);
int8 __CL_CONST_ATTRIBUTES clamp(int8 x, int y, int z);
int16 __CL_CONST_ATTRIBUTES max(int16 x, int y);
int16 __CL_CONST_ATTRIBUTES min(int16 x, int y);
int16 __CL_CONST_ATTRIBUTES clamp(int16 x, int y, int z);
long2 __CL_CONST_ATTRIBUTES max(long2 x, long y);
long2 __CL_CONST_ATTRIBUTES min(long2 x, long y);
long2 __CL_CONST_ATTRIBUTES clamp(long2 x, long y, long z);
long3 __CL_CONST_ATTRIBUTES max(long3 x, long y);
long3 __CL_CONST_ATTRIBUTES min(long3 x, long y);
long3 __CL_CONST_ATTRIBUTES clamp(long3 x, long y, long z);
long4 __CL_CONST_ATTRIBUTES max(long4 x, long y);
long4 __CL_CONST_ATTRIBUTES min(long4 x, long y);
long4 __CL_CONST_ATTRIBUTES clamp(long4 x, long y, long z);
long8 __CL_CONST_ATTRIBUTES max(long8 x, long y);
long8 __CL_CONST_ATTRIBUTES min(long8 x, long y);
long8 __CL_CONST_ATTRIBUTES clamp(long8 x, long y, long z);
long16 __CL_CONST_ATTRIBUTES max(long16 x, long y);
long16 __CL_CONST_ATTRIBUTES min(long16 x, long y);
long16 __CL_CONST_ATTRIBUTES clamp(long16 x, long y, long z);
uchar2 __CL_CONST_ATTRIBUTES max(uchar2 x, uchar y);
uchar2 __CL_CONST_ATTRIBUTES min(uchar2 x, uchar y);
uchar2 __CL_CONST_ATTRIBUTES clamp(uchar2 x, uchar y, uchar z);
uchar3 __CL_CONST_ATTRIBUTES max(uchar3 x, uchar y);
uchar3 __CL_CONST_ATTRIBUTES min(uchar3 x, uchar y);
uchar3 __CL_CONST_ATTRIBUTES clamp(uchar3 x, uchar y, uchar z);
uchar4 __CL_CONST_ATTRIBUTES max(uchar4 x, uchar y);
uchar4 __CL_CONST_ATTRIBUTES min(uchar4 x, uchar y);
uchar4 __CL_CONST_ATTRIBUTES clamp(uchar4 x, uchar y, uchar z);
uchar8 __CL_CONST_ATTRIBUTES max(uchar8 x, uchar y);
uchar8 __CL_CONST_ATTRIBUTES min(uchar8 x, uchar y);
uchar8 __CL_CONST_ATTRIBUTES clamp(uchar8 x, uchar y, uchar z);
uchar16 __CL_CONST_ATTRIBUTES max(uchar16 x, uchar y);
uchar16 __CL_CONST_ATTRIBUTES min(uchar16 x, uchar y);
uchar16 __CL_CONST_ATTRIBUTES clamp(uchar16 x, uchar y, uchar z);
ushort2 __CL_CONST_ATTRIBUTES max(ushort2 x, ushort y);
ushort2 __CL_CONST_ATTRIBUTES min(ushort2 x, ushort y);
ushort2 __CL_CONST_ATTRIBUTES clamp(ushort2 x, ushort y, ushort z);
ushort3 __CL_CONST_ATTRIBUTES max(ushort3 x, ushort y);
ushort3 __CL_CONST_ATTRIBUTES min(ushort3 x, ushort y);
ushort3 __CL_CONST_ATTRIBUTES clamp(ushort3 x, ushort y, ushort z);
ushort4 __CL_CONST_ATTRIBUTES max(ushort4 x, ushort y);
ushort4 __CL_CONST_ATTRIBUTES min(ushort4 x, ushort y);
ushort4 __CL_CONST_ATTRIBUTES clamp(ushort4 x, ushort y, ushort z);
ushort8 __CL_CONST_ATTRIBUTES max(ushort8 x, ushort y);
ushort8 __CL_CONST_ATTRIBUTES min(ushort8 x, ushort y);
ushort8 __CL_CONST_ATTRIBUTES clamp(ushort8 x, ushort y, ushort z);
ushort16 __CL_CONST_ATTRIBUTES max(ushort16 x, ushort y);
ushort16 __CL_CONST_ATTRIBUTES min(ushort16 x, ushort y);
ushort16 __CL_CONST_ATTRIBUTES clamp(ushort16 x, ushort y, ushort z);
uint2 __CL_CONST_ATTRIBUTES max(uint2 x, uint y);
uint2 __CL_CONST_ATTRIBUTES min(uint2 x, uint y);
uint2 __CL_CONST_ATTRIBUTES clamp(uint2 x, uint y, uint z);
uint3 __CL_CONST_ATTRIBUTES max(uint3 x, uint y);
uint3 __CL_CONST_ATTRIBUTES min(uint3 x, uint y);
uint3 __CL_CONST_ATTRIBUTES clamp(uint3 x, uint y, uint z);
uint4 __CL_CONST_ATTRIBUTES max(uint4 x, uint y);
uint4 __CL_CONST_ATTRIBUTES min(uint4 x, uint y);
uint4 __CL_CONST_ATTRIBUTES clamp(uint4 x, uint y, uint z);
uint8 __CL_CONST_ATTRIBUTES max(uint8 x, uint y);
uint8 __CL_CONST_ATTRIBUTES min(uint8 x, uint y);
uint8 __CL_CONST_ATTRIBUTES clamp(uint8 x, uint y, uint z);
uint16 __CL_CONST_ATTRIBUTES max(uint16 x, uint y);
uint16 __CL_CONST_ATTRIBUTES min(uint16 x, uint y);
uint16 __CL_CONST_ATTRIBUTES clamp(uint16 x, uint y, uint z);
ulong2 __CL_CONST_ATTRIBUTES max(ulong2 x, ulong y);
ulong2 __CL_CONST_ATTRIBUTES min(ulong2 x, ulong y);
ulong2 __CL_CONST_ATTRIBUTES clamp(ulong2 x, ulong y, ulong z);
ulong3 __CL_CONST_ATTRIBUTES max(ulong3 x, ulong y);
ulong3 __CL_CONST_ATTRIBUTES min(ulong3 x, ulong y);
ulong3 __CL_CONST_ATTRIBUTES clamp(ulong3 x, ulong y, ulong z);
ulong4 __CL_CONST_ATTRIBUTES max(ulong4 x, ulong y);
ulong4 __CL_CONST_ATTRIBUTES min(ulong4 x, ulong y);
ulong4 __CL_CONST_ATTRIBUTES clamp(ulong4 x, ulong y, ulong z);
ulong8 __CL_CONST_ATTRIBUTES max(ulong8 x, ulong y);
ulong8 __CL_CONST_ATTRIBUTES min(ulong8 x, ulong y);
ulong8 __CL_CONST_ATTRIBUTES clamp(ulong8 x, ulong y, ulong z);
ulong16 __CL_CONST_ATTRIBUTES max(ulong16 x, ulong y);
ulong16 __CL_CONST_ATTRIBUTES min(ulong16 x, ulong y);
ulong16 __CL_CONST_ATTRIBUTES clamp(ulong16 x, ulong y, ulong z);
char __CL_CONST_ATTRIBUTES clz(char x);
char __CL_CONST_ATTRIBUTES popcount(char x);
char2 __CL_CONST_ATTRIBUTES clz(char2 x);
char2 __CL_CONST_ATTRIBUTES popcount(char2 x);
char3 __CL_CONST_ATTRIBUTES clz(char3 x);
char3 __CL_CONST_ATTRIBUTES popcount(char3 x);
char4 __CL_CONST_ATTRIBUTES clz(char4 x);
char4 __CL_CONST_ATTRIBUTES popcount(char4 x);
char8 __CL_CONST_ATTRIBUTES clz(char8 x);
char8 __CL_CONST_ATTRIBUTES popcount(char8 x);
char16 __CL_CONST_ATTRIBUTES clz(char16 x);
char16 __CL_CONST_ATTRIBUTES popcount(char16 x);
short __CL_CONST_ATTRIBUTES clz(short x);
short __CL_CONST_ATTRIBUTES popcount(short x);
short2 __CL_CONST_ATTRIBUTES clz(short2 x);
short2 __CL_CONST_ATTRIBUTES popcount(short2 x);
short3 __CL_CONST_ATTRIBUTES clz(short3 x);
short3 __CL_CONST_ATTRIBUTES popcount(short3 x);
short4 __CL_CONST_ATTRIBUTES clz(short4 x);
short4 __CL_CONST_ATTRIBUTES popcount(short4 x);
short8 __CL_CONST_ATTRIBUTES clz(short8 x);
short8 __CL_CONST_ATTRIBUTES popcount(short8 x);
short16 __CL_CONST_ATTRIBUTES clz(short16 x);
short16 __CL_CONST_ATTRIBUTES popcount(short16 x);
int __CL_CONST_ATTRIBUTES clz(int x);
int __CL_CONST_ATTRIBUTES popcount(int x);
int2 __CL_CONST_ATTRIBUTES clz(int2 x);
int2 __CL_CONST_ATTRIBUTES popcount(int2 x);
int3 __CL_CONST_ATTRIBUTES clz(int3 x);
int3 __CL_CONST_ATTRIBUTES popcount(int3 x);
int4 __CL_CONST_ATTRIBUTES clz(int4 x);
int4 __CL_CONST_ATTRIBUTES popcount(int4 x);
int8 __CL_CONST_ATTRIBUTES clz(int8 x);
int8 __CL_CONST_ATTRIBUTES popcount(int8 x);
int16 __CL_CONST_ATTRIBUTES clz(int16 x);
int16 __CL_CONST_ATTRIBUTES popcount(int16 x);
long __CL_CONST_ATTRIBUTES clz(long x);
long __CL_CONST_ATTRIBUTES popcount(long x);
long2 __CL_CONST_ATTRIBUTES clz(long2 x);
long2 __CL_CONST_ATTRIBUTES popcount(long2 x);
long3 __CL_CONST_ATTRIBUTES clz(long3 x);
long3 __CL_CONST_ATTRIBUTES popcount(long3 x);
long4 __CL_CONST_ATTRIBUTES clz(long4 x);
long4 __CL_CONST_ATTRIBUTES popcount(long4 x);
long8 __CL_CONST_ATTRIBUTES clz(long8 x);
long8 __CL_CONST_ATTRIBUTES popcount(long8 x);
long16 __CL_CONST_ATTRIBUTES clz(long16 x);
long16 __CL_CONST_ATTRIBUTES popcount(long16 x);
uchar __CL_CONST_ATTRIBUTES clz(uchar x);
uchar __CL_CONST_ATTRIBUTES popcount(uchar x);
uchar2 __CL_CONST_ATTRIBUTES clz(uchar2 x);
uchar2 __CL_CONST_ATTRIBUTES popcount(uchar2 x);
uchar3 __CL_CONST_ATTRIBUTES clz(uchar3 x);
uchar3 __CL_CONST_ATTRIBUTES popcount(uchar3 x);
uchar4 __CL_CONST_ATTRIBUTES clz(uchar4 x);
uchar4 __CL_CONST_ATTRIBUTES popcount(uchar4 x);
uchar8 __CL_CONST_ATTRIBUTES clz(uchar8 x);
uchar8 __CL_CONST_ATTRIBUTES popcount(uchar8 x);
uchar16 __CL_CONST_ATTRIBUTES clz(uchar16 x);
uchar16 __CL_CONST_ATTRIBUTES popcount(uchar16 x);
ushort __CL_CONST_ATTRIBUTES clz(ushort x);
ushort __CL_CONST_ATTRIBUTES popcount(ushort x);
ushort2 __CL_CONST_ATTRIBUTES clz(ushort2 x);
ushort2 __CL_CONST_ATTRIBUTES popcount(ushort2 x);
ushort3 __CL_CONST_ATTRIBUTES clz(ushort3 x);
ushort3 __CL_CONST_ATTRIBUTES popcount(ushort3 x);
ushort4 __CL_CONST_ATTRIBUTES clz(ushort4 x);
ushort4 __CL_CONST_ATTRIBUTES popcount(ushort4 x);
ushort8 __CL_CONST_ATTRIBUTES clz(ushort8 x);
ushort8 __CL_CONST_ATTRIBUTES popcount(ushort8 x);
ushort16 __CL_CONST_ATTRIBUTES clz(ushort16 x);
ushort16 __CL_CONST_ATTRIBUTES popcount(ushort16 x);
uint __CL_CONST_ATTRIBUTES clz(uint x);
uint __CL_CONST_ATTRIBUTES popcount(uint x);
uint2 __CL_CONST_ATTRIBUTES clz(uint2 x);
uint2 __CL_CONST_ATTRIBUTES popcount(uint2 x);
uint3 __CL_CONST_ATTRIBUTES clz(uint3 x);
uint3 __CL_CONST_ATTRIBUTES popcount(uint3 x);
uint4 __CL_CONST_ATTRIBUTES clz(uint4 x);
uint4 __CL_CONST_ATTRIBUTES popcount(uint4 x);
uint8 __CL_CONST_ATTRIBUTES clz(uint8 x);
uint8 __CL_CONST_ATTRIBUTES popcount(uint8 x);
uint16 __CL_CONST_ATTRIBUTES clz(uint16 x);
uint16 __CL_CONST_ATTRIBUTES popcount(uint16 x);
ulong __CL_CONST_ATTRIBUTES clz(ulong x);
ulong __CL_CONST_ATTRIBUTES popcount(ulong x);
ulong2 __CL_CONST_ATTRIBUTES clz(ulong2 x);
ulong2 __CL_CONST_ATTRIBUTES popcount(ulong2 x);
ulong3 __CL_CONST_ATTRIBUTES clz(ulong3 x);
ulong3 __CL_CONST_ATTRIBUTES popcount(ulong3 x);
ulong4 __CL_CONST_ATTRIBUTES clz(ulong4 x);
ulong4 __CL_CONST_ATTRIBUTES popcount(ulong4 x);
ulong8 __CL_CONST_ATTRIBUTES clz(ulong8 x);
ulong8 __CL_CONST_ATTRIBUTES popcount(ulong8 x);
ulong16 __CL_CONST_ATTRIBUTES clz(ulong16 x);
ulong16 __CL_CONST_ATTRIBUTES popcount(ulong16 x);
char __CL_CONST_ATTRIBUTES add_sat(char x, char y);
char __CL_CONST_ATTRIBUTES hadd(char x, char y);
char __CL_CONST_ATTRIBUTES rhadd(char x, char y);
char __CL_CONST_ATTRIBUTES mul_hi(char x, char y);
char __CL_CONST_ATTRIBUTES rotate(char x, char y);
char __CL_CONST_ATTRIBUTES sub_sat(char x, char y);
char __CL_CONST_ATTRIBUTES max(char x, char y);
char __CL_CONST_ATTRIBUTES min(char x, char y);
char2 __CL_CONST_ATTRIBUTES add_sat(char2 x, char2 y);
char2 __CL_CONST_ATTRIBUTES hadd(char2 x, char2 y);
char2 __CL_CONST_ATTRIBUTES rhadd(char2 x, char2 y);
char2 __CL_CONST_ATTRIBUTES mul_hi(char2 x, char2 y);
char2 __CL_CONST_ATTRIBUTES rotate(char2 x, char2 y);
char2 __CL_CONST_ATTRIBUTES sub_sat(char2 x, char2 y);
char2 __CL_CONST_ATTRIBUTES max(char2 x, char2 y);
char2 __CL_CONST_ATTRIBUTES min(char2 x, char2 y);
char3 __CL_CONST_ATTRIBUTES add_sat(char3 x, char3 y);
char3 __CL_CONST_ATTRIBUTES hadd(char3 x, char3 y);
char3 __CL_CONST_ATTRIBUTES rhadd(char3 x, char3 y);
char3 __CL_CONST_ATTRIBUTES mul_hi(char3 x, char3 y);
char3 __CL_CONST_ATTRIBUTES rotate(char3 x, char3 y);
char3 __CL_CONST_ATTRIBUTES sub_sat(char3 x, char3 y);
char3 __CL_CONST_ATTRIBUTES max(char3 x, char3 y);
char3 __CL_CONST_ATTRIBUTES min(char3 x, char3 y);
char4 __CL_CONST_ATTRIBUTES add_sat(char4 x, char4 y);
char4 __CL_CONST_ATTRIBUTES hadd(char4 x, char4 y);
char4 __CL_CONST_ATTRIBUTES rhadd(char4 x, char4 y);
char4 __CL_CONST_ATTRIBUTES mul_hi(char4 x, char4 y);
char4 __CL_CONST_ATTRIBUTES rotate(char4 x, char4 y);
char4 __CL_CONST_ATTRIBUTES sub_sat(char4 x, char4 y);
char4 __CL_CONST_ATTRIBUTES max(char4 x, char4 y);
char4 __CL_CONST_ATTRIBUTES min(char4 x, char4 y);
char8 __CL_CONST_ATTRIBUTES add_sat(char8 x, char8 y);
char8 __CL_CONST_ATTRIBUTES hadd(char8 x, char8 y);
char8 __CL_CONST_ATTRIBUTES rhadd(char8 x, char8 y);
char8 __CL_CONST_ATTRIBUTES mul_hi(char8 x, char8 y);
char8 __CL_CONST_ATTRIBUTES rotate(char8 x, char8 y);
char8 __CL_CONST_ATTRIBUTES sub_sat(char8 x, char8 y);
char8 __CL_CONST_ATTRIBUTES max(char8 x, char8 y);
char8 __CL_CONST_ATTRIBUTES min(char8 x, char8 y);
char16 __CL_CONST_ATTRIBUTES add_sat(char16 x, char16 y);
char16 __CL_CONST_ATTRIBUTES hadd(char16 x, char16 y);
char16 __CL_CONST_ATTRIBUTES rhadd(char16 x, char16 y);
char16 __CL_CONST_ATTRIBUTES mul_hi(char16 x, char16 y);
char16 __CL_CONST_ATTRIBUTES rotate(char16 x, char16 y);
char16 __CL_CONST_ATTRIBUTES sub_sat(char16 x, char16 y);
char16 __CL_CONST_ATTRIBUTES max(char16 x, char16 y);
char16 __CL_CONST_ATTRIBUTES min(char16 x, char16 y);
short __CL_CONST_ATTRIBUTES add_sat(short x, short y);
short __CL_CONST_ATTRIBUTES hadd(short x, short y);
short __CL_CONST_ATTRIBUTES rhadd(short x, short y);
short __CL_CONST_ATTRIBUTES mul_hi(short x, short y);
short __CL_CONST_ATTRIBUTES rotate(short x, short y);
short __CL_CONST_ATTRIBUTES sub_sat(short x, short y);
short __CL_CONST_ATTRIBUTES max(short x, short y);
short __CL_CONST_ATTRIBUTES min(short x, short y);
short2 __CL_CONST_ATTRIBUTES add_sat(short2 x, short2 y);
short2 __CL_CONST_ATTRIBUTES hadd(short2 x, short2 y);
short2 __CL_CONST_ATTRIBUTES rhadd(short2 x, short2 y);
short2 __CL_CONST_ATTRIBUTES mul_hi(short2 x, short2 y);
short2 __CL_CONST_ATTRIBUTES rotate(short2 x, short2 y);
short2 __CL_CONST_ATTRIBUTES sub_sat(short2 x, short2 y);
short2 __CL_CONST_ATTRIBUTES max(short2 x, short2 y);
short2 __CL_CONST_ATTRIBUTES min(short2 x, short2 y);
short3 __CL_CONST_ATTRIBUTES add_sat(short3 x, short3 y);
short3 __CL_CONST_ATTRIBUTES hadd(short3 x, short3 y);
short3 __CL_CONST_ATTRIBUTES rhadd(short3 x, short3 y);
short3 __CL_CONST_ATTRIBUTES mul_hi(short3 x, short3 y);
short3 __CL_CONST_ATTRIBUTES rotate(short3 x, short3 y);
short3 __CL_CONST_ATTRIBUTES sub_sat(short3 x, short3 y);
short3 __CL_CONST_ATTRIBUTES max(short3 x, short3 y);
short3 __CL_CONST_ATTRIBUTES min(short3 x, short3 y);
short4 __CL_CONST_ATTRIBUTES add_sat(short4 x, short4 y);
short4 __CL_CONST_ATTRIBUTES hadd(short4 x, short4 y);
short4 __CL_CONST_ATTRIBUTES rhadd(short4 x, short4 y);
short4 __CL_CONST_ATTRIBUTES mul_hi(short4 x, short4 y);
short4 __CL_CONST_ATTRIBUTES rotate(short4 x, short4 y);
short4 __CL_CONST_ATTRIBUTES sub_sat(short4 x, short4 y);
short4 __CL_CONST_ATTRIBUTES max(short4 x, short4 y);
short4 __CL_CONST_ATTRIBUTES min(short4 x, short4 y);
short8 __CL_CONST_ATTRIBUTES add_sat(short8 x, short8 y);
short8 __CL_CONST_ATTRIBUTES hadd(short8 x, short8 y);
short8 __CL_CONST_ATTRIBUTES rhadd(short8 x, short8 y);
short8 __CL_CONST_ATTRIBUTES mul_hi(short8 x, short8 y);
short8 __CL_CONST_ATTRIBUTES rotate(short8 x, short8 y);
short8 __CL_CONST_ATTRIBUTES sub_sat(short8 x, short8 y);
short8 __CL_CONST_ATTRIBUTES max(short8 x, short8 y);
short8 __CL_CONST_ATTRIBUTES min(short8 x, short8 y);
short16 __CL_CONST_ATTRIBUTES add_sat(short16 x, short16 y);
short16 __CL_CONST_ATTRIBUTES hadd(short16 x, short16 y);
short16 __CL_CONST_ATTRIBUTES rhadd(short16 x, short16 y);
short16 __CL_CONST_ATTRIBUTES mul_hi(short16 x, short16 y);
short16 __CL_CONST_ATTRIBUTES rotate(short16 x, short16 y);
short16 __CL_CONST_ATTRIBUTES sub_sat(short16 x, short16 y);
short16 __CL_CONST_ATTRIBUTES max(short16 x, short16 y);
short16 __CL_CONST_ATTRIBUTES min(short16 x, short16 y);
int __CL_CONST_ATTRIBUTES add_sat(int x, int y);
int __CL_CONST_ATTRIBUTES hadd(int x, int y);
int __CL_CONST_ATTRIBUTES rhadd(int x, int y);
int __CL_CONST_ATTRIBUTES mul_hi(int x, int y);
int __CL_CONST_ATTRIBUTES rotate(int x, int y);
int __CL_CONST_ATTRIBUTES sub_sat(int x, int y);
int __CL_CONST_ATTRIBUTES max(int x, int y);
int __CL_CONST_ATTRIBUTES min(int x, int y);
int2 __CL_CONST_ATTRIBUTES add_sat(int2 x, int2 y);
int2 __CL_CONST_ATTRIBUTES hadd(int2 x, int2 y);
int2 __CL_CONST_ATTRIBUTES rhadd(int2 x, int2 y);
int2 __CL_CONST_ATTRIBUTES mul_hi(int2 x, int2 y);
int2 __CL_CONST_ATTRIBUTES rotate(int2 x, int2 y);
int2 __CL_CONST_ATTRIBUTES sub_sat(int2 x, int2 y);
int2 __CL_CONST_ATTRIBUTES max(int2 x, int2 y);
int2 __CL_CONST_ATTRIBUTES min(int2 x, int2 y);
int3 __CL_CONST_ATTRIBUTES add_sat(int3 x, int3 y);
int3 __CL_CONST_ATTRIBUTES hadd(int3 x, int3 y);
int3 __CL_CONST_ATTRIBUTES rhadd(int3 x, int3 y);
int3 __CL_CONST_ATTRIBUTES mul_hi(int3 x, int3 y);
int3 __CL_CONST_ATTRIBUTES rotate(int3 x, int3 y);
int3 __CL_CONST_ATTRIBUTES sub_sat(int3 x, int3 y);
int3 __CL_CONST_ATTRIBUTES max(int3 x, int3 y);
int3 __CL_CONST_ATTRIBUTES min(int3 x, int3 y);
int4 __CL_CONST_ATTRIBUTES add_sat(int4 x, int4 y);
int4 __CL_CONST_ATTRIBUTES hadd(int4 x, int4 y);
int4 __CL_CONST_ATTRIBUTES rhadd(int4 x, int4 y);
int4 __CL_CONST_ATTRIBUTES mul_hi(int4 x, int4 y);
int4 __CL_CONST_ATTRIBUTES rotate(int4 x, int4 y);
int4 __CL_CONST_ATTRIBUTES sub_sat(int4 x, int4 y);
int4 __CL_CONST_ATTRIBUTES max(int4 x, int4 y);
int4 __CL_CONST_ATTRIBUTES min(int4 x, int4 y);
int8 __CL_CONST_ATTRIBUTES add_sat(int8 x, int8 y);
int8 __CL_CONST_ATTRIBUTES hadd(int8 x, int8 y);
int8 __CL_CONST_ATTRIBUTES rhadd(int8 x, int8 y);
int8 __CL_CONST_ATTRIBUTES mul_hi(int8 x, int8 y);
int8 __CL_CONST_ATTRIBUTES rotate(int8 x, int8 y);
int8 __CL_CONST_ATTRIBUTES sub_sat(int8 x, int8 y);
int8 __CL_CONST_ATTRIBUTES max(int8 x, int8 y);
int8 __CL_CONST_ATTRIBUTES min(int8 x, int8 y);
int16 __CL_CONST_ATTRIBUTES add_sat(int16 x, int16 y);
int16 __CL_CONST_ATTRIBUTES hadd(int16 x, int16 y);
int16 __CL_CONST_ATTRIBUTES rhadd(int16 x, int16 y);
int16 __CL_CONST_ATTRIBUTES mul_hi(int16 x, int16 y);
int16 __CL_CONST_ATTRIBUTES rotate(int16 x, int16 y);
int16 __CL_CONST_ATTRIBUTES sub_sat(int16 x, int16 y);
int16 __CL_CONST_ATTRIBUTES max(int16 x, int16 y);
int16 __CL_CONST_ATTRIBUTES min(int16 x, int16 y);
long __CL_CONST_ATTRIBUTES add_sat(long x, long y);
long __CL_CONST_ATTRIBUTES hadd(long x, long y);
long __CL_CONST_ATTRIBUTES rhadd(long x, long y);
long __CL_CONST_ATTRIBUTES mul_hi(long x, long y);
long __CL_CONST_ATTRIBUTES rotate(long x, long y);
long __CL_CONST_ATTRIBUTES sub_sat(long x, long y);
long __CL_CONST_ATTRIBUTES max(long x, long y);
long __CL_CONST_ATTRIBUTES min(long x, long y);
long2 __CL_CONST_ATTRIBUTES add_sat(long2 x, long2 y);
long2 __CL_CONST_ATTRIBUTES hadd(long2 x, long2 y);
long2 __CL_CONST_ATTRIBUTES rhadd(long2 x, long2 y);
long2 __CL_CONST_ATTRIBUTES mul_hi(long2 x, long2 y);
long2 __CL_CONST_ATTRIBUTES rotate(long2 x, long2 y);
long2 __CL_CONST_ATTRIBUTES sub_sat(long2 x, long2 y);
long2 __CL_CONST_ATTRIBUTES max(long2 x, long2 y);
long2 __CL_CONST_ATTRIBUTES min(long2 x, long2 y);
long3 __CL_CONST_ATTRIBUTES add_sat(long3 x, long3 y);
long3 __CL_CONST_ATTRIBUTES hadd(long3 x, long3 y);
long3 __CL_CONST_ATTRIBUTES rhadd(long3 x, long3 y);
long3 __CL_CONST_ATTRIBUTES mul_hi(long3 x, long3 y);
long3 __CL_CONST_ATTRIBUTES rotate(long3 x, long3 y);
long3 __CL_CONST_ATTRIBUTES sub_sat(long3 x, long3 y);
long3 __CL_CONST_ATTRIBUTES max(long3 x, long3 y);
long3 __CL_CONST_ATTRIBUTES min(long3 x, long3 y);
long4 __CL_CONST_ATTRIBUTES add_sat(long4 x, long4 y);
long4 __CL_CONST_ATTRIBUTES hadd(long4 x, long4 y);
long4 __CL_CONST_ATTRIBUTES rhadd(long4 x, long4 y);
long4 __CL_CONST_ATTRIBUTES mul_hi(long4 x, long4 y);
long4 __CL_CONST_ATTRIBUTES rotate(long4 x, long4 y);
long4 __CL_CONST_ATTRIBUTES sub_sat(long4 x, long4 y);
long4 __CL_CONST_ATTRIBUTES max(long4 x, long4 y);
long4 __CL_CONST_ATTRIBUTES min(long4 x, long4 y);
long8 __CL_CONST_ATTRIBUTES add_sat(long8 x, long8 y);
long8 __CL_CONST_ATTRIBUTES hadd(long8 x, long8 y);
long8 __CL_CONST_ATTRIBUTES rhadd(long8 x, long8 y);
long8 __CL_CONST_ATTRIBUTES mul_hi(long8 x, long8 y);
long8 __CL_CONST_ATTRIBUTES rotate(long8 x, long8 y);
long8 __CL_CONST_ATTRIBUTES sub_sat(long8 x, long8 y);
long8 __CL_CONST_ATTRIBUTES max(long8 x, long8 y);
long8 __CL_CONST_ATTRIBUTES min(long8 x, long8 y);
long16 __CL_CONST_ATTRIBUTES add_sat(long16 x, long16 y);
long16 __CL_CONST_ATTRIBUTES hadd(long16 x, long16 y);
long16 __CL_CONST_ATTRIBUTES rhadd(long16 x, long16 y);
long16 __CL_CONST_ATTRIBUTES mul_hi(long16 x, long16 y);
long16 __CL_CONST_ATTRIBUTES rotate(long16 x, long16 y);
long16 __CL_CONST_ATTRIBUTES sub_sat(long16 x, long16 y);
long16 __CL_CONST_ATTRIBUTES max(long16 x, long16 y);
long16 __CL_CONST_ATTRIBUTES min(long16 x, long16 y);
uchar __CL_CONST_ATTRIBUTES add_sat(uchar x, uchar y);
uchar __CL_CONST_ATTRIBUTES hadd(uchar x, uchar y);
uchar __CL_CONST_ATTRIBUTES rhadd(uchar x, uchar y);
uchar __CL_CONST_ATTRIBUTES mul_hi(uchar x, uchar y);
uchar __CL_CONST_ATTRIBUTES rotate(uchar x, uchar y);
uchar __CL_CONST_ATTRIBUTES sub_sat(uchar x, uchar y);
uchar __CL_CONST_ATTRIBUTES max(uchar x, uchar y);
uchar __CL_CONST_ATTRIBUTES min(uchar x, uchar y);
uchar2 __CL_CONST_ATTRIBUTES add_sat(uchar2 x, uchar2 y);
uchar2 __CL_CONST_ATTRIBUTES hadd(uchar2 x, uchar2 y);
uchar2 __CL_CONST_ATTRIBUTES rhadd(uchar2 x, uchar2 y);
uchar2 __CL_CONST_ATTRIBUTES mul_hi(uchar2 x, uchar2 y);
uchar2 __CL_CONST_ATTRIBUTES rotate(uchar2 x, uchar2 y);
uchar2 __CL_CONST_ATTRIBUTES sub_sat(uchar2 x, uchar2 y);
uchar2 __CL_CONST_ATTRIBUTES max(uchar2 x, uchar2 y);
uchar2 __CL_CONST_ATTRIBUTES min(uchar2 x, uchar2 y);
uchar3 __CL_CONST_ATTRIBUTES add_sat(uchar3 x, uchar3 y);
uchar3 __CL_CONST_ATTRIBUTES hadd(uchar3 x, uchar3 y);
uchar3 __CL_CONST_ATTRIBUTES rhadd(uchar3 x, uchar3 y);
uchar3 __CL_CONST_ATTRIBUTES mul_hi(uchar3 x, uchar3 y);
uchar3 __CL_CONST_ATTRIBUTES rotate(uchar3 x, uchar3 y);
uchar3 __CL_CONST_ATTRIBUTES sub_sat(uchar3 x, uchar3 y);
uchar3 __CL_CONST_ATTRIBUTES max(uchar3 x, uchar3 y);
uchar3 __CL_CONST_ATTRIBUTES min(uchar3 x, uchar3 y);
uchar4 __CL_CONST_ATTRIBUTES add_sat(uchar4 x, uchar4 y);
uchar4 __CL_CONST_ATTRIBUTES hadd(uchar4 x, uchar4 y);
uchar4 __CL_CONST_ATTRIBUTES rhadd(uchar4 x, uchar4 y);
uchar4 __CL_CONST_ATTRIBUTES mul_hi(uchar4 x, uchar4 y);
uchar4 __CL_CONST_ATTRIBUTES rotate(uchar4 x, uchar4 y);
uchar4 __CL_CONST_ATTRIBUTES sub_sat(uchar4 x, uchar4 y);
uchar4 __CL_CONST_ATTRIBUTES max(uchar4 x, uchar4 y);
uchar4 __CL_CONST_ATTRIBUTES min(uchar4 x, uchar4 y);
uchar8 __CL_CONST_ATTRIBUTES add_sat(uchar8 x, uchar8 y);
uchar8 __CL_CONST_ATTRIBUTES hadd(uchar8 x, uchar8 y);
uchar8 __CL_CONST_ATTRIBUTES rhadd(uchar8 x, uchar8 y);
uchar8 __CL_CONST_ATTRIBUTES mul_hi(uchar8 x, uchar8 y);
uchar8 __CL_CONST_ATTRIBUTES rotate(uchar8 x, uchar8 y);
uchar8 __CL_CONST_ATTRIBUTES sub_sat(uchar8 x, uchar8 y);
uchar8 __CL_CONST_ATTRIBUTES max(uchar8 x, uchar8 y);
uchar8 __CL_CONST_ATTRIBUTES min(uchar8 x, uchar8 y);
uchar16 __CL_CONST_ATTRIBUTES add_sat(uchar16 x, uchar16 y);
uchar16 __CL_CONST_ATTRIBUTES hadd(uchar16 x, uchar16 y);
uchar16 __CL_CONST_ATTRIBUTES rhadd(uchar16 x, uchar16 y);
uchar16 __CL_CONST_ATTRIBUTES mul_hi(uchar16 x, uchar16 y);
uchar16 __CL_CONST_ATTRIBUTES rotate(uchar16 x, uchar16 y);
uchar16 __CL_CONST_ATTRIBUTES sub_sat(uchar16 x, uchar16 y);
uchar16 __CL_CONST_ATTRIBUTES max(uchar16 x, uchar16 y);
uchar16 __CL_CONST_ATTRIBUTES min(uchar16 x, uchar16 y);
ushort __CL_CONST_ATTRIBUTES add_sat(ushort x, ushort y);
ushort __CL_CONST_ATTRIBUTES hadd(ushort x, ushort y);
ushort __CL_CONST_ATTRIBUTES rhadd(ushort x, ushort y);
ushort __CL_CONST_ATTRIBUTES mul_hi(ushort x, ushort y);
ushort __CL_CONST_ATTRIBUTES rotate(ushort x, ushort y);
ushort __CL_CONST_ATTRIBUTES sub_sat(ushort x, ushort y);
ushort __CL_CONST_ATTRIBUTES max(ushort x, ushort y);
ushort __CL_CONST_ATTRIBUTES min(ushort x, ushort y);
ushort2 __CL_CONST_ATTRIBUTES add_sat(ushort2 x, ushort2 y);
ushort2 __CL_CONST_ATTRIBUTES hadd(ushort2 x, ushort2 y);
ushort2 __CL_CONST_ATTRIBUTES rhadd(ushort2 x, ushort2 y);
ushort2 __CL_CONST_ATTRIBUTES mul_hi(ushort2 x, ushort2 y);
ushort2 __CL_CONST_ATTRIBUTES rotate(ushort2 x, ushort2 y);
ushort2 __CL_CONST_ATTRIBUTES sub_sat(ushort2 x, ushort2 y);
ushort2 __CL_CONST_ATTRIBUTES max(ushort2 x, ushort2 y);
ushort2 __CL_CONST_ATTRIBUTES min(ushort2 x, ushort2 y);
ushort3 __CL_CONST_ATTRIBUTES add_sat(ushort3 x, ushort3 y);
ushort3 __CL_CONST_ATTRIBUTES hadd(ushort3 x, ushort3 y);
ushort3 __CL_CONST_ATTRIBUTES rhadd(ushort3 x, ushort3 y);
ushort3 __CL_CONST_ATTRIBUTES mul_hi(ushort3 x, ushort3 y);
ushort3 __CL_CONST_ATTRIBUTES rotate(ushort3 x, ushort3 y);
ushort3 __CL_CONST_ATTRIBUTES sub_sat(ushort3 x, ushort3 y);
ushort3 __CL_CONST_ATTRIBUTES max(ushort3 x, ushort3 y);
ushort3 __CL_CONST_ATTRIBUTES min(ushort3 x, ushort3 y);
ushort4 __CL_CONST_ATTRIBUTES add_sat(ushort4 x, ushort4 y);
ushort4 __CL_CONST_ATTRIBUTES hadd(ushort4 x, ushort4 y);
ushort4 __CL_CONST_ATTRIBUTES rhadd(ushort4 x, ushort4 y);
ushort4 __CL_CONST_ATTRIBUTES mul_hi(ushort4 x, ushort4 y);
ushort4 __CL_CONST_ATTRIBUTES rotate(ushort4 x, ushort4 y);
ushort4 __CL_CONST_ATTRIBUTES sub_sat(ushort4 x, ushort4 y);
ushort4 __CL_CONST_ATTRIBUTES max(ushort4 x, ushort4 y);
ushort4 __CL_CONST_ATTRIBUTES min(ushort4 x, ushort4 y);
ushort8 __CL_CONST_ATTRIBUTES add_sat(ushort8 x, ushort8 y);
ushort8 __CL_CONST_ATTRIBUTES hadd(ushort8 x, ushort8 y);
ushort8 __CL_CONST_ATTRIBUTES rhadd(ushort8 x, ushort8 y);
ushort8 __CL_CONST_ATTRIBUTES mul_hi(ushort8 x, ushort8 y);
ushort8 __CL_CONST_ATTRIBUTES rotate(ushort8 x, ushort8 y);
ushort8 __CL_CONST_ATTRIBUTES sub_sat(ushort8 x, ushort8 y);
ushort8 __CL_CONST_ATTRIBUTES max(ushort8 x, ushort8 y);
ushort8 __CL_CONST_ATTRIBUTES min(ushort8 x, ushort8 y);
ushort16 __CL_CONST_ATTRIBUTES add_sat(ushort16 x, ushort16 y);
ushort16 __CL_CONST_ATTRIBUTES hadd(ushort16 x, ushort16 y);
ushort16 __CL_CONST_ATTRIBUTES rhadd(ushort16 x, ushort16 y);
ushort16 __CL_CONST_ATTRIBUTES mul_hi(ushort16 x, ushort16 y);
ushort16 __CL_CONST_ATTRIBUTES rotate(ushort16 x, ushort16 y);
ushort16 __CL_CONST_ATTRIBUTES sub_sat(ushort16 x, ushort16 y);
ushort16 __CL_CONST_ATTRIBUTES max(ushort16 x, ushort16 y);
ushort16 __CL_CONST_ATTRIBUTES min(ushort16 x, ushort16 y);
uint __CL_CONST_ATTRIBUTES add_sat(uint x, uint y);
uint __CL_CONST_ATTRIBUTES hadd(uint x, uint y);
uint __CL_CONST_ATTRIBUTES rhadd(uint x, uint y);
uint __CL_CONST_ATTRIBUTES mul_hi(uint x, uint y);
uint __CL_CONST_ATTRIBUTES rotate(uint x, uint y);
uint __CL_CONST_ATTRIBUTES sub_sat(uint x, uint y);
uint __CL_CONST_ATTRIBUTES max(uint x, uint y);
uint __CL_CONST_ATTRIBUTES min(uint x, uint y);
uint2 __CL_CONST_ATTRIBUTES add_sat(uint2 x, uint2 y);
uint2 __CL_CONST_ATTRIBUTES hadd(uint2 x, uint2 y);
uint2 __CL_CONST_ATTRIBUTES rhadd(uint2 x, uint2 y);
uint2 __CL_CONST_ATTRIBUTES mul_hi(uint2 x, uint2 y);
uint2 __CL_CONST_ATTRIBUTES rotate(uint2 x, uint2 y);
uint2 __CL_CONST_ATTRIBUTES sub_sat(uint2 x, uint2 y);
uint2 __CL_CONST_ATTRIBUTES max(uint2 x, uint2 y);
uint2 __CL_CONST_ATTRIBUTES min(uint2 x, uint2 y);
uint3 __CL_CONST_ATTRIBUTES add_sat(uint3 x, uint3 y);
uint3 __CL_CONST_ATTRIBUTES hadd(uint3 x, uint3 y);
uint3 __CL_CONST_ATTRIBUTES rhadd(uint3 x, uint3 y);
uint3 __CL_CONST_ATTRIBUTES mul_hi(uint3 x, uint3 y);
uint3 __CL_CONST_ATTRIBUTES rotate(uint3 x, uint3 y);
uint3 __CL_CONST_ATTRIBUTES sub_sat(uint3 x, uint3 y);
uint3 __CL_CONST_ATTRIBUTES max(uint3 x, uint3 y);
uint3 __CL_CONST_ATTRIBUTES min(uint3 x, uint3 y);
uint4 __CL_CONST_ATTRIBUTES add_sat(uint4 x, uint4 y);
uint4 __CL_CONST_ATTRIBUTES hadd(uint4 x, uint4 y);
uint4 __CL_CONST_ATTRIBUTES rhadd(uint4 x, uint4 y);
uint4 __CL_CONST_ATTRIBUTES mul_hi(uint4 x, uint4 y);
uint4 __CL_CONST_ATTRIBUTES rotate(uint4 x, uint4 y);
uint4 __CL_CONST_ATTRIBUTES sub_sat(uint4 x, uint4 y);
uint4 __CL_CONST_ATTRIBUTES max(uint4 x, uint4 y);
uint4 __CL_CONST_ATTRIBUTES min(uint4 x, uint4 y);
uint8 __CL_CONST_ATTRIBUTES add_sat(uint8 x, uint8 y);
uint8 __CL_CONST_ATTRIBUTES hadd(uint8 x, uint8 y);
uint8 __CL_CONST_ATTRIBUTES rhadd(uint8 x, uint8 y);
uint8 __CL_CONST_ATTRIBUTES mul_hi(uint8 x, uint8 y);
uint8 __CL_CONST_ATTRIBUTES rotate(uint8 x, uint8 y);
uint8 __CL_CONST_ATTRIBUTES sub_sat(uint8 x, uint8 y);
uint8 __CL_CONST_ATTRIBUTES max(uint8 x, uint8 y);
uint8 __CL_CONST_ATTRIBUTES min(uint8 x, uint8 y);
uint16 __CL_CONST_ATTRIBUTES add_sat(uint16 x, uint16 y);
uint16 __CL_CONST_ATTRIBUTES hadd(uint16 x, uint16 y);
uint16 __CL_CONST_ATTRIBUTES rhadd(uint16 x, uint16 y);
uint16 __CL_CONST_ATTRIBUTES mul_hi(uint16 x, uint16 y);
uint16 __CL_CONST_ATTRIBUTES rotate(uint16 x, uint16 y);
uint16 __CL_CONST_ATTRIBUTES sub_sat(uint16 x, uint16 y);
uint16 __CL_CONST_ATTRIBUTES max(uint16 x, uint16 y);
uint16 __CL_CONST_ATTRIBUTES min(uint16 x, uint16 y);
ulong __CL_CONST_ATTRIBUTES add_sat(ulong x, ulong y);
ulong __CL_CONST_ATTRIBUTES hadd(ulong x, ulong y);
ulong __CL_CONST_ATTRIBUTES rhadd(ulong x, ulong y);
ulong __CL_CONST_ATTRIBUTES mul_hi(ulong x, ulong y);
ulong __CL_CONST_ATTRIBUTES rotate(ulong x, ulong y);
ulong __CL_CONST_ATTRIBUTES sub_sat(ulong x, ulong y);
ulong __CL_CONST_ATTRIBUTES max(ulong x, ulong y);
ulong __CL_CONST_ATTRIBUTES min(ulong x, ulong y);
ulong2 __CL_CONST_ATTRIBUTES add_sat(ulong2 x, ulong2 y);
ulong2 __CL_CONST_ATTRIBUTES hadd(ulong2 x, ulong2 y);
ulong2 __CL_CONST_ATTRIBUTES rhadd(ulong2 x, ulong2 y);
ulong2 __CL_CONST_ATTRIBUTES mul_hi(ulong2 x, ulong2 y);
ulong2 __CL_CONST_ATTRIBUTES rotate(ulong2 x, ulong2 y);
ulong2 __CL_CONST_ATTRIBUTES sub_sat(ulong2 x, ulong2 y);
ulong2 __CL_CONST_ATTRIBUTES max(ulong2 x, ulong2 y);
ulong2 __CL_CONST_ATTRIBUTES min(ulong2 x, ulong2 y);
ulong3 __CL_CONST_ATTRIBUTES add_sat(ulong3 x, ulong3 y);
ulong3 __CL_CONST_ATTRIBUTES hadd(ulong3 x, ulong3 y);
ulong3 __CL_CONST_ATTRIBUTES rhadd(ulong3 x, ulong3 y);
ulong3 __CL_CONST_ATTRIBUTES mul_hi(ulong3 x, ulong3 y);
ulong3 __CL_CONST_ATTRIBUTES rotate(ulong3 x, ulong3 y);
ulong3 __CL_CONST_ATTRIBUTES sub_sat(ulong3 x, ulong3 y);
ulong3 __CL_CONST_ATTRIBUTES max(ulong3 x, ulong3 y);
ulong3 __CL_CONST_ATTRIBUTES min(ulong3 x, ulong3 y);
ulong4 __CL_CONST_ATTRIBUTES add_sat(ulong4 x, ulong4 y);
ulong4 __CL_CONST_ATTRIBUTES hadd(ulong4 x, ulong4 y);
ulong4 __CL_CONST_ATTRIBUTES rhadd(ulong4 x, ulong4 y);
ulong4 __CL_CONST_ATTRIBUTES mul_hi(ulong4 x, ulong4 y);
ulong4 __CL_CONST_ATTRIBUTES rotate(ulong4 x, ulong4 y);
ulong4 __CL_CONST_ATTRIBUTES sub_sat(ulong4 x, ulong4 y);
ulong4 __CL_CONST_ATTRIBUTES max(ulong4 x, ulong4 y);
ulong4 __CL_CONST_ATTRIBUTES min(ulong4 x, ulong4 y);
ulong8 __CL_CONST_ATTRIBUTES add_sat(ulong8 x, ulong8 y);
ulong8 __CL_CONST_ATTRIBUTES hadd(ulong8 x, ulong8 y);
ulong8 __CL_CONST_ATTRIBUTES rhadd(ulong8 x, ulong8 y);
ulong8 __CL_CONST_ATTRIBUTES mul_hi(ulong8 x, ulong8 y);
ulong8 __CL_CONST_ATTRIBUTES rotate(ulong8 x, ulong8 y);
ulong8 __CL_CONST_ATTRIBUTES sub_sat(ulong8 x, ulong8 y);
ulong8 __CL_CONST_ATTRIBUTES max(ulong8 x, ulong8 y);
ulong8 __CL_CONST_ATTRIBUTES min(ulong8 x, ulong8 y);
ulong16 __CL_CONST_ATTRIBUTES add_sat(ulong16 x, ulong16 y);
ulong16 __CL_CONST_ATTRIBUTES hadd(ulong16 x, ulong16 y);
ulong16 __CL_CONST_ATTRIBUTES rhadd(ulong16 x, ulong16 y);
ulong16 __CL_CONST_ATTRIBUTES mul_hi(ulong16 x, ulong16 y);
ulong16 __CL_CONST_ATTRIBUTES rotate(ulong16 x, ulong16 y);
ulong16 __CL_CONST_ATTRIBUTES sub_sat(ulong16 x, ulong16 y);
ulong16 __CL_CONST_ATTRIBUTES max(ulong16 x, ulong16 y);
ulong16 __CL_CONST_ATTRIBUTES min(ulong16 x, ulong16 y);
char __CL_CONST_ATTRIBUTES mad_hi(char x, char y, char z);
char __CL_CONST_ATTRIBUTES mad_sat(char x, char y, char z);
char __CL_CONST_ATTRIBUTES clamp(char x, char y, char z);
char2 __CL_CONST_ATTRIBUTES mad_hi(char2 x, char2 y, char2 z);
char2 __CL_CONST_ATTRIBUTES mad_sat(char2 x, char2 y, char2 z);
char2 __CL_CONST_ATTRIBUTES clamp(char2 x, char2 y, char2 z);
char3 __CL_CONST_ATTRIBUTES mad_hi(char3 x, char3 y, char3 z);
char3 __CL_CONST_ATTRIBUTES mad_sat(char3 x, char3 y, char3 z);
char3 __CL_CONST_ATTRIBUTES clamp(char3 x, char3 y, char3 z);
char4 __CL_CONST_ATTRIBUTES mad_hi(char4 x, char4 y, char4 z);
char4 __CL_CONST_ATTRIBUTES mad_sat(char4 x, char4 y, char4 z);
char4 __CL_CONST_ATTRIBUTES clamp(char4 x, char4 y, char4 z);
char8 __CL_CONST_ATTRIBUTES mad_hi(char8 x, char8 y, char8 z);
char8 __CL_CONST_ATTRIBUTES mad_sat(char8 x, char8 y, char8 z);
char8 __CL_CONST_ATTRIBUTES clamp(char8 x, char8 y, char8 z);
char16 __CL_CONST_ATTRIBUTES mad_hi(char16 x, char16 y, char16 z);
char16 __CL_CONST_ATTRIBUTES mad_sat(char16 x, char16 y, char16 z);
char16 __CL_CONST_ATTRIBUTES clamp(char16 x, char16 y, char16 z);
short __CL_CONST_ATTRIBUTES mad_hi(short x, short y, short z);
short __CL_CONST_ATTRIBUTES mad_sat(short x, short y, short z);
short __CL_CONST_ATTRIBUTES clamp(short x, short y, short z);
short2 __CL_CONST_ATTRIBUTES mad_hi(short2 x, short2 y, short2 z);
short2 __CL_CONST_ATTRIBUTES mad_sat(short2 x, short2 y, short2 z);
short2 __CL_CONST_ATTRIBUTES clamp(short2 x, short2 y, short2 z);
short3 __CL_CONST_ATTRIBUTES mad_hi(short3 x, short3 y, short3 z);
short3 __CL_CONST_ATTRIBUTES mad_sat(short3 x, short3 y, short3 z);
short3 __CL_CONST_ATTRIBUTES clamp(short3 x, short3 y, short3 z);
short4 __CL_CONST_ATTRIBUTES mad_hi(short4 x, short4 y, short4 z);
short4 __CL_CONST_ATTRIBUTES mad_sat(short4 x, short4 y, short4 z);
short4 __CL_CONST_ATTRIBUTES clamp(short4 x, short4 y, short4 z);
short8 __CL_CONST_ATTRIBUTES mad_hi(short8 x, short8 y, short8 z);
short8 __CL_CONST_ATTRIBUTES mad_sat(short8 x, short8 y, short8 z);
short8 __CL_CONST_ATTRIBUTES clamp(short8 x, short8 y, short8 z);
short16 __CL_CONST_ATTRIBUTES mad_hi(short16 x, short16 y, short16 z);
short16 __CL_CONST_ATTRIBUTES mad_sat(short16 x, short16 y, short16 z);
short16 __CL_CONST_ATTRIBUTES clamp(short16 x, short16 y, short16 z);
int __CL_CONST_ATTRIBUTES mad_hi(int x, int y, int z);
int __CL_CONST_ATTRIBUTES mad_sat(int x, int y, int z);
int __CL_CONST_ATTRIBUTES clamp(int x, int y, int z);
int2 __CL_CONST_ATTRIBUTES mad_hi(int2 x, int2 y, int2 z);
int2 __CL_CONST_ATTRIBUTES mad_sat(int2 x, int2 y, int2 z);
int2 __CL_CONST_ATTRIBUTES clamp(int2 x, int2 y, int2 z);
int3 __CL_CONST_ATTRIBUTES mad_hi(int3 x, int3 y, int3 z);
int3 __CL_CONST_ATTRIBUTES mad_sat(int3 x, int3 y, int3 z);
int3 __CL_CONST_ATTRIBUTES clamp(int3 x, int3 y, int3 z);
int4 __CL_CONST_ATTRIBUTES mad_hi(int4 x, int4 y, int4 z);
int4 __CL_CONST_ATTRIBUTES mad_sat(int4 x, int4 y, int4 z);
int4 __CL_CONST_ATTRIBUTES clamp(int4 x, int4 y, int4 z);
int8 __CL_CONST_ATTRIBUTES mad_hi(int8 x, int8 y, int8 z);
int8 __CL_CONST_ATTRIBUTES mad_sat(int8 x, int8 y, int8 z);
int8 __CL_CONST_ATTRIBUTES clamp(int8 x, int8 y, int8 z);
int16 __CL_CONST_ATTRIBUTES mad_hi(int16 x, int16 y, int16 z);
int16 __CL_CONST_ATTRIBUTES mad_sat(int16 x, int16 y, int16 z);
int16 __CL_CONST_ATTRIBUTES clamp(int16 x, int16 y, int16 z);
long __CL_CONST_ATTRIBUTES mad_hi(long x, long y, long z);
long __CL_CONST_ATTRIBUTES mad_sat(long x, long y, long z);
long __CL_CONST_ATTRIBUTES clamp(long x, long y, long z);
long2 __CL_CONST_ATTRIBUTES mad_hi(long2 x, long2 y, long2 z);
long2 __CL_CONST_ATTRIBUTES mad_sat(long2 x, long2 y, long2 z);
long2 __CL_CONST_ATTRIBUTES clamp(long2 x, long2 y, long2 z);
long3 __CL_CONST_ATTRIBUTES mad_hi(long3 x, long3 y, long3 z);
long3 __CL_CONST_ATTRIBUTES mad_sat(long3 x, long3 y, long3 z);
long3 __CL_CONST_ATTRIBUTES clamp(long3 x, long3 y, long3 z);
long4 __CL_CONST_ATTRIBUTES mad_hi(long4 x, long4 y, long4 z);
long4 __CL_CONST_ATTRIBUTES mad_sat(long4 x, long4 y, long4 z);
long4 __CL_CONST_ATTRIBUTES clamp(long4 x, long4 y, long4 z);
long8 __CL_CONST_ATTRIBUTES mad_hi(long8 x, long8 y, long8 z);
long8 __CL_CONST_ATTRIBUTES mad_sat(long8 x, long8 y, long8 z);
long8 __CL_CONST_ATTRIBUTES clamp(long8 x, long8 y, long8 z);
long16 __CL_CONST_ATTRIBUTES mad_hi(long16 x, long16 y, long16 z);
long16 __CL_CONST_ATTRIBUTES mad_sat(long16 x, long16 y, long16 z);
long16 __CL_CONST_ATTRIBUTES clamp(long16 x, long16 y, long16 z);
uchar __CL_CONST_ATTRIBUTES mad_hi(uchar x, uchar y, uchar z);
uchar __CL_CONST_ATTRIBUTES mad_sat(uchar x, uchar y, uchar z);
uchar __CL_CONST_ATTRIBUTES clamp(uchar x, uchar y, uchar z);
uchar2 __CL_CONST_ATTRIBUTES mad_hi(uchar2 x, uchar2 y, uchar2 z);
uchar2 __CL_CONST_ATTRIBUTES mad_sat(uchar2 x, uchar2 y, uchar2 z);
uchar2 __CL_CONST_ATTRIBUTES clamp(uchar2 x, uchar2 y, uchar2 z);
uchar3 __CL_CONST_ATTRIBUTES mad_hi(uchar3 x, uchar3 y, uchar3 z);
uchar3 __CL_CONST_ATTRIBUTES mad_sat(uchar3 x, uchar3 y, uchar3 z);
uchar3 __CL_CONST_ATTRIBUTES clamp(uchar3 x, uchar3 y, uchar3 z);
uchar4 __CL_CONST_ATTRIBUTES mad_hi(uchar4 x, uchar4 y, uchar4 z);
uchar4 __CL_CONST_ATTRIBUTES mad_sat(uchar4 x, uchar4 y, uchar4 z);
uchar4 __CL_CONST_ATTRIBUTES clamp(uchar4 x, uchar4 y, uchar4 z);
uchar8 __CL_CONST_ATTRIBUTES mad_hi(uchar8 x, uchar8 y, uchar8 z);
uchar8 __CL_CONST_ATTRIBUTES mad_sat(uchar8 x, uchar8 y, uchar8 z);
uchar8 __CL_CONST_ATTRIBUTES clamp(uchar8 x, uchar8 y, uchar8 z);
uchar16 __CL_CONST_ATTRIBUTES mad_hi(uchar16 x, uchar16 y, uchar16 z);
uchar16 __CL_CONST_ATTRIBUTES mad_sat(uchar16 x, uchar16 y, uchar16 z);
uchar16 __CL_CONST_ATTRIBUTES clamp(uchar16 x, uchar16 y, uchar16 z);
ushort __CL_CONST_ATTRIBUTES mad_hi(ushort x, ushort y, ushort z);
ushort __CL_CONST_ATTRIBUTES mad_sat(ushort x, ushort y, ushort z);
ushort __CL_CONST_ATTRIBUTES clamp(ushort x, ushort y, ushort z);
ushort2 __CL_CONST_ATTRIBUTES mad_hi(ushort2 x, ushort2 y, ushort2 z);
ushort2 __CL_CONST_ATTRIBUTES mad_sat(ushort2 x, ushort2 y, ushort2 z);
ushort2 __CL_CONST_ATTRIBUTES clamp(ushort2 x, ushort2 y, ushort2 z);
ushort3 __CL_CONST_ATTRIBUTES mad_hi(ushort3 x, ushort3 y, ushort3 z);
ushort3 __CL_CONST_ATTRIBUTES mad_sat(ushort3 x, ushort3 y, ushort3 z);
ushort3 __CL_CONST_ATTRIBUTES clamp(ushort3 x, ushort3 y, ushort3 z);
ushort4 __CL_CONST_ATTRIBUTES mad_hi(ushort4 x, ushort4 y, ushort4 z);
ushort4 __CL_CONST_ATTRIBUTES mad_sat(ushort4 x, ushort4 y, ushort4 z);
ushort4 __CL_CONST_ATTRIBUTES clamp(ushort4 x, ushort4 y, ushort4 z);
ushort8 __CL_CONST_ATTRIBUTES mad_hi(ushort8 x, ushort8 y, ushort8 z);
ushort8 __CL_CONST_ATTRIBUTES mad_sat(ushort8 x, ushort8 y, ushort8 z);
ushort8 __CL_CONST_ATTRIBUTES clamp(ushort8 x, ushort8 y, ushort8 z);
ushort16 __CL_CONST_ATTRIBUTES mad_hi(ushort16 x, ushort16 y, ushort16 z);
ushort16 __CL_CONST_ATTRIBUTES mad_sat(ushort16 x, ushort16 y, ushort16 z);
ushort16 __CL_CONST_ATTRIBUTES clamp(ushort16 x, ushort16 y, ushort16 z);
uint __CL_CONST_ATTRIBUTES mad_hi(uint x, uint y, uint z);
uint __CL_CONST_ATTRIBUTES mad_sat(uint x, uint y, uint z);
uint __CL_CONST_ATTRIBUTES clamp(uint x, uint y, uint z);
uint2 __CL_CONST_ATTRIBUTES mad_hi(uint2 x, uint2 y, uint2 z);
uint2 __CL_CONST_ATTRIBUTES mad_sat(uint2 x, uint2 y, uint2 z);
uint2 __CL_CONST_ATTRIBUTES clamp(uint2 x, uint2 y, uint2 z);
uint3 __CL_CONST_ATTRIBUTES mad_hi(uint3 x, uint3 y, uint3 z);
uint3 __CL_CONST_ATTRIBUTES mad_sat(uint3 x, uint3 y, uint3 z);
uint3 __CL_CONST_ATTRIBUTES clamp(uint3 x, uint3 y, uint3 z);
uint4 __CL_CONST_ATTRIBUTES mad_hi(uint4 x, uint4 y, uint4 z);
uint4 __CL_CONST_ATTRIBUTES mad_sat(uint4 x, uint4 y, uint4 z);
uint4 __CL_CONST_ATTRIBUTES clamp(uint4 x, uint4 y, uint4 z);
uint8 __CL_CONST_ATTRIBUTES mad_hi(uint8 x, uint8 y, uint8 z);
uint8 __CL_CONST_ATTRIBUTES mad_sat(uint8 x, uint8 y, uint8 z);
uint8 __CL_CONST_ATTRIBUTES clamp(uint8 x, uint8 y, uint8 z);
uint16 __CL_CONST_ATTRIBUTES mad_hi(uint16 x, uint16 y, uint16 z);
uint16 __CL_CONST_ATTRIBUTES mad_sat(uint16 x, uint16 y, uint16 z);
uint16 __CL_CONST_ATTRIBUTES clamp(uint16 x, uint16 y, uint16 z);
ulong __CL_CONST_ATTRIBUTES mad_hi(ulong x, ulong y, ulong z);
ulong __CL_CONST_ATTRIBUTES mad_sat(ulong x, ulong y, ulong z);
ulong __CL_CONST_ATTRIBUTES clamp(ulong x, ulong y, ulong z);
ulong2 __CL_CONST_ATTRIBUTES mad_hi(ulong2 x, ulong2 y, ulong2 z);
ulong2 __CL_CONST_ATTRIBUTES mad_sat(ulong2 x, ulong2 y, ulong2 z);
ulong2 __CL_CONST_ATTRIBUTES clamp(ulong2 x, ulong2 y, ulong2 z);
ulong3 __CL_CONST_ATTRIBUTES mad_hi(ulong3 x, ulong3 y, ulong3 z);
ulong3 __CL_CONST_ATTRIBUTES mad_sat(ulong3 x, ulong3 y, ulong3 z);
ulong3 __CL_CONST_ATTRIBUTES clamp(ulong3 x, ulong3 y, ulong3 z);
ulong4 __CL_CONST_ATTRIBUTES mad_hi(ulong4 x, ulong4 y, ulong4 z);
ulong4 __CL_CONST_ATTRIBUTES mad_sat(ulong4 x, ulong4 y, ulong4 z);
ulong4 __CL_CONST_ATTRIBUTES clamp(ulong4 x, ulong4 y, ulong4 z);
ulong8 __CL_CONST_ATTRIBUTES mad_hi(ulong8 x, ulong8 y, ulong8 z);
ulong8 __CL_CONST_ATTRIBUTES mad_sat(ulong8 x, ulong8 y, ulong8 z);
ulong8 __CL_CONST_ATTRIBUTES clamp(ulong8 x, ulong8 y, ulong8 z);
ulong16 __CL_CONST_ATTRIBUTES mad_hi(ulong16 x, ulong16 y, ulong16 z);
ulong16 __CL_CONST_ATTRIBUTES mad_sat(ulong16 x, ulong16 y, ulong16 z);
ulong16 __CL_CONST_ATTRIBUTES clamp(ulong16 x, ulong16 y, ulong16 z);
int __CL_CONST_ATTRIBUTES mul24(int x, int y);
int2 __CL_CONST_ATTRIBUTES mul24(int2 x, int2 y);
int3 __CL_CONST_ATTRIBUTES mul24(int3 x, int3 y);
int4 __CL_CONST_ATTRIBUTES mul24(int4 x, int4 y);
int8 __CL_CONST_ATTRIBUTES mul24(int8 x, int8 y);
int16 __CL_CONST_ATTRIBUTES mul24(int16 x, int16 y);
uint __CL_CONST_ATTRIBUTES mul24(uint x, uint y);
uint2 __CL_CONST_ATTRIBUTES mul24(uint2 x, uint2 y);
uint3 __CL_CONST_ATTRIBUTES mul24(uint3 x, uint3 y);
uint4 __CL_CONST_ATTRIBUTES mul24(uint4 x, uint4 y);
uint8 __CL_CONST_ATTRIBUTES mul24(uint8 x, uint8 y);
uint16 __CL_CONST_ATTRIBUTES mul24(uint16 x, uint16 y);
int __CL_CONST_ATTRIBUTES mad24(int x, int y, int z);
int2 __CL_CONST_ATTRIBUTES mad24(int2 x, int2 y, int2 z);
int3 __CL_CONST_ATTRIBUTES mad24(int3 x, int3 y, int3 z);
int4 __CL_CONST_ATTRIBUTES mad24(int4 x, int4 y, int4 z);
int8 __CL_CONST_ATTRIBUTES mad24(int8 x, int8 y, int8 z);
int16 __CL_CONST_ATTRIBUTES mad24(int16 x, int16 y, int16 z);
uint __CL_CONST_ATTRIBUTES mad24(uint x, uint y, uint z);
uint2 __CL_CONST_ATTRIBUTES mad24(uint2 x, uint2 y, uint2 z);
uint3 __CL_CONST_ATTRIBUTES mad24(uint3 x, uint3 y, uint3 z);
uint4 __CL_CONST_ATTRIBUTES mad24(uint4 x, uint4 y, uint4 z);
uint8 __CL_CONST_ATTRIBUTES mad24(uint8 x, uint8 y, uint8 z);
uint16 __CL_CONST_ATTRIBUTES mad24(uint16 x, uint16 y, uint16 z);
short __CL_CONST_ATTRIBUTES upsample(char x, uchar y);
ushort __CL_CONST_ATTRIBUTES upsample(uchar x, uchar y);
int __CL_CONST_ATTRIBUTES upsample(short x, ushort y);
uint __CL_CONST_ATTRIBUTES upsample(ushort x, ushort y);
long __CL_CONST_ATTRIBUTES upsample(int x, uint y);
ulong __CL_CONST_ATTRIBUTES upsample(uint x, uint y);
short2 __CL_CONST_ATTRIBUTES upsample(char2 x, uchar2 y);
ushort2 __CL_CONST_ATTRIBUTES upsample(uchar2 x, uchar2 y);
int2 __CL_CONST_ATTRIBUTES upsample(short2 x, ushort2 y);
uint2 __CL_CONST_ATTRIBUTES upsample(ushort2 x, ushort2 y);
long2 __CL_CONST_ATTRIBUTES upsample(int2 x, uint2 y);
ulong2 __CL_CONST_ATTRIBUTES upsample(uint2 x, uint2 y);
short3 __CL_CONST_ATTRIBUTES upsample(char3 x, uchar3 y);
ushort3 __CL_CONST_ATTRIBUTES upsample(uchar3 x, uchar3 y);
int3 __CL_CONST_ATTRIBUTES upsample(short3 x, ushort3 y);
uint3 __CL_CONST_ATTRIBUTES upsample(ushort3 x, ushort3 y);
long3 __CL_CONST_ATTRIBUTES upsample(int3 x, uint3 y);
ulong3 __CL_CONST_ATTRIBUTES upsample(uint3 x, uint3 y);
short4 __CL_CONST_ATTRIBUTES upsample(char4 x, uchar4 y);
ushort4 __CL_CONST_ATTRIBUTES upsample(uchar4 x, uchar4 y);
int4 __CL_CONST_ATTRIBUTES upsample(short4 x, ushort4 y);
uint4 __CL_CONST_ATTRIBUTES upsample(ushort4 x, ushort4 y);
long4 __CL_CONST_ATTRIBUTES upsample(int4 x, uint4 y);
ulong4 __CL_CONST_ATTRIBUTES upsample(uint4 x, uint4 y);
short8 __CL_CONST_ATTRIBUTES upsample(char8 x, uchar8 y);
ushort8 __CL_CONST_ATTRIBUTES upsample(uchar8 x, uchar8 y);
int8 __CL_CONST_ATTRIBUTES upsample(short8 x, ushort8 y);
uint8 __CL_CONST_ATTRIBUTES upsample(ushort8 x, ushort8 y);
long8 __CL_CONST_ATTRIBUTES upsample(int8 x, uint8 y);
ulong8 __CL_CONST_ATTRIBUTES upsample(uint8 x, uint8 y);
short16 __CL_CONST_ATTRIBUTES upsample(char16 x, uchar16 y);
ushort16 __CL_CONST_ATTRIBUTES upsample(uchar16 x, uchar16 y);
int16 __CL_CONST_ATTRIBUTES upsample(short16 x, ushort16 y);
uint16 __CL_CONST_ATTRIBUTES upsample(ushort16 x, ushort16 y);
long16 __CL_CONST_ATTRIBUTES upsample(int16 x, uint16 y);
ulong16 __CL_CONST_ATTRIBUTES upsample(uint16 x, uint16 y);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isfinite(half x);
short2 __CL_CONST_ATTRIBUTES isfinite(half2 x);
short3 __CL_CONST_ATTRIBUTES isfinite(half3 x);
short4 __CL_CONST_ATTRIBUTES isfinite(half4 x);
short8 __CL_CONST_ATTRIBUTES isfinite(half8 x);
short16 __CL_CONST_ATTRIBUTES isfinite(half16 x);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isfinite(float x);
int2 __CL_CONST_ATTRIBUTES isfinite(float2 x);
int3 __CL_CONST_ATTRIBUTES isfinite(float3 x);
int4 __CL_CONST_ATTRIBUTES isfinite(float4 x);
int8 __CL_CONST_ATTRIBUTES isfinite(float8 x);
int16 __CL_CONST_ATTRIBUTES isfinite(float16 x);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isfinite(double x);
long2 __CL_CONST_ATTRIBUTES isfinite(double2 x);
long3 __CL_CONST_ATTRIBUTES isfinite(double3 x);
long4 __CL_CONST_ATTRIBUTES isfinite(double4 x);
long8 __CL_CONST_ATTRIBUTES isfinite(double8 x);
long16 __CL_CONST_ATTRIBUTES isfinite(double16 x);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isinf(half x);
short2 __CL_CONST_ATTRIBUTES isinf(half2 x);
short3 __CL_CONST_ATTRIBUTES isinf(half3 x);
short4 __CL_CONST_ATTRIBUTES isinf(half4 x);
short8 __CL_CONST_ATTRIBUTES isinf(half8 x);
short16 __CL_CONST_ATTRIBUTES isinf(half16 x);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isinf(float x);
int2 __CL_CONST_ATTRIBUTES isinf(float2 x);
int3 __CL_CONST_ATTRIBUTES isinf(float3 x);
int4 __CL_CONST_ATTRIBUTES isinf(float4 x);
int8 __CL_CONST_ATTRIBUTES isinf(float8 x);
int16 __CL_CONST_ATTRIBUTES isinf(float16 x);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isinf(double x);
long2 __CL_CONST_ATTRIBUTES isinf(double2 x);
long3 __CL_CONST_ATTRIBUTES isinf(double3 x);
long4 __CL_CONST_ATTRIBUTES isinf(double4 x);
long8 __CL_CONST_ATTRIBUTES isinf(double8 x);
long16 __CL_CONST_ATTRIBUTES isinf(double16 x);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isnan(half x);
short2 __CL_CONST_ATTRIBUTES isnan(half2 x);
short3 __CL_CONST_ATTRIBUTES isnan(half3 x);
short4 __CL_CONST_ATTRIBUTES isnan(half4 x);
short8 __CL_CONST_ATTRIBUTES isnan(half8 x);
short16 __CL_CONST_ATTRIBUTES isnan(half16 x);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isnan(float x);
int2 __CL_CONST_ATTRIBUTES isnan(float2 x);
int3 __CL_CONST_ATTRIBUTES isnan(float3 x);
int4 __CL_CONST_ATTRIBUTES isnan(float4 x);
int8 __CL_CONST_ATTRIBUTES isnan(float8 x);
int16 __CL_CONST_ATTRIBUTES isnan(float16 x);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isnan(double x);
long2 __CL_CONST_ATTRIBUTES isnan(double2 x);
long3 __CL_CONST_ATTRIBUTES isnan(double3 x);
long4 __CL_CONST_ATTRIBUTES isnan(double4 x);
long8 __CL_CONST_ATTRIBUTES isnan(double8 x);
long16 __CL_CONST_ATTRIBUTES isnan(double16 x);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isnormal(half x);
short2 __CL_CONST_ATTRIBUTES isnormal(half2 x);
short3 __CL_CONST_ATTRIBUTES isnormal(half3 x);
short4 __CL_CONST_ATTRIBUTES isnormal(half4 x);
short8 __CL_CONST_ATTRIBUTES isnormal(half8 x);
short16 __CL_CONST_ATTRIBUTES isnormal(half16 x);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isnormal(float x);
int2 __CL_CONST_ATTRIBUTES isnormal(float2 x);
int3 __CL_CONST_ATTRIBUTES isnormal(float3 x);
int4 __CL_CONST_ATTRIBUTES isnormal(float4 x);
int8 __CL_CONST_ATTRIBUTES isnormal(float8 x);
int16 __CL_CONST_ATTRIBUTES isnormal(float16 x);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isnormal(double x);
long2 __CL_CONST_ATTRIBUTES isnormal(double2 x);
long3 __CL_CONST_ATTRIBUTES isnormal(double3 x);
long4 __CL_CONST_ATTRIBUTES isnormal(double4 x);
long8 __CL_CONST_ATTRIBUTES isnormal(double8 x);
long16 __CL_CONST_ATTRIBUTES isnormal(double16 x);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES signbit(half x);
short2 __CL_CONST_ATTRIBUTES signbit(half2 x);
short3 __CL_CONST_ATTRIBUTES signbit(half3 x);
short4 __CL_CONST_ATTRIBUTES signbit(half4 x);
short8 __CL_CONST_ATTRIBUTES signbit(half8 x);
short16 __CL_CONST_ATTRIBUTES signbit(half16 x);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES signbit(float x);
int2 __CL_CONST_ATTRIBUTES signbit(float2 x);
int3 __CL_CONST_ATTRIBUTES signbit(float3 x);
int4 __CL_CONST_ATTRIBUTES signbit(float4 x);
int8 __CL_CONST_ATTRIBUTES signbit(float8 x);
int16 __CL_CONST_ATTRIBUTES signbit(float16 x);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES signbit(double x);
long2 __CL_CONST_ATTRIBUTES signbit(double2 x);
long3 __CL_CONST_ATTRIBUTES signbit(double3 x);
long4 __CL_CONST_ATTRIBUTES signbit(double4 x);
long8 __CL_CONST_ATTRIBUTES signbit(double8 x);
long16 __CL_CONST_ATTRIBUTES signbit(double16 x);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isequal(half x, half y);
short2 __CL_CONST_ATTRIBUTES isequal(half2 x, half2 y);
short3 __CL_CONST_ATTRIBUTES isequal(half3 x, half3 y);
short4 __CL_CONST_ATTRIBUTES isequal(half4 x, half4 y);
short8 __CL_CONST_ATTRIBUTES isequal(half8 x, half8 y);
short16 __CL_CONST_ATTRIBUTES isequal(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isequal(float x, float y);
int2 __CL_CONST_ATTRIBUTES isequal(float2 x, float2 y);
int3 __CL_CONST_ATTRIBUTES isequal(float3 x, float3 y);
int4 __CL_CONST_ATTRIBUTES isequal(float4 x, float4 y);
int8 __CL_CONST_ATTRIBUTES isequal(float8 x, float8 y);
int16 __CL_CONST_ATTRIBUTES isequal(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isequal(double x, double y);
long2 __CL_CONST_ATTRIBUTES isequal(double2 x, double2 y);
long3 __CL_CONST_ATTRIBUTES isequal(double3 x, double3 y);
long4 __CL_CONST_ATTRIBUTES isequal(double4 x, double4 y);
long8 __CL_CONST_ATTRIBUTES isequal(double8 x, double8 y);
long16 __CL_CONST_ATTRIBUTES isequal(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isnotequal(half x, half y);
short2 __CL_CONST_ATTRIBUTES isnotequal(half2 x, half2 y);
short3 __CL_CONST_ATTRIBUTES isnotequal(half3 x, half3 y);
short4 __CL_CONST_ATTRIBUTES isnotequal(half4 x, half4 y);
short8 __CL_CONST_ATTRIBUTES isnotequal(half8 x, half8 y);
short16 __CL_CONST_ATTRIBUTES isnotequal(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isnotequal(float x, float y);
int2 __CL_CONST_ATTRIBUTES isnotequal(float2 x, float2 y);
int3 __CL_CONST_ATTRIBUTES isnotequal(float3 x, float3 y);
int4 __CL_CONST_ATTRIBUTES isnotequal(float4 x, float4 y);
int8 __CL_CONST_ATTRIBUTES isnotequal(float8 x, float8 y);
int16 __CL_CONST_ATTRIBUTES isnotequal(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isnotequal(double x, double y);
long2 __CL_CONST_ATTRIBUTES isnotequal(double2 x, double2 y);
long3 __CL_CONST_ATTRIBUTES isnotequal(double3 x, double3 y);
long4 __CL_CONST_ATTRIBUTES isnotequal(double4 x, double4 y);
long8 __CL_CONST_ATTRIBUTES isnotequal(double8 x, double8 y);
long16 __CL_CONST_ATTRIBUTES isnotequal(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isgreater(half x, half y);
short2 __CL_CONST_ATTRIBUTES isgreater(half2 x, half2 y);
short3 __CL_CONST_ATTRIBUTES isgreater(half3 x, half3 y);
short4 __CL_CONST_ATTRIBUTES isgreater(half4 x, half4 y);
short8 __CL_CONST_ATTRIBUTES isgreater(half8 x, half8 y);
short16 __CL_CONST_ATTRIBUTES isgreater(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isgreater(float x, float y);
int2 __CL_CONST_ATTRIBUTES isgreater(float2 x, float2 y);
int3 __CL_CONST_ATTRIBUTES isgreater(float3 x, float3 y);
int4 __CL_CONST_ATTRIBUTES isgreater(float4 x, float4 y);
int8 __CL_CONST_ATTRIBUTES isgreater(float8 x, float8 y);
int16 __CL_CONST_ATTRIBUTES isgreater(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isgreater(double x, double y);
long2 __CL_CONST_ATTRIBUTES isgreater(double2 x, double2 y);
long3 __CL_CONST_ATTRIBUTES isgreater(double3 x, double3 y);
long4 __CL_CONST_ATTRIBUTES isgreater(double4 x, double4 y);
long8 __CL_CONST_ATTRIBUTES isgreater(double8 x, double8 y);
long16 __CL_CONST_ATTRIBUTES isgreater(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isgreaterequal(half x, half y);
short2 __CL_CONST_ATTRIBUTES isgreaterequal(half2 x, half2 y);
short3 __CL_CONST_ATTRIBUTES isgreaterequal(half3 x, half3 y);
short4 __CL_CONST_ATTRIBUTES isgreaterequal(half4 x, half4 y);
short8 __CL_CONST_ATTRIBUTES isgreaterequal(half8 x, half8 y);
short16 __CL_CONST_ATTRIBUTES isgreaterequal(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isgreaterequal(float x, float y);
int2 __CL_CONST_ATTRIBUTES isgreaterequal(float2 x, float2 y);
int3 __CL_CONST_ATTRIBUTES isgreaterequal(float3 x, float3 y);
int4 __CL_CONST_ATTRIBUTES isgreaterequal(float4 x, float4 y);
int8 __CL_CONST_ATTRIBUTES isgreaterequal(float8 x, float8 y);
int16 __CL_CONST_ATTRIBUTES isgreaterequal(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isgreaterequal(double x, double y);
long2 __CL_CONST_ATTRIBUTES isgreaterequal(double2 x, double2 y);
long3 __CL_CONST_ATTRIBUTES isgreaterequal(double3 x, double3 y);
long4 __CL_CONST_ATTRIBUTES isgreaterequal(double4 x, double4 y);
long8 __CL_CONST_ATTRIBUTES isgreaterequal(double8 x, double8 y);
long16 __CL_CONST_ATTRIBUTES isgreaterequal(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isless(half x, half y);
short2 __CL_CONST_ATTRIBUTES isless(half2 x, half2 y);
short3 __CL_CONST_ATTRIBUTES isless(half3 x, half3 y);
short4 __CL_CONST_ATTRIBUTES isless(half4 x, half4 y);
short8 __CL_CONST_ATTRIBUTES isless(half8 x, half8 y);
short16 __CL_CONST_ATTRIBUTES isless(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isless(float x, float y);
int2 __CL_CONST_ATTRIBUTES isless(float2 x, float2 y);
int3 __CL_CONST_ATTRIBUTES isless(float3 x, float3 y);
int4 __CL_CONST_ATTRIBUTES isless(float4 x, float4 y);
int8 __CL_CONST_ATTRIBUTES isless(float8 x, float8 y);
int16 __CL_CONST_ATTRIBUTES isless(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isless(double x, double y);
long2 __CL_CONST_ATTRIBUTES isless(double2 x, double2 y);
long3 __CL_CONST_ATTRIBUTES isless(double3 x, double3 y);
long4 __CL_CONST_ATTRIBUTES isless(double4 x, double4 y);
long8 __CL_CONST_ATTRIBUTES isless(double8 x, double8 y);
long16 __CL_CONST_ATTRIBUTES isless(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES islessequal(half x, half y);
short2 __CL_CONST_ATTRIBUTES islessequal(half2 x, half2 y);
short3 __CL_CONST_ATTRIBUTES islessequal(half3 x, half3 y);
short4 __CL_CONST_ATTRIBUTES islessequal(half4 x, half4 y);
short8 __CL_CONST_ATTRIBUTES islessequal(half8 x, half8 y);
short16 __CL_CONST_ATTRIBUTES islessequal(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES islessequal(float x, float y);
int2 __CL_CONST_ATTRIBUTES islessequal(float2 x, float2 y);
int3 __CL_CONST_ATTRIBUTES islessequal(float3 x, float3 y);
int4 __CL_CONST_ATTRIBUTES islessequal(float4 x, float4 y);
int8 __CL_CONST_ATTRIBUTES islessequal(float8 x, float8 y);
int16 __CL_CONST_ATTRIBUTES islessequal(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES islessequal(double x, double y);
long2 __CL_CONST_ATTRIBUTES islessequal(double2 x, double2 y);
long3 __CL_CONST_ATTRIBUTES islessequal(double3 x, double3 y);
long4 __CL_CONST_ATTRIBUTES islessequal(double4 x, double4 y);
long8 __CL_CONST_ATTRIBUTES islessequal(double8 x, double8 y);
long16 __CL_CONST_ATTRIBUTES islessequal(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES islessgreater(half x, half y);
short2 __CL_CONST_ATTRIBUTES islessgreater(half2 x, half2 y);
short3 __CL_CONST_ATTRIBUTES islessgreater(half3 x, half3 y);
short4 __CL_CONST_ATTRIBUTES islessgreater(half4 x, half4 y);
short8 __CL_CONST_ATTRIBUTES islessgreater(half8 x, half8 y);
short16 __CL_CONST_ATTRIBUTES islessgreater(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES islessgreater(float x, float y);
int2 __CL_CONST_ATTRIBUTES islessgreater(float2 x, float2 y);
int3 __CL_CONST_ATTRIBUTES islessgreater(float3 x, float3 y);
int4 __CL_CONST_ATTRIBUTES islessgreater(float4 x, float4 y);
int8 __CL_CONST_ATTRIBUTES islessgreater(float8 x, float8 y);
int16 __CL_CONST_ATTRIBUTES islessgreater(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES islessgreater(double x, double y);
long2 __CL_CONST_ATTRIBUTES islessgreater(double2 x, double2 y);
long3 __CL_CONST_ATTRIBUTES islessgreater(double3 x, double3 y);
long4 __CL_CONST_ATTRIBUTES islessgreater(double4 x, double4 y);
long8 __CL_CONST_ATTRIBUTES islessgreater(double8 x, double8 y);
long16 __CL_CONST_ATTRIBUTES islessgreater(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isordered(half x, half y);
short2 __CL_CONST_ATTRIBUTES isordered(half2 x, half2 y);
short3 __CL_CONST_ATTRIBUTES isordered(half3 x, half3 y);
short4 __CL_CONST_ATTRIBUTES isordered(half4 x, half4 y);
short8 __CL_CONST_ATTRIBUTES isordered(half8 x, half8 y);
short16 __CL_CONST_ATTRIBUTES isordered(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isordered(float x, float y);
int2 __CL_CONST_ATTRIBUTES isordered(float2 x, float2 y);
int3 __CL_CONST_ATTRIBUTES isordered(float3 x, float3 y);
int4 __CL_CONST_ATTRIBUTES isordered(float4 x, float4 y);
int8 __CL_CONST_ATTRIBUTES isordered(float8 x, float8 y);
int16 __CL_CONST_ATTRIBUTES isordered(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isordered(double x, double y);
long2 __CL_CONST_ATTRIBUTES isordered(double2 x, double2 y);
long3 __CL_CONST_ATTRIBUTES isordered(double3 x, double3 y);
long4 __CL_CONST_ATTRIBUTES isordered(double4 x, double4 y);
long8 __CL_CONST_ATTRIBUTES isordered(double8 x, double8 y);
long16 __CL_CONST_ATTRIBUTES isordered(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isunordered(half x, half y);
short2 __CL_CONST_ATTRIBUTES isunordered(half2 x, half2 y);
short3 __CL_CONST_ATTRIBUTES isunordered(half3 x, half3 y);
short4 __CL_CONST_ATTRIBUTES isunordered(half4 x, half4 y);
short8 __CL_CONST_ATTRIBUTES isunordered(half8 x, half8 y);
short16 __CL_CONST_ATTRIBUTES isunordered(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_CONST_ATTRIBUTES isunordered(float x, float y);
int2 __CL_CONST_ATTRIBUTES isunordered(float2 x, float2 y);
int3 __CL_CONST_ATTRIBUTES isunordered(float3 x, float3 y);
int4 __CL_CONST_ATTRIBUTES isunordered(float4 x, float4 y);
int8 __CL_CONST_ATTRIBUTES isunordered(float8 x, float8 y);
int16 __CL_CONST_ATTRIBUTES isunordered(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES isunordered(double x, double y);
long2 __CL_CONST_ATTRIBUTES isunordered(double2 x, double2 y);
long3 __CL_CONST_ATTRIBUTES isunordered(double3 x, double3 y);
long4 __CL_CONST_ATTRIBUTES isunordered(double4 x, double4 y);
long8 __CL_CONST_ATTRIBUTES isunordered(double8 x, double8 y);
long16 __CL_CONST_ATTRIBUTES isunordered(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
char __CL_CONST_ATTRIBUTES bitselect(char x, char y, char z);
char2 __CL_CONST_ATTRIBUTES bitselect(char2 x, char2 y, char2 z);
char3 __CL_CONST_ATTRIBUTES bitselect(char3 x, char3 y, char3 z);
char4 __CL_CONST_ATTRIBUTES bitselect(char4 x, char4 y, char4 z);
char8 __CL_CONST_ATTRIBUTES bitselect(char8 x, char8 y, char8 z);
char16 __CL_CONST_ATTRIBUTES bitselect(char16 x, char16 y, char16 z);
short __CL_CONST_ATTRIBUTES bitselect(short x, short y, short z);
short2 __CL_CONST_ATTRIBUTES bitselect(short2 x, short2 y, short2 z);
short3 __CL_CONST_ATTRIBUTES bitselect(short3 x, short3 y, short3 z);
short4 __CL_CONST_ATTRIBUTES bitselect(short4 x, short4 y, short4 z);
short8 __CL_CONST_ATTRIBUTES bitselect(short8 x, short8 y, short8 z);
short16 __CL_CONST_ATTRIBUTES bitselect(short16 x, short16 y, short16 z);
int __CL_CONST_ATTRIBUTES bitselect(int x, int y, int z);
int2 __CL_CONST_ATTRIBUTES bitselect(int2 x, int2 y, int2 z);
int3 __CL_CONST_ATTRIBUTES bitselect(int3 x, int3 y, int3 z);
int4 __CL_CONST_ATTRIBUTES bitselect(int4 x, int4 y, int4 z);
int8 __CL_CONST_ATTRIBUTES bitselect(int8 x, int8 y, int8 z);
int16 __CL_CONST_ATTRIBUTES bitselect(int16 x, int16 y, int16 z);
long __CL_CONST_ATTRIBUTES bitselect(long x, long y, long z);
long2 __CL_CONST_ATTRIBUTES bitselect(long2 x, long2 y, long2 z);
long3 __CL_CONST_ATTRIBUTES bitselect(long3 x, long3 y, long3 z);
long4 __CL_CONST_ATTRIBUTES bitselect(long4 x, long4 y, long4 z);
long8 __CL_CONST_ATTRIBUTES bitselect(long8 x, long8 y, long8 z);
long16 __CL_CONST_ATTRIBUTES bitselect(long16 x, long16 y, long16 z);
uchar __CL_CONST_ATTRIBUTES bitselect(uchar x, uchar y, uchar z);
uchar2 __CL_CONST_ATTRIBUTES bitselect(uchar2 x, uchar2 y, uchar2 z);
uchar3 __CL_CONST_ATTRIBUTES bitselect(uchar3 x, uchar3 y, uchar3 z);
uchar4 __CL_CONST_ATTRIBUTES bitselect(uchar4 x, uchar4 y, uchar4 z);
uchar8 __CL_CONST_ATTRIBUTES bitselect(uchar8 x, uchar8 y, uchar8 z);
uchar16 __CL_CONST_ATTRIBUTES bitselect(uchar16 x, uchar16 y, uchar16 z);
ushort __CL_CONST_ATTRIBUTES bitselect(ushort x, ushort y, ushort z);
ushort2 __CL_CONST_ATTRIBUTES bitselect(ushort2 x, ushort2 y, ushort2 z);
ushort3 __CL_CONST_ATTRIBUTES bitselect(ushort3 x, ushort3 y, ushort3 z);
ushort4 __CL_CONST_ATTRIBUTES bitselect(ushort4 x, ushort4 y, ushort4 z);
ushort8 __CL_CONST_ATTRIBUTES bitselect(ushort8 x, ushort8 y, ushort8 z);
ushort16 __CL_CONST_ATTRIBUTES bitselect(ushort16 x, ushort16 y, ushort16 z);
uint __CL_CONST_ATTRIBUTES bitselect(uint x, uint y, uint z);
uint2 __CL_CONST_ATTRIBUTES bitselect(uint2 x, uint2 y, uint2 z);
uint3 __CL_CONST_ATTRIBUTES bitselect(uint3 x, uint3 y, uint3 z);
uint4 __CL_CONST_ATTRIBUTES bitselect(uint4 x, uint4 y, uint4 z);
uint8 __CL_CONST_ATTRIBUTES bitselect(uint8 x, uint8 y, uint8 z);
uint16 __CL_CONST_ATTRIBUTES bitselect(uint16 x, uint16 y, uint16 z);
ulong __CL_CONST_ATTRIBUTES bitselect(ulong x, ulong y, ulong z);
ulong2 __CL_CONST_ATTRIBUTES bitselect(ulong2 x, ulong2 y, ulong2 z);
ulong3 __CL_CONST_ATTRIBUTES bitselect(ulong3 x, ulong3 y, ulong3 z);
ulong4 __CL_CONST_ATTRIBUTES bitselect(ulong4 x, ulong4 y, ulong4 z);
ulong8 __CL_CONST_ATTRIBUTES bitselect(ulong8 x, ulong8 y, ulong8 z);
ulong16 __CL_CONST_ATTRIBUTES bitselect(ulong16 x, ulong16 y, ulong16 z);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES bitselect(half x, half y, half z);
half2 __CL_CONST_ATTRIBUTES bitselect(half2 x, half2 y, half2 z);
half3 __CL_CONST_ATTRIBUTES bitselect(half3 x, half3 y, half3 z);
half4 __CL_CONST_ATTRIBUTES bitselect(half4 x, half4 y, half4 z);
half8 __CL_CONST_ATTRIBUTES bitselect(half8 x, half8 y, half8 z);
half16 __CL_CONST_ATTRIBUTES bitselect(half16 x, half16 y, half16 z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES bitselect(float x, float y, float z);
float2 __CL_CONST_ATTRIBUTES bitselect(float2 x, float2 y, float2 z);
float3 __CL_CONST_ATTRIBUTES bitselect(float3 x, float3 y, float3 z);
float4 __CL_CONST_ATTRIBUTES bitselect(float4 x, float4 y, float4 z);
float8 __CL_CONST_ATTRIBUTES bitselect(float8 x, float8 y, float8 z);
float16 __CL_CONST_ATTRIBUTES bitselect(float16 x, float16 y, float16 z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES bitselect(double x, double y, double z);
double2 __CL_CONST_ATTRIBUTES bitselect(double2 x, double2 y, double2 z);
double3 __CL_CONST_ATTRIBUTES bitselect(double3 x, double3 y, double3 z);
double4 __CL_CONST_ATTRIBUTES bitselect(double4 x, double4 y, double4 z);
double8 __CL_CONST_ATTRIBUTES bitselect(double8 x, double8 y, double8 z);
double16 __CL_CONST_ATTRIBUTES bitselect(double16 x, double16 y, double16 z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_CONST_ATTRIBUTES any(char x);
int __CL_CONST_ATTRIBUTES any(char2 x);
int __CL_CONST_ATTRIBUTES any(char3 x);
int __CL_CONST_ATTRIBUTES any(char4 x);
int __CL_CONST_ATTRIBUTES any(char8 x);
int __CL_CONST_ATTRIBUTES any(char16 x);
int __CL_CONST_ATTRIBUTES any(short x);
int __CL_CONST_ATTRIBUTES any(short2 x);
int __CL_CONST_ATTRIBUTES any(short3 x);
int __CL_CONST_ATTRIBUTES any(short4 x);
int __CL_CONST_ATTRIBUTES any(short8 x);
int __CL_CONST_ATTRIBUTES any(short16 x);
int __CL_CONST_ATTRIBUTES any(int x);
int __CL_CONST_ATTRIBUTES any(int2 x);
int __CL_CONST_ATTRIBUTES any(int3 x);
int __CL_CONST_ATTRIBUTES any(int4 x);
int __CL_CONST_ATTRIBUTES any(int8 x);
int __CL_CONST_ATTRIBUTES any(int16 x);
int __CL_CONST_ATTRIBUTES any(long x);
int __CL_CONST_ATTRIBUTES any(long2 x);
int __CL_CONST_ATTRIBUTES any(long3 x);
int __CL_CONST_ATTRIBUTES any(long4 x);
int __CL_CONST_ATTRIBUTES any(long8 x);
int __CL_CONST_ATTRIBUTES any(long16 x);
int __CL_CONST_ATTRIBUTES all(char x);
int __CL_CONST_ATTRIBUTES all(char2 x);
int __CL_CONST_ATTRIBUTES all(char3 x);
int __CL_CONST_ATTRIBUTES all(char4 x);
int __CL_CONST_ATTRIBUTES all(char8 x);
int __CL_CONST_ATTRIBUTES all(char16 x);
int __CL_CONST_ATTRIBUTES all(short x);
int __CL_CONST_ATTRIBUTES all(short2 x);
int __CL_CONST_ATTRIBUTES all(short3 x);
int __CL_CONST_ATTRIBUTES all(short4 x);
int __CL_CONST_ATTRIBUTES all(short8 x);
int __CL_CONST_ATTRIBUTES all(short16 x);
int __CL_CONST_ATTRIBUTES all(int x);
int __CL_CONST_ATTRIBUTES all(int2 x);
int __CL_CONST_ATTRIBUTES all(int3 x);
int __CL_CONST_ATTRIBUTES all(int4 x);
int __CL_CONST_ATTRIBUTES all(int8 x);
int __CL_CONST_ATTRIBUTES all(int16 x);
int __CL_CONST_ATTRIBUTES all(long x);
int __CL_CONST_ATTRIBUTES all(long2 x);
int __CL_CONST_ATTRIBUTES all(long3 x);
int __CL_CONST_ATTRIBUTES all(long4 x);
int __CL_CONST_ATTRIBUTES all(long8 x);
int __CL_CONST_ATTRIBUTES all(long16 x);
char __CL_CONST_ATTRIBUTES select(char x, char y, char z);
char __CL_CONST_ATTRIBUTES select(char x, char y, uchar z);
uchar __CL_CONST_ATTRIBUTES select(uchar x, uchar y, char z);
uchar __CL_CONST_ATTRIBUTES select(uchar x, uchar y, uchar z);
char2 __CL_CONST_ATTRIBUTES select(char2 x, char2 y, char2 z);
char2 __CL_CONST_ATTRIBUTES select(char2 x, char2 y, uchar2 z);
uchar2 __CL_CONST_ATTRIBUTES select(uchar2 x, uchar2 y, char2 z);
uchar2 __CL_CONST_ATTRIBUTES select(uchar2 x, uchar2 y, uchar2 z);
char3 __CL_CONST_ATTRIBUTES select(char3 x, char3 y, char3 z);
char3 __CL_CONST_ATTRIBUTES select(char3 x, char3 y, uchar3 z);
uchar3 __CL_CONST_ATTRIBUTES select(uchar3 x, uchar3 y, char3 z);
uchar3 __CL_CONST_ATTRIBUTES select(uchar3 x, uchar3 y, uchar3 z);
char4 __CL_CONST_ATTRIBUTES select(char4 x, char4 y, char4 z);
char4 __CL_CONST_ATTRIBUTES select(char4 x, char4 y, uchar4 z);
uchar4 __CL_CONST_ATTRIBUTES select(uchar4 x, uchar4 y, char4 z);
uchar4 __CL_CONST_ATTRIBUTES select(uchar4 x, uchar4 y, uchar4 z);
char8 __CL_CONST_ATTRIBUTES select(char8 x, char8 y, char8 z);
char8 __CL_CONST_ATTRIBUTES select(char8 x, char8 y, uchar8 z);
uchar8 __CL_CONST_ATTRIBUTES select(uchar8 x, uchar8 y, char8 z);
uchar8 __CL_CONST_ATTRIBUTES select(uchar8 x, uchar8 y, uchar8 z);
char16 __CL_CONST_ATTRIBUTES select(char16 x, char16 y, char16 z);
char16 __CL_CONST_ATTRIBUTES select(char16 x, char16 y, uchar16 z);
uchar16 __CL_CONST_ATTRIBUTES select(uchar16 x, uchar16 y, char16 z);
uchar16 __CL_CONST_ATTRIBUTES select(uchar16 x, uchar16 y, uchar16 z);
short __CL_CONST_ATTRIBUTES select(short x, short y, short z);
short __CL_CONST_ATTRIBUTES select(short x, short y, ushort z);
ushort __CL_CONST_ATTRIBUTES select(ushort x, ushort y, short z);
ushort __CL_CONST_ATTRIBUTES select(ushort x, ushort y, ushort z);
short2 __CL_CONST_ATTRIBUTES select(short2 x, short2 y, short2 z);
short2 __CL_CONST_ATTRIBUTES select(short2 x, short2 y, ushort2 z);
ushort2 __CL_CONST_ATTRIBUTES select(ushort2 x, ushort2 y, short2 z);
ushort2 __CL_CONST_ATTRIBUTES select(ushort2 x, ushort2 y, ushort2 z);
short3 __CL_CONST_ATTRIBUTES select(short3 x, short3 y, short3 z);
short3 __CL_CONST_ATTRIBUTES select(short3 x, short3 y, ushort3 z);
ushort3 __CL_CONST_ATTRIBUTES select(ushort3 x, ushort3 y, short3 z);
ushort3 __CL_CONST_ATTRIBUTES select(ushort3 x, ushort3 y, ushort3 z);
short4 __CL_CONST_ATTRIBUTES select(short4 x, short4 y, short4 z);
short4 __CL_CONST_ATTRIBUTES select(short4 x, short4 y, ushort4 z);
ushort4 __CL_CONST_ATTRIBUTES select(ushort4 x, ushort4 y, short4 z);
ushort4 __CL_CONST_ATTRIBUTES select(ushort4 x, ushort4 y, ushort4 z);
short8 __CL_CONST_ATTRIBUTES select(short8 x, short8 y, short8 z);
short8 __CL_CONST_ATTRIBUTES select(short8 x, short8 y, ushort8 z);
ushort8 __CL_CONST_ATTRIBUTES select(ushort8 x, ushort8 y, short8 z);
ushort8 __CL_CONST_ATTRIBUTES select(ushort8 x, ushort8 y, ushort8 z);
short16 __CL_CONST_ATTRIBUTES select(short16 x, short16 y, short16 z);
short16 __CL_CONST_ATTRIBUTES select(short16 x, short16 y, ushort16 z);
ushort16 __CL_CONST_ATTRIBUTES select(ushort16 x, ushort16 y, short16 z);
ushort16 __CL_CONST_ATTRIBUTES select(ushort16 x, ushort16 y, ushort16 z);
int __CL_CONST_ATTRIBUTES select(int x, int y, int z);
int __CL_CONST_ATTRIBUTES select(int x, int y, uint z);
uint __CL_CONST_ATTRIBUTES select(uint x, uint y, int z);
uint __CL_CONST_ATTRIBUTES select(uint x, uint y, uint z);
int2 __CL_CONST_ATTRIBUTES select(int2 x, int2 y, int2 z);
int2 __CL_CONST_ATTRIBUTES select(int2 x, int2 y, uint2 z);
uint2 __CL_CONST_ATTRIBUTES select(uint2 x, uint2 y, int2 z);
uint2 __CL_CONST_ATTRIBUTES select(uint2 x, uint2 y, uint2 z);
int3 __CL_CONST_ATTRIBUTES select(int3 x, int3 y, int3 z);
int3 __CL_CONST_ATTRIBUTES select(int3 x, int3 y, uint3 z);
uint3 __CL_CONST_ATTRIBUTES select(uint3 x, uint3 y, int3 z);
uint3 __CL_CONST_ATTRIBUTES select(uint3 x, uint3 y, uint3 z);
int4 __CL_CONST_ATTRIBUTES select(int4 x, int4 y, int4 z);
int4 __CL_CONST_ATTRIBUTES select(int4 x, int4 y, uint4 z);
uint4 __CL_CONST_ATTRIBUTES select(uint4 x, uint4 y, int4 z);
uint4 __CL_CONST_ATTRIBUTES select(uint4 x, uint4 y, uint4 z);
int8 __CL_CONST_ATTRIBUTES select(int8 x, int8 y, int8 z);
int8 __CL_CONST_ATTRIBUTES select(int8 x, int8 y, uint8 z);
uint8 __CL_CONST_ATTRIBUTES select(uint8 x, uint8 y, int8 z);
uint8 __CL_CONST_ATTRIBUTES select(uint8 x, uint8 y, uint8 z);
int16 __CL_CONST_ATTRIBUTES select(int16 x, int16 y, int16 z);
int16 __CL_CONST_ATTRIBUTES select(int16 x, int16 y, uint16 z);
uint16 __CL_CONST_ATTRIBUTES select(uint16 x, uint16 y, int16 z);
uint16 __CL_CONST_ATTRIBUTES select(uint16 x, uint16 y, uint16 z);
long __CL_CONST_ATTRIBUTES select(long x, long y, long z);
long __CL_CONST_ATTRIBUTES select(long x, long y, ulong z);
ulong __CL_CONST_ATTRIBUTES select(ulong x, ulong y, long z);
ulong __CL_CONST_ATTRIBUTES select(ulong x, ulong y, ulong z);
long2 __CL_CONST_ATTRIBUTES select(long2 x, long2 y, long2 z);
long2 __CL_CONST_ATTRIBUTES select(long2 x, long2 y, ulong2 z);
ulong2 __CL_CONST_ATTRIBUTES select(ulong2 x, ulong2 y, long2 z);
ulong2 __CL_CONST_ATTRIBUTES select(ulong2 x, ulong2 y, ulong2 z);
long3 __CL_CONST_ATTRIBUTES select(long3 x, long3 y, long3 z);
long3 __CL_CONST_ATTRIBUTES select(long3 x, long3 y, ulong3 z);
ulong3 __CL_CONST_ATTRIBUTES select(ulong3 x, ulong3 y, long3 z);
ulong3 __CL_CONST_ATTRIBUTES select(ulong3 x, ulong3 y, ulong3 z);
long4 __CL_CONST_ATTRIBUTES select(long4 x, long4 y, long4 z);
long4 __CL_CONST_ATTRIBUTES select(long4 x, long4 y, ulong4 z);
ulong4 __CL_CONST_ATTRIBUTES select(ulong4 x, ulong4 y, long4 z);
ulong4 __CL_CONST_ATTRIBUTES select(ulong4 x, ulong4 y, ulong4 z);
long8 __CL_CONST_ATTRIBUTES select(long8 x, long8 y, long8 z);
long8 __CL_CONST_ATTRIBUTES select(long8 x, long8 y, ulong8 z);
ulong8 __CL_CONST_ATTRIBUTES select(ulong8 x, ulong8 y, long8 z);
ulong8 __CL_CONST_ATTRIBUTES select(ulong8 x, ulong8 y, ulong8 z);
long16 __CL_CONST_ATTRIBUTES select(long16 x, long16 y, long16 z);
long16 __CL_CONST_ATTRIBUTES select(long16 x, long16 y, ulong16 z);
ulong16 __CL_CONST_ATTRIBUTES select(ulong16 x, ulong16 y, long16 z);
ulong16 __CL_CONST_ATTRIBUTES select(ulong16 x, ulong16 y, ulong16 z);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES select(half x, half y, short z);
half __CL_CONST_ATTRIBUTES select(half x, half y, ushort z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES select(float x, float y, int z);
float __CL_CONST_ATTRIBUTES select(float x, float y, uint z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES select(double x, double y, long z);
double __CL_CONST_ATTRIBUTES select(double x, double y, ulong z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES select(half2 x, half2 y, short2 z);
half2 __CL_CONST_ATTRIBUTES select(half2 x, half2 y, ushort2 z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES select(float2 x, float2 y, int2 z);
float2 __CL_CONST_ATTRIBUTES select(float2 x, float2 y, uint2 z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES select(double2 x, double2 y, long2 z);
double2 __CL_CONST_ATTRIBUTES select(double2 x, double2 y, ulong2 z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES select(half3 x, half3 y, short3 z);
half3 __CL_CONST_ATTRIBUTES select(half3 x, half3 y, ushort3 z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float3 __CL_CONST_ATTRIBUTES select(float3 x, float3 y, int3 z);
float3 __CL_CONST_ATTRIBUTES select(float3 x, float3 y, uint3 z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES select(double3 x, double3 y, long3 z);
double3 __CL_CONST_ATTRIBUTES select(double3 x, double3 y, ulong3 z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES select(half4 x, half4 y, short4 z);
half4 __CL_CONST_ATTRIBUTES select(half4 x, half4 y, ushort4 z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES select(float4 x, float4 y, int4 z);
float4 __CL_CONST_ATTRIBUTES select(float4 x, float4 y, uint4 z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES select(double4 x, double4 y, long4 z);
double4 __CL_CONST_ATTRIBUTES select(double4 x, double4 y, ulong4 z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES select(half8 x, half8 y, short8 z);
half8 __CL_CONST_ATTRIBUTES select(half8 x, half8 y, ushort8 z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES select(float8 x, float8 y, int8 z);
float8 __CL_CONST_ATTRIBUTES select(float8 x, float8 y, uint8 z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES select(double8 x, double8 y, long8 z);
double8 __CL_CONST_ATTRIBUTES select(double8 x, double8 y, ulong8 z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES select(half16 x, half16 y, short16 z);
half16 __CL_CONST_ATTRIBUTES select(half16 x, half16 y, ushort16 z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float16 __CL_CONST_ATTRIBUTES select(float16 x, float16 y, int16 z);
float16 __CL_CONST_ATTRIBUTES select(float16 x, float16 y, uint16 z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES select(double16 x, double16 y, long16 z);
double16 __CL_CONST_ATTRIBUTES select(double16 x, double16 y, ulong16 z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

char2 __CL_CONST_ATTRIBUTES shuffle(char2 x, uchar2 m);
uchar2 __CL_CONST_ATTRIBUTES shuffle(uchar2 x, uchar2 m);
char4 __CL_CONST_ATTRIBUTES shuffle(char2 x, uchar4 m);
uchar4 __CL_CONST_ATTRIBUTES shuffle(uchar2 x, uchar4 m);
char8 __CL_CONST_ATTRIBUTES shuffle(char2 x, uchar8 m);
uchar8 __CL_CONST_ATTRIBUTES shuffle(uchar2 x, uchar8 m);
char16 __CL_CONST_ATTRIBUTES shuffle(char2 x, uchar16 m);
uchar16 __CL_CONST_ATTRIBUTES shuffle(uchar2 x, uchar16 m);
char2 __CL_CONST_ATTRIBUTES shuffle(char4 x, uchar2 m);
uchar2 __CL_CONST_ATTRIBUTES shuffle(uchar4 x, uchar2 m);
char4 __CL_CONST_ATTRIBUTES shuffle(char4 x, uchar4 m);
uchar4 __CL_CONST_ATTRIBUTES shuffle(uchar4 x, uchar4 m);
char8 __CL_CONST_ATTRIBUTES shuffle(char4 x, uchar8 m);
uchar8 __CL_CONST_ATTRIBUTES shuffle(uchar4 x, uchar8 m);
char16 __CL_CONST_ATTRIBUTES shuffle(char4 x, uchar16 m);
uchar16 __CL_CONST_ATTRIBUTES shuffle(uchar4 x, uchar16 m);
char2 __CL_CONST_ATTRIBUTES shuffle(char8 x, uchar2 m);
uchar2 __CL_CONST_ATTRIBUTES shuffle(uchar8 x, uchar2 m);
char4 __CL_CONST_ATTRIBUTES shuffle(char8 x, uchar4 m);
uchar4 __CL_CONST_ATTRIBUTES shuffle(uchar8 x, uchar4 m);
char8 __CL_CONST_ATTRIBUTES shuffle(char8 x, uchar8 m);
uchar8 __CL_CONST_ATTRIBUTES shuffle(uchar8 x, uchar8 m);
char16 __CL_CONST_ATTRIBUTES shuffle(char8 x, uchar16 m);
uchar16 __CL_CONST_ATTRIBUTES shuffle(uchar8 x, uchar16 m);
char2 __CL_CONST_ATTRIBUTES shuffle(char16 x, uchar2 m);
uchar2 __CL_CONST_ATTRIBUTES shuffle(uchar16 x, uchar2 m);
char4 __CL_CONST_ATTRIBUTES shuffle(char16 x, uchar4 m);
uchar4 __CL_CONST_ATTRIBUTES shuffle(uchar16 x, uchar4 m);
char8 __CL_CONST_ATTRIBUTES shuffle(char16 x, uchar8 m);
uchar8 __CL_CONST_ATTRIBUTES shuffle(uchar16 x, uchar8 m);
char16 __CL_CONST_ATTRIBUTES shuffle(char16 x, uchar16 m);
uchar16 __CL_CONST_ATTRIBUTES shuffle(uchar16 x, uchar16 m);
short2 __CL_CONST_ATTRIBUTES shuffle(short2 x, ushort2 m);
ushort2 __CL_CONST_ATTRIBUTES shuffle(ushort2 x, ushort2 m);
short4 __CL_CONST_ATTRIBUTES shuffle(short2 x, ushort4 m);
ushort4 __CL_CONST_ATTRIBUTES shuffle(ushort2 x, ushort4 m);
short8 __CL_CONST_ATTRIBUTES shuffle(short2 x, ushort8 m);
ushort8 __CL_CONST_ATTRIBUTES shuffle(ushort2 x, ushort8 m);
short16 __CL_CONST_ATTRIBUTES shuffle(short2 x, ushort16 m);
ushort16 __CL_CONST_ATTRIBUTES shuffle(ushort2 x, ushort16 m);
short2 __CL_CONST_ATTRIBUTES shuffle(short4 x, ushort2 m);
ushort2 __CL_CONST_ATTRIBUTES shuffle(ushort4 x, ushort2 m);
short4 __CL_CONST_ATTRIBUTES shuffle(short4 x, ushort4 m);
ushort4 __CL_CONST_ATTRIBUTES shuffle(ushort4 x, ushort4 m);
short8 __CL_CONST_ATTRIBUTES shuffle(short4 x, ushort8 m);
ushort8 __CL_CONST_ATTRIBUTES shuffle(ushort4 x, ushort8 m);
short16 __CL_CONST_ATTRIBUTES shuffle(short4 x, ushort16 m);
ushort16 __CL_CONST_ATTRIBUTES shuffle(ushort4 x, ushort16 m);
short2 __CL_CONST_ATTRIBUTES shuffle(short8 x, ushort2 m);
ushort2 __CL_CONST_ATTRIBUTES shuffle(ushort8 x, ushort2 m);
short4 __CL_CONST_ATTRIBUTES shuffle(short8 x, ushort4 m);
ushort4 __CL_CONST_ATTRIBUTES shuffle(ushort8 x, ushort4 m);
short8 __CL_CONST_ATTRIBUTES shuffle(short8 x, ushort8 m);
ushort8 __CL_CONST_ATTRIBUTES shuffle(ushort8 x, ushort8 m);
short16 __CL_CONST_ATTRIBUTES shuffle(short8 x, ushort16 m);
ushort16 __CL_CONST_ATTRIBUTES shuffle(ushort8 x, ushort16 m);
short2 __CL_CONST_ATTRIBUTES shuffle(short16 x, ushort2 m);
ushort2 __CL_CONST_ATTRIBUTES shuffle(ushort16 x, ushort2 m);
short4 __CL_CONST_ATTRIBUTES shuffle(short16 x, ushort4 m);
ushort4 __CL_CONST_ATTRIBUTES shuffle(ushort16 x, ushort4 m);
short8 __CL_CONST_ATTRIBUTES shuffle(short16 x, ushort8 m);
ushort8 __CL_CONST_ATTRIBUTES shuffle(ushort16 x, ushort8 m);
short16 __CL_CONST_ATTRIBUTES shuffle(short16 x, ushort16 m);
ushort16 __CL_CONST_ATTRIBUTES shuffle(ushort16 x, ushort16 m);
int2 __CL_CONST_ATTRIBUTES shuffle(int2 x, uint2 m);
uint2 __CL_CONST_ATTRIBUTES shuffle(uint2 x, uint2 m);
int4 __CL_CONST_ATTRIBUTES shuffle(int2 x, uint4 m);
uint4 __CL_CONST_ATTRIBUTES shuffle(uint2 x, uint4 m);
int8 __CL_CONST_ATTRIBUTES shuffle(int2 x, uint8 m);
uint8 __CL_CONST_ATTRIBUTES shuffle(uint2 x, uint8 m);
int16 __CL_CONST_ATTRIBUTES shuffle(int2 x, uint16 m);
uint16 __CL_CONST_ATTRIBUTES shuffle(uint2 x, uint16 m);
int2 __CL_CONST_ATTRIBUTES shuffle(int4 x, uint2 m);
uint2 __CL_CONST_ATTRIBUTES shuffle(uint4 x, uint2 m);
int4 __CL_CONST_ATTRIBUTES shuffle(int4 x, uint4 m);
uint4 __CL_CONST_ATTRIBUTES shuffle(uint4 x, uint4 m);
int8 __CL_CONST_ATTRIBUTES shuffle(int4 x, uint8 m);
uint8 __CL_CONST_ATTRIBUTES shuffle(uint4 x, uint8 m);
int16 __CL_CONST_ATTRIBUTES shuffle(int4 x, uint16 m);
uint16 __CL_CONST_ATTRIBUTES shuffle(uint4 x, uint16 m);
int2 __CL_CONST_ATTRIBUTES shuffle(int8 x, uint2 m);
uint2 __CL_CONST_ATTRIBUTES shuffle(uint8 x, uint2 m);
int4 __CL_CONST_ATTRIBUTES shuffle(int8 x, uint4 m);
uint4 __CL_CONST_ATTRIBUTES shuffle(uint8 x, uint4 m);
int8 __CL_CONST_ATTRIBUTES shuffle(int8 x, uint8 m);
uint8 __CL_CONST_ATTRIBUTES shuffle(uint8 x, uint8 m);
int16 __CL_CONST_ATTRIBUTES shuffle(int8 x, uint16 m);
uint16 __CL_CONST_ATTRIBUTES shuffle(uint8 x, uint16 m);
int2 __CL_CONST_ATTRIBUTES shuffle(int16 x, uint2 m);
uint2 __CL_CONST_ATTRIBUTES shuffle(uint16 x, uint2 m);
int4 __CL_CONST_ATTRIBUTES shuffle(int16 x, uint4 m);
uint4 __CL_CONST_ATTRIBUTES shuffle(uint16 x, uint4 m);
int8 __CL_CONST_ATTRIBUTES shuffle(int16 x, uint8 m);
uint8 __CL_CONST_ATTRIBUTES shuffle(uint16 x, uint8 m);
int16 __CL_CONST_ATTRIBUTES shuffle(int16 x, uint16 m);
uint16 __CL_CONST_ATTRIBUTES shuffle(uint16 x, uint16 m);
long2 __CL_CONST_ATTRIBUTES shuffle(long2 x, ulong2 m);
ulong2 __CL_CONST_ATTRIBUTES shuffle(ulong2 x, ulong2 m);
long4 __CL_CONST_ATTRIBUTES shuffle(long2 x, ulong4 m);
ulong4 __CL_CONST_ATTRIBUTES shuffle(ulong2 x, ulong4 m);
long8 __CL_CONST_ATTRIBUTES shuffle(long2 x, ulong8 m);
ulong8 __CL_CONST_ATTRIBUTES shuffle(ulong2 x, ulong8 m);
long16 __CL_CONST_ATTRIBUTES shuffle(long2 x, ulong16 m);
ulong16 __CL_CONST_ATTRIBUTES shuffle(ulong2 x, ulong16 m);
long2 __CL_CONST_ATTRIBUTES shuffle(long4 x, ulong2 m);
ulong2 __CL_CONST_ATTRIBUTES shuffle(ulong4 x, ulong2 m);
long4 __CL_CONST_ATTRIBUTES shuffle(long4 x, ulong4 m);
ulong4 __CL_CONST_ATTRIBUTES shuffle(ulong4 x, ulong4 m);
long8 __CL_CONST_ATTRIBUTES shuffle(long4 x, ulong8 m);
ulong8 __CL_CONST_ATTRIBUTES shuffle(ulong4 x, ulong8 m);
long16 __CL_CONST_ATTRIBUTES shuffle(long4 x, ulong16 m);
ulong16 __CL_CONST_ATTRIBUTES shuffle(ulong4 x, ulong16 m);
long2 __CL_CONST_ATTRIBUTES shuffle(long8 x, ulong2 m);
ulong2 __CL_CONST_ATTRIBUTES shuffle(ulong8 x, ulong2 m);
long4 __CL_CONST_ATTRIBUTES shuffle(long8 x, ulong4 m);
ulong4 __CL_CONST_ATTRIBUTES shuffle(ulong8 x, ulong4 m);
long8 __CL_CONST_ATTRIBUTES shuffle(long8 x, ulong8 m);
ulong8 __CL_CONST_ATTRIBUTES shuffle(ulong8 x, ulong8 m);
long16 __CL_CONST_ATTRIBUTES shuffle(long8 x, ulong16 m);
ulong16 __CL_CONST_ATTRIBUTES shuffle(ulong8 x, ulong16 m);
long2 __CL_CONST_ATTRIBUTES shuffle(long16 x, ulong2 m);
ulong2 __CL_CONST_ATTRIBUTES shuffle(ulong16 x, ulong2 m);
long4 __CL_CONST_ATTRIBUTES shuffle(long16 x, ulong4 m);
ulong4 __CL_CONST_ATTRIBUTES shuffle(ulong16 x, ulong4 m);
long8 __CL_CONST_ATTRIBUTES shuffle(long16 x, ulong8 m);
ulong8 __CL_CONST_ATTRIBUTES shuffle(ulong16 x, ulong8 m);
long16 __CL_CONST_ATTRIBUTES shuffle(long16 x, ulong16 m);
ulong16 __CL_CONST_ATTRIBUTES shuffle(ulong16 x, ulong16 m);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES shuffle(half2 x, ushort2 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES shuffle(float2 x, uint2 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES shuffle(double2 x, ulong2 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES shuffle(half2 x, ushort4 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES shuffle(float2 x, uint4 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES shuffle(double2 x, ulong4 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES shuffle(half2 x, ushort8 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES shuffle(float2 x, uint8 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES shuffle(double2 x, ulong8 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES shuffle(half2 x, ushort16 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float16 __CL_CONST_ATTRIBUTES shuffle(float2 x, uint16 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES shuffle(double2 x, ulong16 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES shuffle(half4 x, ushort2 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES shuffle(float4 x, uint2 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES shuffle(double4 x, ulong2 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES shuffle(half4 x, ushort4 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES shuffle(float4 x, uint4 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES shuffle(double4 x, ulong4 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES shuffle(half4 x, ushort8 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES shuffle(float4 x, uint8 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES shuffle(double4 x, ulong8 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES shuffle(half4 x, ushort16 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float16 __CL_CONST_ATTRIBUTES shuffle(float4 x, uint16 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES shuffle(double4 x, ulong16 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES shuffle(half8 x, ushort2 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES shuffle(float8 x, uint2 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES shuffle(double8 x, ulong2 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES shuffle(half8 x, ushort4 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES shuffle(float8 x, uint4 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES shuffle(double8 x, ulong4 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES shuffle(half8 x, ushort8 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES shuffle(float8 x, uint8 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES shuffle(double8 x, ulong8 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES shuffle(half8 x, ushort16 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float16 __CL_CONST_ATTRIBUTES shuffle(float8 x, uint16 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES shuffle(double8 x, ulong16 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES shuffle(half16 x, ushort2 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES shuffle(float16 x, uint2 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES shuffle(double16 x, ulong2 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES shuffle(half16 x, ushort4 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES shuffle(float16 x, uint4 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES shuffle(double16 x, ulong4 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES shuffle(half16 x, ushort8 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES shuffle(float16 x, uint8 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES shuffle(double16 x, ulong8 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES shuffle(half16 x, ushort16 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float16 __CL_CONST_ATTRIBUTES shuffle(float16 x, uint16 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES shuffle(double16 x, ulong16 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
char2 __CL_CONST_ATTRIBUTES shuffle2(char2 x, char2 y, uchar2 m);
uchar2 __CL_CONST_ATTRIBUTES shuffle2(uchar2 x, uchar2 y, uchar2 m);
char4 __CL_CONST_ATTRIBUTES shuffle2(char2 x, char2 y, uchar4 m);
uchar4 __CL_CONST_ATTRIBUTES shuffle2(uchar2 x, uchar2 y, uchar4 m);
char8 __CL_CONST_ATTRIBUTES shuffle2(char2 x, char2 y, uchar8 m);
uchar8 __CL_CONST_ATTRIBUTES shuffle2(uchar2 x, uchar2 y, uchar8 m);
char16 __CL_CONST_ATTRIBUTES shuffle2(char2 x, char2 y, uchar16 m);
uchar16 __CL_CONST_ATTRIBUTES shuffle2(uchar2 x, uchar2 y, uchar16 m);
char2 __CL_CONST_ATTRIBUTES shuffle2(char4 x, char4 y, uchar2 m);
uchar2 __CL_CONST_ATTRIBUTES shuffle2(uchar4 x, uchar4 y, uchar2 m);
char4 __CL_CONST_ATTRIBUTES shuffle2(char4 x, char4 y, uchar4 m);
uchar4 __CL_CONST_ATTRIBUTES shuffle2(uchar4 x, uchar4 y, uchar4 m);
char8 __CL_CONST_ATTRIBUTES shuffle2(char4 x, char4 y, uchar8 m);
uchar8 __CL_CONST_ATTRIBUTES shuffle2(uchar4 x, uchar4 y, uchar8 m);
char16 __CL_CONST_ATTRIBUTES shuffle2(char4 x, char4 y, uchar16 m);
uchar16 __CL_CONST_ATTRIBUTES shuffle2(uchar4 x, uchar4 y, uchar16 m);
char2 __CL_CONST_ATTRIBUTES shuffle2(char8 x, char8 y, uchar2 m);
uchar2 __CL_CONST_ATTRIBUTES shuffle2(uchar8 x, uchar8 y, uchar2 m);
char4 __CL_CONST_ATTRIBUTES shuffle2(char8 x, char8 y, uchar4 m);
uchar4 __CL_CONST_ATTRIBUTES shuffle2(uchar8 x, uchar8 y, uchar4 m);
char8 __CL_CONST_ATTRIBUTES shuffle2(char8 x, char8 y, uchar8 m);
uchar8 __CL_CONST_ATTRIBUTES shuffle2(uchar8 x, uchar8 y, uchar8 m);
char16 __CL_CONST_ATTRIBUTES shuffle2(char8 x, char8 y, uchar16 m);
uchar16 __CL_CONST_ATTRIBUTES shuffle2(uchar8 x, uchar8 y, uchar16 m);
char2 __CL_CONST_ATTRIBUTES shuffle2(char16 x, char16 y, uchar2 m);
uchar2 __CL_CONST_ATTRIBUTES shuffle2(uchar16 x, uchar16 y, uchar2 m);
char4 __CL_CONST_ATTRIBUTES shuffle2(char16 x, char16 y, uchar4 m);
uchar4 __CL_CONST_ATTRIBUTES shuffle2(uchar16 x, uchar16 y, uchar4 m);
char8 __CL_CONST_ATTRIBUTES shuffle2(char16 x, char16 y, uchar8 m);
uchar8 __CL_CONST_ATTRIBUTES shuffle2(uchar16 x, uchar16 y, uchar8 m);
char16 __CL_CONST_ATTRIBUTES shuffle2(char16 x, char16 y, uchar16 m);
uchar16 __CL_CONST_ATTRIBUTES shuffle2(uchar16 x, uchar16 y, uchar16 m);
short2 __CL_CONST_ATTRIBUTES shuffle2(short2 x, short2 y, ushort2 m);
ushort2 __CL_CONST_ATTRIBUTES shuffle2(ushort2 x, ushort2 y, ushort2 m);
short4 __CL_CONST_ATTRIBUTES shuffle2(short2 x, short2 y, ushort4 m);
ushort4 __CL_CONST_ATTRIBUTES shuffle2(ushort2 x, ushort2 y, ushort4 m);
short8 __CL_CONST_ATTRIBUTES shuffle2(short2 x, short2 y, ushort8 m);
ushort8 __CL_CONST_ATTRIBUTES shuffle2(ushort2 x, ushort2 y, ushort8 m);
short16 __CL_CONST_ATTRIBUTES shuffle2(short2 x, short2 y, ushort16 m);
ushort16 __CL_CONST_ATTRIBUTES shuffle2(ushort2 x, ushort2 y, ushort16 m);
short2 __CL_CONST_ATTRIBUTES shuffle2(short4 x, short4 y, ushort2 m);
ushort2 __CL_CONST_ATTRIBUTES shuffle2(ushort4 x, ushort4 y, ushort2 m);
short4 __CL_CONST_ATTRIBUTES shuffle2(short4 x, short4 y, ushort4 m);
ushort4 __CL_CONST_ATTRIBUTES shuffle2(ushort4 x, ushort4 y, ushort4 m);
short8 __CL_CONST_ATTRIBUTES shuffle2(short4 x, short4 y, ushort8 m);
ushort8 __CL_CONST_ATTRIBUTES shuffle2(ushort4 x, ushort4 y, ushort8 m);
short16 __CL_CONST_ATTRIBUTES shuffle2(short4 x, short4 y, ushort16 m);
ushort16 __CL_CONST_ATTRIBUTES shuffle2(ushort4 x, ushort4 y, ushort16 m);
short2 __CL_CONST_ATTRIBUTES shuffle2(short8 x, short8 y, ushort2 m);
ushort2 __CL_CONST_ATTRIBUTES shuffle2(ushort8 x, ushort8 y, ushort2 m);
short4 __CL_CONST_ATTRIBUTES shuffle2(short8 x, short8 y, ushort4 m);
ushort4 __CL_CONST_ATTRIBUTES shuffle2(ushort8 x, ushort8 y, ushort4 m);
short8 __CL_CONST_ATTRIBUTES shuffle2(short8 x, short8 y, ushort8 m);
ushort8 __CL_CONST_ATTRIBUTES shuffle2(ushort8 x, ushort8 y, ushort8 m);
short16 __CL_CONST_ATTRIBUTES shuffle2(short8 x, short8 y, ushort16 m);
ushort16 __CL_CONST_ATTRIBUTES shuffle2(ushort8 x, ushort8 y, ushort16 m);
short2 __CL_CONST_ATTRIBUTES shuffle2(short16 x, short16 y, ushort2 m);
ushort2 __CL_CONST_ATTRIBUTES shuffle2(ushort16 x, ushort16 y, ushort2 m);
short4 __CL_CONST_ATTRIBUTES shuffle2(short16 x, short16 y, ushort4 m);
ushort4 __CL_CONST_ATTRIBUTES shuffle2(ushort16 x, ushort16 y, ushort4 m);
short8 __CL_CONST_ATTRIBUTES shuffle2(short16 x, short16 y, ushort8 m);
ushort8 __CL_CONST_ATTRIBUTES shuffle2(ushort16 x, ushort16 y, ushort8 m);
short16 __CL_CONST_ATTRIBUTES shuffle2(short16 x, short16 y, ushort16 m);
ushort16 __CL_CONST_ATTRIBUTES shuffle2(ushort16 x, ushort16 y, ushort16 m);
int2 __CL_CONST_ATTRIBUTES shuffle2(int2 x, int2 y, uint2 m);
uint2 __CL_CONST_ATTRIBUTES shuffle2(uint2 x, uint2 y, uint2 m);
int4 __CL_CONST_ATTRIBUTES shuffle2(int2 x, int2 y, uint4 m);
uint4 __CL_CONST_ATTRIBUTES shuffle2(uint2 x, uint2 y, uint4 m);
int8 __CL_CONST_ATTRIBUTES shuffle2(int2 x, int2 y, uint8 m);
uint8 __CL_CONST_ATTRIBUTES shuffle2(uint2 x, uint2 y, uint8 m);
int16 __CL_CONST_ATTRIBUTES shuffle2(int2 x, int2 y, uint16 m);
uint16 __CL_CONST_ATTRIBUTES shuffle2(uint2 x, uint2 y, uint16 m);
int2 __CL_CONST_ATTRIBUTES shuffle2(int4 x, int4 y, uint2 m);
uint2 __CL_CONST_ATTRIBUTES shuffle2(uint4 x, uint4 y, uint2 m);
int4 __CL_CONST_ATTRIBUTES shuffle2(int4 x, int4 y, uint4 m);
uint4 __CL_CONST_ATTRIBUTES shuffle2(uint4 x, uint4 y, uint4 m);
int8 __CL_CONST_ATTRIBUTES shuffle2(int4 x, int4 y, uint8 m);
uint8 __CL_CONST_ATTRIBUTES shuffle2(uint4 x, uint4 y, uint8 m);
int16 __CL_CONST_ATTRIBUTES shuffle2(int4 x, int4 y, uint16 m);
uint16 __CL_CONST_ATTRIBUTES shuffle2(uint4 x, uint4 y, uint16 m);
int2 __CL_CONST_ATTRIBUTES shuffle2(int8 x, int8 y, uint2 m);
uint2 __CL_CONST_ATTRIBUTES shuffle2(uint8 x, uint8 y, uint2 m);
int4 __CL_CONST_ATTRIBUTES shuffle2(int8 x, int8 y, uint4 m);
uint4 __CL_CONST_ATTRIBUTES shuffle2(uint8 x, uint8 y, uint4 m);
int8 __CL_CONST_ATTRIBUTES shuffle2(int8 x, int8 y, uint8 m);
uint8 __CL_CONST_ATTRIBUTES shuffle2(uint8 x, uint8 y, uint8 m);
int16 __CL_CONST_ATTRIBUTES shuffle2(int8 x, int8 y, uint16 m);
uint16 __CL_CONST_ATTRIBUTES shuffle2(uint8 x, uint8 y, uint16 m);
int2 __CL_CONST_ATTRIBUTES shuffle2(int16 x, int16 y, uint2 m);
uint2 __CL_CONST_ATTRIBUTES shuffle2(uint16 x, uint16 y, uint2 m);
int4 __CL_CONST_ATTRIBUTES shuffle2(int16 x, int16 y, uint4 m);
uint4 __CL_CONST_ATTRIBUTES shuffle2(uint16 x, uint16 y, uint4 m);
int8 __CL_CONST_ATTRIBUTES shuffle2(int16 x, int16 y, uint8 m);
uint8 __CL_CONST_ATTRIBUTES shuffle2(uint16 x, uint16 y, uint8 m);
int16 __CL_CONST_ATTRIBUTES shuffle2(int16 x, int16 y, uint16 m);
uint16 __CL_CONST_ATTRIBUTES shuffle2(uint16 x, uint16 y, uint16 m);
long2 __CL_CONST_ATTRIBUTES shuffle2(long2 x, long2 y, ulong2 m);
ulong2 __CL_CONST_ATTRIBUTES shuffle2(ulong2 x, ulong2 y, ulong2 m);
long4 __CL_CONST_ATTRIBUTES shuffle2(long2 x, long2 y, ulong4 m);
ulong4 __CL_CONST_ATTRIBUTES shuffle2(ulong2 x, ulong2 y, ulong4 m);
long8 __CL_CONST_ATTRIBUTES shuffle2(long2 x, long2 y, ulong8 m);
ulong8 __CL_CONST_ATTRIBUTES shuffle2(ulong2 x, ulong2 y, ulong8 m);
long16 __CL_CONST_ATTRIBUTES shuffle2(long2 x, long2 y, ulong16 m);
ulong16 __CL_CONST_ATTRIBUTES shuffle2(ulong2 x, ulong2 y, ulong16 m);
long2 __CL_CONST_ATTRIBUTES shuffle2(long4 x, long4 y, ulong2 m);
ulong2 __CL_CONST_ATTRIBUTES shuffle2(ulong4 x, ulong4 y, ulong2 m);
long4 __CL_CONST_ATTRIBUTES shuffle2(long4 x, long4 y, ulong4 m);
ulong4 __CL_CONST_ATTRIBUTES shuffle2(ulong4 x, ulong4 y, ulong4 m);
long8 __CL_CONST_ATTRIBUTES shuffle2(long4 x, long4 y, ulong8 m);
ulong8 __CL_CONST_ATTRIBUTES shuffle2(ulong4 x, ulong4 y, ulong8 m);
long16 __CL_CONST_ATTRIBUTES shuffle2(long4 x, long4 y, ulong16 m);
ulong16 __CL_CONST_ATTRIBUTES shuffle2(ulong4 x, ulong4 y, ulong16 m);
long2 __CL_CONST_ATTRIBUTES shuffle2(long8 x, long8 y, ulong2 m);
ulong2 __CL_CONST_ATTRIBUTES shuffle2(ulong8 x, ulong8 y, ulong2 m);
long4 __CL_CONST_ATTRIBUTES shuffle2(long8 x, long8 y, ulong4 m);
ulong4 __CL_CONST_ATTRIBUTES shuffle2(ulong8 x, ulong8 y, ulong4 m);
long8 __CL_CONST_ATTRIBUTES shuffle2(long8 x, long8 y, ulong8 m);
ulong8 __CL_CONST_ATTRIBUTES shuffle2(ulong8 x, ulong8 y, ulong8 m);
long16 __CL_CONST_ATTRIBUTES shuffle2(long8 x, long8 y, ulong16 m);
ulong16 __CL_CONST_ATTRIBUTES shuffle2(ulong8 x, ulong8 y, ulong16 m);
long2 __CL_CONST_ATTRIBUTES shuffle2(long16 x, long16 y, ulong2 m);
ulong2 __CL_CONST_ATTRIBUTES shuffle2(ulong16 x, ulong16 y, ulong2 m);
long4 __CL_CONST_ATTRIBUTES shuffle2(long16 x, long16 y, ulong4 m);
ulong4 __CL_CONST_ATTRIBUTES shuffle2(ulong16 x, ulong16 y, ulong4 m);
long8 __CL_CONST_ATTRIBUTES shuffle2(long16 x, long16 y, ulong8 m);
ulong8 __CL_CONST_ATTRIBUTES shuffle2(ulong16 x, ulong16 y, ulong8 m);
long16 __CL_CONST_ATTRIBUTES shuffle2(long16 x, long16 y, ulong16 m);
ulong16 __CL_CONST_ATTRIBUTES shuffle2(ulong16 x, ulong16 y, ulong16 m);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES shuffle2(half2 x, half2 y, ushort2 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES shuffle2(float2 x, float2 y, uint2 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES shuffle2(double2 x, double2 y, ulong2 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES shuffle2(half2 x, half2 y, ushort4 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES shuffle2(float2 x, float2 y, uint4 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES shuffle2(double2 x, double2 y, ulong4 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES shuffle2(half2 x, half2 y, ushort8 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES shuffle2(float2 x, float2 y, uint8 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES shuffle2(double2 x, double2 y, ulong8 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES shuffle2(half2 x, half2 y, ushort16 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float16 __CL_CONST_ATTRIBUTES shuffle2(float2 x, float2 y, uint16 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES shuffle2(double2 x, double2 y, ulong16 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES shuffle2(half4 x, half4 y, ushort2 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES shuffle2(float4 x, float4 y, uint2 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES shuffle2(double4 x, double4 y, ulong2 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES shuffle2(half4 x, half4 y, ushort4 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES shuffle2(float4 x, float4 y, uint4 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES shuffle2(double4 x, double4 y, ulong4 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES shuffle2(half4 x, half4 y, ushort8 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES shuffle2(float4 x, float4 y, uint8 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES shuffle2(double4 x, double4 y, ulong8 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES shuffle2(half4 x, half4 y, ushort16 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float16 __CL_CONST_ATTRIBUTES shuffle2(float4 x, float4 y, uint16 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES shuffle2(double4 x, double4 y, ulong16 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES shuffle2(half8 x, half8 y, ushort2 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES shuffle2(float8 x, float8 y, uint2 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES shuffle2(double8 x, double8 y, ulong2 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES shuffle2(half8 x, half8 y, ushort4 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES shuffle2(float8 x, float8 y, uint4 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES shuffle2(double8 x, double8 y, ulong4 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES shuffle2(half8 x, half8 y, ushort8 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES shuffle2(float8 x, float8 y, uint8 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES shuffle2(double8 x, double8 y, ulong8 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES shuffle2(half8 x, half8 y, ushort16 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float16 __CL_CONST_ATTRIBUTES shuffle2(float8 x, float8 y, uint16 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES shuffle2(double8 x, double8 y, ulong16 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES shuffle2(half16 x, half16 y, ushort2 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES shuffle2(float16 x, float16 y, uint2 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_CONST_ATTRIBUTES shuffle2(double16 x, double16 y, ulong2 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES shuffle2(half16 x, half16 y, ushort4 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES shuffle2(float16 x, float16 y, uint4 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double4 __CL_CONST_ATTRIBUTES shuffle2(double16 x, double16 y, ulong4 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half8 __CL_CONST_ATTRIBUTES shuffle2(half16 x, half16 y, ushort8 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float8 __CL_CONST_ATTRIBUTES shuffle2(float16 x, float16 y, uint8 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double8 __CL_CONST_ATTRIBUTES shuffle2(double16 x, double16 y, ulong8 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half16 __CL_CONST_ATTRIBUTES shuffle2(half16 x, half16 y, ushort16 m);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float16 __CL_CONST_ATTRIBUTES shuffle2(float16 x, float16 y, uint16 m);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double16 __CL_CONST_ATTRIBUTES shuffle2(double16 x, double16 y, ulong16 m);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

int __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile int global* p);
int __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile int global* p);
int __CL_BUILTIN_ATTRIBUTES atom_dec(volatile int global* p);
int __CL_BUILTIN_ATTRIBUTES atom_inc(volatile int global* p);
int __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile int local* p);
int __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile int local* p);
int __CL_BUILTIN_ATTRIBUTES atom_dec(volatile int local* p);
int __CL_BUILTIN_ATTRIBUTES atom_inc(volatile int local* p);
uint __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile uint global* p);
uint __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile uint global* p);
uint __CL_BUILTIN_ATTRIBUTES atom_dec(volatile uint global* p);
uint __CL_BUILTIN_ATTRIBUTES atom_inc(volatile uint global* p);
uint __CL_BUILTIN_ATTRIBUTES atomic_dec(volatile uint local* p);
uint __CL_BUILTIN_ATTRIBUTES atomic_inc(volatile uint local* p);
uint __CL_BUILTIN_ATTRIBUTES atom_dec(volatile uint local* p);
uint __CL_BUILTIN_ATTRIBUTES atom_inc(volatile uint local* p);
int __CL_BUILTIN_ATTRIBUTES atomic_add(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_min(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_max(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_and(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_or(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_add(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_sub(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_min(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_max(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_and(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_or(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xor(volatile int global* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_add(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_min(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_max(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_and(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_or(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_add(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_sub(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_min(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_max(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_and(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_or(volatile int local* p, int val);
int __CL_BUILTIN_ATTRIBUTES atom_xor(volatile int local* p, int val);
uint __CL_BUILTIN_ATTRIBUTES atomic_add(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_min(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_max(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_and(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_or(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_add(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_sub(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_min(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_max(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_and(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_or(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xor(volatile uint global* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_add(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_sub(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_min(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_max(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_and(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_or(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_xor(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_add(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_sub(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_min(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_max(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_and(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_or(volatile uint local* p, uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_xor(volatile uint local* p, uint val);
float __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile float global* p, float val);
float __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile float global* p, float val);
float __CL_BUILTIN_ATTRIBUTES atomic_xchg(volatile float local* p, float val);
float __CL_BUILTIN_ATTRIBUTES atom_xchg(volatile float local* p, float val);
int __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile int global* p, int cmp,
                                           int val);
int __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile int global* p, int cmp,
                                         int val);
int __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile int local* p, int cmp,
                                           int val);
int __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile int local* p, int cmp,
                                         int val);
uint __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile uint global* p, uint cmp,
                                            uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile uint global* p, uint cmp,
                                          uint val);
uint __CL_BUILTIN_ATTRIBUTES atomic_cmpxchg(volatile uint local* p, uint cmp,
                                            uint val);
uint __CL_BUILTIN_ATTRIBUTES atom_cmpxchg(volatile uint local* p, uint cmp,
                                          uint val);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

void __CL_BARRIER_ATTRIBUTES barrier(cl_mem_fence_flags flags);
void __CL_BUILTIN_ATTRIBUTES mem_fence(cl_mem_fence_flags flags);
void __CL_BUILTIN_ATTRIBUTES read_mem_fence(cl_mem_fence_flags flags);
void __CL_BUILTIN_ATTRIBUTES write_mem_fence(cl_mem_fence_flags flags);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

size_t __CL_WORK_ITEM_ATTRIBUTES get_global_size(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_global_id(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_local_size(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_local_id(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_num_groups(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_group_id(uint x);
size_t __CL_WORK_ITEM_ATTRIBUTES get_global_offset(uint x);
uint __CL_WORK_ITEM_ATTRIBUTES get_work_dim(void);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES degrees(half x);
half __CL_CONST_ATTRIBUTES radians(half x);
half __CL_CONST_ATTRIBUTES sign(half x);
half2 __CL_CONST_ATTRIBUTES degrees(half2 x);
half2 __CL_CONST_ATTRIBUTES radians(half2 x);
half2 __CL_CONST_ATTRIBUTES sign(half2 x);
half3 __CL_CONST_ATTRIBUTES degrees(half3 x);
half3 __CL_CONST_ATTRIBUTES radians(half3 x);
half3 __CL_CONST_ATTRIBUTES sign(half3 x);
half4 __CL_CONST_ATTRIBUTES degrees(half4 x);
half4 __CL_CONST_ATTRIBUTES radians(half4 x);
half4 __CL_CONST_ATTRIBUTES sign(half4 x);
half8 __CL_CONST_ATTRIBUTES degrees(half8 x);
half8 __CL_CONST_ATTRIBUTES radians(half8 x);
half8 __CL_CONST_ATTRIBUTES sign(half8 x);
half16 __CL_CONST_ATTRIBUTES degrees(half16 x);
half16 __CL_CONST_ATTRIBUTES radians(half16 x);
half16 __CL_CONST_ATTRIBUTES sign(half16 x);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES degrees(float x);
float __CL_CONST_ATTRIBUTES radians(float x);
float __CL_CONST_ATTRIBUTES sign(float x);
float2 __CL_CONST_ATTRIBUTES degrees(float2 x);
float2 __CL_CONST_ATTRIBUTES radians(float2 x);
float2 __CL_CONST_ATTRIBUTES sign(float2 x);
float3 __CL_CONST_ATTRIBUTES degrees(float3 x);
float3 __CL_CONST_ATTRIBUTES radians(float3 x);
float3 __CL_CONST_ATTRIBUTES sign(float3 x);
float4 __CL_CONST_ATTRIBUTES degrees(float4 x);
float4 __CL_CONST_ATTRIBUTES radians(float4 x);
float4 __CL_CONST_ATTRIBUTES sign(float4 x);
float8 __CL_CONST_ATTRIBUTES degrees(float8 x);
float8 __CL_CONST_ATTRIBUTES radians(float8 x);
float8 __CL_CONST_ATTRIBUTES sign(float8 x);
float16 __CL_CONST_ATTRIBUTES degrees(float16 x);
float16 __CL_CONST_ATTRIBUTES radians(float16 x);
float16 __CL_CONST_ATTRIBUTES sign(float16 x);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES degrees(double x);
double __CL_CONST_ATTRIBUTES radians(double x);
double __CL_CONST_ATTRIBUTES sign(double x);
double2 __CL_CONST_ATTRIBUTES degrees(double2 x);
double2 __CL_CONST_ATTRIBUTES radians(double2 x);
double2 __CL_CONST_ATTRIBUTES sign(double2 x);
double3 __CL_CONST_ATTRIBUTES degrees(double3 x);
double3 __CL_CONST_ATTRIBUTES radians(double3 x);
double3 __CL_CONST_ATTRIBUTES sign(double3 x);
double4 __CL_CONST_ATTRIBUTES degrees(double4 x);
double4 __CL_CONST_ATTRIBUTES radians(double4 x);
double4 __CL_CONST_ATTRIBUTES sign(double4 x);
double8 __CL_CONST_ATTRIBUTES degrees(double8 x);
double8 __CL_CONST_ATTRIBUTES radians(double8 x);
double8 __CL_CONST_ATTRIBUTES sign(double8 x);
double16 __CL_CONST_ATTRIBUTES degrees(double16 x);
double16 __CL_CONST_ATTRIBUTES radians(double16 x);
double16 __CL_CONST_ATTRIBUTES sign(double16 x);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES max(half x, half y);
half __CL_CONST_ATTRIBUTES min(half x, half y);
half __CL_CONST_ATTRIBUTES step(half x, half y);
half2 __CL_CONST_ATTRIBUTES max(half2 x, half y);
half2 __CL_CONST_ATTRIBUTES max(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES min(half2 x, half y);
half2 __CL_CONST_ATTRIBUTES min(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES step(half x, half2 y);
half2 __CL_CONST_ATTRIBUTES step(half2 x, half2 y);
half3 __CL_CONST_ATTRIBUTES max(half3 x, half y);
half3 __CL_CONST_ATTRIBUTES max(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES min(half3 x, half y);
half3 __CL_CONST_ATTRIBUTES min(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES step(half x, half3 y);
half3 __CL_CONST_ATTRIBUTES step(half3 x, half3 y);
half4 __CL_CONST_ATTRIBUTES max(half4 x, half y);
half4 __CL_CONST_ATTRIBUTES max(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES min(half4 x, half y);
half4 __CL_CONST_ATTRIBUTES min(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES step(half x, half4 y);
half4 __CL_CONST_ATTRIBUTES step(half4 x, half4 y);
half8 __CL_CONST_ATTRIBUTES max(half8 x, half y);
half8 __CL_CONST_ATTRIBUTES max(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES min(half8 x, half y);
half8 __CL_CONST_ATTRIBUTES min(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES step(half x, half8 y);
half8 __CL_CONST_ATTRIBUTES step(half8 x, half8 y);
half16 __CL_CONST_ATTRIBUTES max(half16 x, half y);
half16 __CL_CONST_ATTRIBUTES max(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES min(half16 x, half y);
half16 __CL_CONST_ATTRIBUTES min(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES step(half x, half16 y);
half16 __CL_CONST_ATTRIBUTES step(half16 x, half16 y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES max(float x, float y);
float __CL_CONST_ATTRIBUTES min(float x, float y);
float __CL_CONST_ATTRIBUTES step(float x, float y);
float2 __CL_CONST_ATTRIBUTES max(float2 x, float y);
float2 __CL_CONST_ATTRIBUTES max(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES min(float2 x, float y);
float2 __CL_CONST_ATTRIBUTES min(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES step(float x, float2 y);
float2 __CL_CONST_ATTRIBUTES step(float2 x, float2 y);
float3 __CL_CONST_ATTRIBUTES max(float3 x, float y);
float3 __CL_CONST_ATTRIBUTES max(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES min(float3 x, float y);
float3 __CL_CONST_ATTRIBUTES min(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES step(float x, float3 y);
float3 __CL_CONST_ATTRIBUTES step(float3 x, float3 y);
float4 __CL_CONST_ATTRIBUTES max(float4 x, float y);
float4 __CL_CONST_ATTRIBUTES max(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES min(float4 x, float y);
float4 __CL_CONST_ATTRIBUTES min(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES step(float x, float4 y);
float4 __CL_CONST_ATTRIBUTES step(float4 x, float4 y);
float8 __CL_CONST_ATTRIBUTES max(float8 x, float y);
float8 __CL_CONST_ATTRIBUTES max(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES min(float8 x, float y);
float8 __CL_CONST_ATTRIBUTES min(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES step(float x, float8 y);
float8 __CL_CONST_ATTRIBUTES step(float8 x, float8 y);
float16 __CL_CONST_ATTRIBUTES max(float16 x, float y);
float16 __CL_CONST_ATTRIBUTES max(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES min(float16 x, float y);
float16 __CL_CONST_ATTRIBUTES min(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES step(float x, float16 y);
float16 __CL_CONST_ATTRIBUTES step(float16 x, float16 y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES max(double x, double y);
double __CL_CONST_ATTRIBUTES min(double x, double y);
double __CL_CONST_ATTRIBUTES step(double x, double y);
double2 __CL_CONST_ATTRIBUTES max(double2 x, double y);
double2 __CL_CONST_ATTRIBUTES max(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES min(double2 x, double y);
double2 __CL_CONST_ATTRIBUTES min(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES step(double x, double2 y);
double2 __CL_CONST_ATTRIBUTES step(double2 x, double2 y);
double3 __CL_CONST_ATTRIBUTES max(double3 x, double y);
double3 __CL_CONST_ATTRIBUTES max(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES min(double3 x, double y);
double3 __CL_CONST_ATTRIBUTES min(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES step(double x, double3 y);
double3 __CL_CONST_ATTRIBUTES step(double3 x, double3 y);
double4 __CL_CONST_ATTRIBUTES max(double4 x, double y);
double4 __CL_CONST_ATTRIBUTES max(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES min(double4 x, double y);
double4 __CL_CONST_ATTRIBUTES min(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES step(double x, double4 y);
double4 __CL_CONST_ATTRIBUTES step(double4 x, double4 y);
double8 __CL_CONST_ATTRIBUTES max(double8 x, double y);
double8 __CL_CONST_ATTRIBUTES max(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES min(double8 x, double y);
double8 __CL_CONST_ATTRIBUTES min(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES step(double x, double8 y);
double8 __CL_CONST_ATTRIBUTES step(double8 x, double8 y);
double16 __CL_CONST_ATTRIBUTES max(double16 x, double y);
double16 __CL_CONST_ATTRIBUTES max(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES min(double16 x, double y);
double16 __CL_CONST_ATTRIBUTES min(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES step(double x, double16 y);
double16 __CL_CONST_ATTRIBUTES step(double16 x, double16 y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES clamp(half x, half y, half z);
half __CL_CONST_ATTRIBUTES mix(half x, half y, half z);
half __CL_CONST_ATTRIBUTES smoothstep(half x, half y, half z);
half2 __CL_CONST_ATTRIBUTES clamp(half2 x, half y, half z);
half2 __CL_CONST_ATTRIBUTES clamp(half2 x, half2 y, half2 z);
half2 __CL_CONST_ATTRIBUTES mix(half2 x, half y, half z);
half2 __CL_CONST_ATTRIBUTES mix(half2 x, half2 y, half2 z);
half2 __CL_CONST_ATTRIBUTES smoothstep(half x, half y, half2 z);
half2 __CL_CONST_ATTRIBUTES smoothstep(half2 x, half2 y, half2 z);
half3 __CL_CONST_ATTRIBUTES clamp(half3 x, half y, half z);
half3 __CL_CONST_ATTRIBUTES clamp(half3 x, half3 y, half3 z);
half3 __CL_CONST_ATTRIBUTES mix(half3 x, half y, half z);
half3 __CL_CONST_ATTRIBUTES mix(half3 x, half3 y, half3 z);
half3 __CL_CONST_ATTRIBUTES smoothstep(half x, half y, half3 z);
half3 __CL_CONST_ATTRIBUTES smoothstep(half3 x, half3 y, half3 z);
half4 __CL_CONST_ATTRIBUTES clamp(half4 x, half y, half z);
half4 __CL_CONST_ATTRIBUTES clamp(half4 x, half4 y, half4 z);
half4 __CL_CONST_ATTRIBUTES mix(half4 x, half y, half z);
half4 __CL_CONST_ATTRIBUTES mix(half4 x, half4 y, half4 z);
half4 __CL_CONST_ATTRIBUTES smoothstep(half x, half y, half4 z);
half4 __CL_CONST_ATTRIBUTES smoothstep(half4 x, half4 y, half4 z);
half8 __CL_CONST_ATTRIBUTES clamp(half8 x, half y, half z);
half8 __CL_CONST_ATTRIBUTES clamp(half8 x, half8 y, half8 z);
half8 __CL_CONST_ATTRIBUTES mix(half8 x, half y, half z);
half8 __CL_CONST_ATTRIBUTES mix(half8 x, half8 y, half8 z);
half8 __CL_CONST_ATTRIBUTES smoothstep(half x, half y, half8 z);
half8 __CL_CONST_ATTRIBUTES smoothstep(half8 x, half8 y, half8 z);
half16 __CL_CONST_ATTRIBUTES clamp(half16 x, half y, half z);
half16 __CL_CONST_ATTRIBUTES clamp(half16 x, half16 y, half16 z);
half16 __CL_CONST_ATTRIBUTES mix(half16 x, half y, half z);
half16 __CL_CONST_ATTRIBUTES mix(half16 x, half16 y, half16 z);
half16 __CL_CONST_ATTRIBUTES smoothstep(half x, half y, half16 z);
half16 __CL_CONST_ATTRIBUTES smoothstep(half16 x, half16 y, half16 z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES clamp(float x, float y, float z);
float __CL_CONST_ATTRIBUTES mix(float x, float y, float z);
float __CL_CONST_ATTRIBUTES smoothstep(float x, float y, float z);
float2 __CL_CONST_ATTRIBUTES clamp(float2 x, float y, float z);
float2 __CL_CONST_ATTRIBUTES clamp(float2 x, float2 y, float2 z);
float2 __CL_CONST_ATTRIBUTES mix(float2 x, float y, float z);
float2 __CL_CONST_ATTRIBUTES mix(float2 x, float2 y, float2 z);
float2 __CL_CONST_ATTRIBUTES smoothstep(float x, float y, float2 z);
float2 __CL_CONST_ATTRIBUTES smoothstep(float2 x, float2 y, float2 z);
float3 __CL_CONST_ATTRIBUTES clamp(float3 x, float y, float z);
float3 __CL_CONST_ATTRIBUTES clamp(float3 x, float3 y, float3 z);
float3 __CL_CONST_ATTRIBUTES mix(float3 x, float y, float z);
float3 __CL_CONST_ATTRIBUTES mix(float3 x, float3 y, float3 z);
float3 __CL_CONST_ATTRIBUTES smoothstep(float x, float y, float3 z);
float3 __CL_CONST_ATTRIBUTES smoothstep(float3 x, float3 y, float3 z);
float4 __CL_CONST_ATTRIBUTES clamp(float4 x, float y, float z);
float4 __CL_CONST_ATTRIBUTES clamp(float4 x, float4 y, float4 z);
float4 __CL_CONST_ATTRIBUTES mix(float4 x, float y, float z);
float4 __CL_CONST_ATTRIBUTES mix(float4 x, float4 y, float4 z);
float4 __CL_CONST_ATTRIBUTES smoothstep(float x, float y, float4 z);
float4 __CL_CONST_ATTRIBUTES smoothstep(float4 x, float4 y, float4 z);
float8 __CL_CONST_ATTRIBUTES clamp(float8 x, float y, float z);
float8 __CL_CONST_ATTRIBUTES clamp(float8 x, float8 y, float8 z);
float8 __CL_CONST_ATTRIBUTES mix(float8 x, float y, float z);
float8 __CL_CONST_ATTRIBUTES mix(float8 x, float8 y, float8 z);
float8 __CL_CONST_ATTRIBUTES smoothstep(float x, float y, float8 z);
float8 __CL_CONST_ATTRIBUTES smoothstep(float8 x, float8 y, float8 z);
float16 __CL_CONST_ATTRIBUTES clamp(float16 x, float y, float z);
float16 __CL_CONST_ATTRIBUTES clamp(float16 x, float16 y, float16 z);
float16 __CL_CONST_ATTRIBUTES mix(float16 x, float y, float z);
float16 __CL_CONST_ATTRIBUTES mix(float16 x, float16 y, float16 z);
float16 __CL_CONST_ATTRIBUTES smoothstep(float x, float y, float16 z);
float16 __CL_CONST_ATTRIBUTES smoothstep(float16 x, float16 y, float16 z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES clamp(double x, double y, double z);
double __CL_CONST_ATTRIBUTES mix(double x, double y, double z);
double __CL_CONST_ATTRIBUTES smoothstep(double x, double y, double z);
double2 __CL_CONST_ATTRIBUTES clamp(double2 x, double y, double z);
double2 __CL_CONST_ATTRIBUTES clamp(double2 x, double2 y, double2 z);
double2 __CL_CONST_ATTRIBUTES mix(double2 x, double y, double z);
double2 __CL_CONST_ATTRIBUTES mix(double2 x, double2 y, double2 z);
double2 __CL_CONST_ATTRIBUTES smoothstep(double x, double y, double2 z);
double2 __CL_CONST_ATTRIBUTES smoothstep(double2 x, double2 y, double2 z);
double3 __CL_CONST_ATTRIBUTES clamp(double3 x, double y, double z);
double3 __CL_CONST_ATTRIBUTES clamp(double3 x, double3 y, double3 z);
double3 __CL_CONST_ATTRIBUTES mix(double3 x, double y, double z);
double3 __CL_CONST_ATTRIBUTES mix(double3 x, double3 y, double3 z);
double3 __CL_CONST_ATTRIBUTES smoothstep(double x, double y, double3 z);
double3 __CL_CONST_ATTRIBUTES smoothstep(double3 x, double3 y, double3 z);
double4 __CL_CONST_ATTRIBUTES clamp(double4 x, double y, double z);
double4 __CL_CONST_ATTRIBUTES clamp(double4 x, double4 y, double4 z);
double4 __CL_CONST_ATTRIBUTES mix(double4 x, double y, double z);
double4 __CL_CONST_ATTRIBUTES mix(double4 x, double4 y, double4 z);
double4 __CL_CONST_ATTRIBUTES smoothstep(double x, double y, double4 z);
double4 __CL_CONST_ATTRIBUTES smoothstep(double4 x, double4 y, double4 z);
double8 __CL_CONST_ATTRIBUTES clamp(double8 x, double y, double z);
double8 __CL_CONST_ATTRIBUTES clamp(double8 x, double8 y, double8 z);
double8 __CL_CONST_ATTRIBUTES mix(double8 x, double y, double z);
double8 __CL_CONST_ATTRIBUTES mix(double8 x, double8 y, double8 z);
double8 __CL_CONST_ATTRIBUTES smoothstep(double x, double y, double8 z);
double8 __CL_CONST_ATTRIBUTES smoothstep(double8 x, double8 y, double8 z);
double16 __CL_CONST_ATTRIBUTES clamp(double16 x, double y, double z);
double16 __CL_CONST_ATTRIBUTES clamp(double16 x, double16 y, double16 z);
double16 __CL_CONST_ATTRIBUTES mix(double16 x, double y, double z);
double16 __CL_CONST_ATTRIBUTES mix(double16 x, double16 y, double16 z);
double16 __CL_CONST_ATTRIBUTES smoothstep(double x, double y, double16 z);
double16 __CL_CONST_ATTRIBUTES smoothstep(double16 x, double16 y, double16 z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES acos(half x);
half __CL_CONST_ATTRIBUTES acosh(half x);
half __CL_CONST_ATTRIBUTES acospi(half x);
half __CL_CONST_ATTRIBUTES asin(half x);
half __CL_CONST_ATTRIBUTES asinh(half x);
half __CL_CONST_ATTRIBUTES asinpi(half x);
half __CL_CONST_ATTRIBUTES atan(half x);
half __CL_CONST_ATTRIBUTES atanh(half x);
half __CL_CONST_ATTRIBUTES atanpi(half x);
half __CL_CONST_ATTRIBUTES cbrt(half x);
half __CL_CONST_ATTRIBUTES ceil(half x);
half __CL_CONST_ATTRIBUTES cos(half x);
half __CL_CONST_ATTRIBUTES cosh(half x);
half __CL_CONST_ATTRIBUTES cospi(half x);
half __CL_CONST_ATTRIBUTES erfc(half x);
half __CL_CONST_ATTRIBUTES erf(half x);
half __CL_CONST_ATTRIBUTES exp(half x);
half __CL_CONST_ATTRIBUTES exp2(half x);
half __CL_CONST_ATTRIBUTES exp10(half x);
half __CL_CONST_ATTRIBUTES expm1(half x);
half __CL_CONST_ATTRIBUTES fabs(half x);
half __CL_CONST_ATTRIBUTES floor(half x);
half __CL_CONST_ATTRIBUTES lgamma(half x);
half __CL_CONST_ATTRIBUTES log(half x);
half __CL_CONST_ATTRIBUTES log2(half x);
half __CL_CONST_ATTRIBUTES log10(half x);
half __CL_CONST_ATTRIBUTES log1p(half x);
half __CL_CONST_ATTRIBUTES logb(half x);
half __CL_CONST_ATTRIBUTES rint(half x);
half __CL_CONST_ATTRIBUTES round(half x);
half __CL_CONST_ATTRIBUTES rsqrt(half x);
half __CL_CONST_ATTRIBUTES sin(half x);
half __CL_CONST_ATTRIBUTES sinh(half x);
half __CL_CONST_ATTRIBUTES sinpi(half x);
half __CL_CONST_ATTRIBUTES sqrt(half x);
half __CL_CONST_ATTRIBUTES tan(half x);
half __CL_CONST_ATTRIBUTES tanh(half x);
half __CL_CONST_ATTRIBUTES tanpi(half x);
half __CL_CONST_ATTRIBUTES tgamma(half x);
half __CL_CONST_ATTRIBUTES trunc(half x);
int __CL_CONST_ATTRIBUTES ilogb(half x);
half __CL_CONST_ATTRIBUTES nan(ushort x);
half2 __CL_CONST_ATTRIBUTES acos(half2 x);
half2 __CL_CONST_ATTRIBUTES acosh(half2 x);
half2 __CL_CONST_ATTRIBUTES acospi(half2 x);
half2 __CL_CONST_ATTRIBUTES asin(half2 x);
half2 __CL_CONST_ATTRIBUTES asinh(half2 x);
half2 __CL_CONST_ATTRIBUTES asinpi(half2 x);
half2 __CL_CONST_ATTRIBUTES atan(half2 x);
half2 __CL_CONST_ATTRIBUTES atanh(half2 x);
half2 __CL_CONST_ATTRIBUTES atanpi(half2 x);
half2 __CL_CONST_ATTRIBUTES cbrt(half2 x);
half2 __CL_CONST_ATTRIBUTES ceil(half2 x);
half2 __CL_CONST_ATTRIBUTES cos(half2 x);
half2 __CL_CONST_ATTRIBUTES cosh(half2 x);
half2 __CL_CONST_ATTRIBUTES cospi(half2 x);
half2 __CL_CONST_ATTRIBUTES erfc(half2 x);
half2 __CL_CONST_ATTRIBUTES erf(half2 x);
half2 __CL_CONST_ATTRIBUTES exp(half2 x);
half2 __CL_CONST_ATTRIBUTES exp2(half2 x);
half2 __CL_CONST_ATTRIBUTES exp10(half2 x);
half2 __CL_CONST_ATTRIBUTES expm1(half2 x);
half2 __CL_CONST_ATTRIBUTES fabs(half2 x);
half2 __CL_CONST_ATTRIBUTES floor(half2 x);
half2 __CL_CONST_ATTRIBUTES lgamma(half2 x);
half2 __CL_CONST_ATTRIBUTES log(half2 x);
half2 __CL_CONST_ATTRIBUTES log2(half2 x);
half2 __CL_CONST_ATTRIBUTES log10(half2 x);
half2 __CL_CONST_ATTRIBUTES log1p(half2 x);
half2 __CL_CONST_ATTRIBUTES logb(half2 x);
half2 __CL_CONST_ATTRIBUTES rint(half2 x);
half2 __CL_CONST_ATTRIBUTES round(half2 x);
half2 __CL_CONST_ATTRIBUTES rsqrt(half2 x);
half2 __CL_CONST_ATTRIBUTES sin(half2 x);
half2 __CL_CONST_ATTRIBUTES sinh(half2 x);
half2 __CL_CONST_ATTRIBUTES sinpi(half2 x);
half2 __CL_CONST_ATTRIBUTES sqrt(half2 x);
half2 __CL_CONST_ATTRIBUTES tan(half2 x);
half2 __CL_CONST_ATTRIBUTES tanh(half2 x);
half2 __CL_CONST_ATTRIBUTES tanpi(half2 x);
half2 __CL_CONST_ATTRIBUTES tgamma(half2 x);
half2 __CL_CONST_ATTRIBUTES trunc(half2 x);
int2 __CL_CONST_ATTRIBUTES ilogb(half2 x);
half2 __CL_CONST_ATTRIBUTES nan(ushort2 x);
half3 __CL_CONST_ATTRIBUTES acos(half3 x);
half3 __CL_CONST_ATTRIBUTES acosh(half3 x);
half3 __CL_CONST_ATTRIBUTES acospi(half3 x);
half3 __CL_CONST_ATTRIBUTES asin(half3 x);
half3 __CL_CONST_ATTRIBUTES asinh(half3 x);
half3 __CL_CONST_ATTRIBUTES asinpi(half3 x);
half3 __CL_CONST_ATTRIBUTES atan(half3 x);
half3 __CL_CONST_ATTRIBUTES atanh(half3 x);
half3 __CL_CONST_ATTRIBUTES atanpi(half3 x);
half3 __CL_CONST_ATTRIBUTES cbrt(half3 x);
half3 __CL_CONST_ATTRIBUTES ceil(half3 x);
half3 __CL_CONST_ATTRIBUTES cos(half3 x);
half3 __CL_CONST_ATTRIBUTES cosh(half3 x);
half3 __CL_CONST_ATTRIBUTES cospi(half3 x);
half3 __CL_CONST_ATTRIBUTES erfc(half3 x);
half3 __CL_CONST_ATTRIBUTES erf(half3 x);
half3 __CL_CONST_ATTRIBUTES exp(half3 x);
half3 __CL_CONST_ATTRIBUTES exp2(half3 x);
half3 __CL_CONST_ATTRIBUTES exp10(half3 x);
half3 __CL_CONST_ATTRIBUTES expm1(half3 x);
half3 __CL_CONST_ATTRIBUTES fabs(half3 x);
half3 __CL_CONST_ATTRIBUTES floor(half3 x);
half3 __CL_CONST_ATTRIBUTES lgamma(half3 x);
half3 __CL_CONST_ATTRIBUTES log(half3 x);
half3 __CL_CONST_ATTRIBUTES log2(half3 x);
half3 __CL_CONST_ATTRIBUTES log10(half3 x);
half3 __CL_CONST_ATTRIBUTES log1p(half3 x);
half3 __CL_CONST_ATTRIBUTES logb(half3 x);
half3 __CL_CONST_ATTRIBUTES rint(half3 x);
half3 __CL_CONST_ATTRIBUTES round(half3 x);
half3 __CL_CONST_ATTRIBUTES rsqrt(half3 x);
half3 __CL_CONST_ATTRIBUTES sin(half3 x);
half3 __CL_CONST_ATTRIBUTES sinh(half3 x);
half3 __CL_CONST_ATTRIBUTES sinpi(half3 x);
half3 __CL_CONST_ATTRIBUTES sqrt(half3 x);
half3 __CL_CONST_ATTRIBUTES tan(half3 x);
half3 __CL_CONST_ATTRIBUTES tanh(half3 x);
half3 __CL_CONST_ATTRIBUTES tanpi(half3 x);
half3 __CL_CONST_ATTRIBUTES tgamma(half3 x);
half3 __CL_CONST_ATTRIBUTES trunc(half3 x);
int3 __CL_CONST_ATTRIBUTES ilogb(half3 x);
half3 __CL_CONST_ATTRIBUTES nan(ushort3 x);
half4 __CL_CONST_ATTRIBUTES acos(half4 x);
half4 __CL_CONST_ATTRIBUTES acosh(half4 x);
half4 __CL_CONST_ATTRIBUTES acospi(half4 x);
half4 __CL_CONST_ATTRIBUTES asin(half4 x);
half4 __CL_CONST_ATTRIBUTES asinh(half4 x);
half4 __CL_CONST_ATTRIBUTES asinpi(half4 x);
half4 __CL_CONST_ATTRIBUTES atan(half4 x);
half4 __CL_CONST_ATTRIBUTES atanh(half4 x);
half4 __CL_CONST_ATTRIBUTES atanpi(half4 x);
half4 __CL_CONST_ATTRIBUTES cbrt(half4 x);
half4 __CL_CONST_ATTRIBUTES ceil(half4 x);
half4 __CL_CONST_ATTRIBUTES cos(half4 x);
half4 __CL_CONST_ATTRIBUTES cosh(half4 x);
half4 __CL_CONST_ATTRIBUTES cospi(half4 x);
half4 __CL_CONST_ATTRIBUTES erfc(half4 x);
half4 __CL_CONST_ATTRIBUTES erf(half4 x);
half4 __CL_CONST_ATTRIBUTES exp(half4 x);
half4 __CL_CONST_ATTRIBUTES exp2(half4 x);
half4 __CL_CONST_ATTRIBUTES exp10(half4 x);
half4 __CL_CONST_ATTRIBUTES expm1(half4 x);
half4 __CL_CONST_ATTRIBUTES fabs(half4 x);
half4 __CL_CONST_ATTRIBUTES floor(half4 x);
half4 __CL_CONST_ATTRIBUTES lgamma(half4 x);
half4 __CL_CONST_ATTRIBUTES log(half4 x);
half4 __CL_CONST_ATTRIBUTES log2(half4 x);
half4 __CL_CONST_ATTRIBUTES log10(half4 x);
half4 __CL_CONST_ATTRIBUTES log1p(half4 x);
half4 __CL_CONST_ATTRIBUTES logb(half4 x);
half4 __CL_CONST_ATTRIBUTES rint(half4 x);
half4 __CL_CONST_ATTRIBUTES round(half4 x);
half4 __CL_CONST_ATTRIBUTES rsqrt(half4 x);
half4 __CL_CONST_ATTRIBUTES sin(half4 x);
half4 __CL_CONST_ATTRIBUTES sinh(half4 x);
half4 __CL_CONST_ATTRIBUTES sinpi(half4 x);
half4 __CL_CONST_ATTRIBUTES sqrt(half4 x);
half4 __CL_CONST_ATTRIBUTES tan(half4 x);
half4 __CL_CONST_ATTRIBUTES tanh(half4 x);
half4 __CL_CONST_ATTRIBUTES tanpi(half4 x);
half4 __CL_CONST_ATTRIBUTES tgamma(half4 x);
half4 __CL_CONST_ATTRIBUTES trunc(half4 x);
int4 __CL_CONST_ATTRIBUTES ilogb(half4 x);
half4 __CL_CONST_ATTRIBUTES nan(ushort4 x);
half8 __CL_CONST_ATTRIBUTES acos(half8 x);
half8 __CL_CONST_ATTRIBUTES acosh(half8 x);
half8 __CL_CONST_ATTRIBUTES acospi(half8 x);
half8 __CL_CONST_ATTRIBUTES asin(half8 x);
half8 __CL_CONST_ATTRIBUTES asinh(half8 x);
half8 __CL_CONST_ATTRIBUTES asinpi(half8 x);
half8 __CL_CONST_ATTRIBUTES atan(half8 x);
half8 __CL_CONST_ATTRIBUTES atanh(half8 x);
half8 __CL_CONST_ATTRIBUTES atanpi(half8 x);
half8 __CL_CONST_ATTRIBUTES cbrt(half8 x);
half8 __CL_CONST_ATTRIBUTES ceil(half8 x);
half8 __CL_CONST_ATTRIBUTES cos(half8 x);
half8 __CL_CONST_ATTRIBUTES cosh(half8 x);
half8 __CL_CONST_ATTRIBUTES cospi(half8 x);
half8 __CL_CONST_ATTRIBUTES erfc(half8 x);
half8 __CL_CONST_ATTRIBUTES erf(half8 x);
half8 __CL_CONST_ATTRIBUTES exp(half8 x);
half8 __CL_CONST_ATTRIBUTES exp2(half8 x);
half8 __CL_CONST_ATTRIBUTES exp10(half8 x);
half8 __CL_CONST_ATTRIBUTES expm1(half8 x);
half8 __CL_CONST_ATTRIBUTES fabs(half8 x);
half8 __CL_CONST_ATTRIBUTES floor(half8 x);
half8 __CL_CONST_ATTRIBUTES lgamma(half8 x);
half8 __CL_CONST_ATTRIBUTES log(half8 x);
half8 __CL_CONST_ATTRIBUTES log2(half8 x);
half8 __CL_CONST_ATTRIBUTES log10(half8 x);
half8 __CL_CONST_ATTRIBUTES log1p(half8 x);
half8 __CL_CONST_ATTRIBUTES logb(half8 x);
half8 __CL_CONST_ATTRIBUTES rint(half8 x);
half8 __CL_CONST_ATTRIBUTES round(half8 x);
half8 __CL_CONST_ATTRIBUTES rsqrt(half8 x);
half8 __CL_CONST_ATTRIBUTES sin(half8 x);
half8 __CL_CONST_ATTRIBUTES sinh(half8 x);
half8 __CL_CONST_ATTRIBUTES sinpi(half8 x);
half8 __CL_CONST_ATTRIBUTES sqrt(half8 x);
half8 __CL_CONST_ATTRIBUTES tan(half8 x);
half8 __CL_CONST_ATTRIBUTES tanh(half8 x);
half8 __CL_CONST_ATTRIBUTES tanpi(half8 x);
half8 __CL_CONST_ATTRIBUTES tgamma(half8 x);
half8 __CL_CONST_ATTRIBUTES trunc(half8 x);
int8 __CL_CONST_ATTRIBUTES ilogb(half8 x);
half8 __CL_CONST_ATTRIBUTES nan(ushort8 x);
half16 __CL_CONST_ATTRIBUTES acos(half16 x);
half16 __CL_CONST_ATTRIBUTES acosh(half16 x);
half16 __CL_CONST_ATTRIBUTES acospi(half16 x);
half16 __CL_CONST_ATTRIBUTES asin(half16 x);
half16 __CL_CONST_ATTRIBUTES asinh(half16 x);
half16 __CL_CONST_ATTRIBUTES asinpi(half16 x);
half16 __CL_CONST_ATTRIBUTES atan(half16 x);
half16 __CL_CONST_ATTRIBUTES atanh(half16 x);
half16 __CL_CONST_ATTRIBUTES atanpi(half16 x);
half16 __CL_CONST_ATTRIBUTES cbrt(half16 x);
half16 __CL_CONST_ATTRIBUTES ceil(half16 x);
half16 __CL_CONST_ATTRIBUTES cos(half16 x);
half16 __CL_CONST_ATTRIBUTES cosh(half16 x);
half16 __CL_CONST_ATTRIBUTES cospi(half16 x);
half16 __CL_CONST_ATTRIBUTES erfc(half16 x);
half16 __CL_CONST_ATTRIBUTES erf(half16 x);
half16 __CL_CONST_ATTRIBUTES exp(half16 x);
half16 __CL_CONST_ATTRIBUTES exp2(half16 x);
half16 __CL_CONST_ATTRIBUTES exp10(half16 x);
half16 __CL_CONST_ATTRIBUTES expm1(half16 x);
half16 __CL_CONST_ATTRIBUTES fabs(half16 x);
half16 __CL_CONST_ATTRIBUTES floor(half16 x);
half16 __CL_CONST_ATTRIBUTES lgamma(half16 x);
half16 __CL_CONST_ATTRIBUTES log(half16 x);
half16 __CL_CONST_ATTRIBUTES log2(half16 x);
half16 __CL_CONST_ATTRIBUTES log10(half16 x);
half16 __CL_CONST_ATTRIBUTES log1p(half16 x);
half16 __CL_CONST_ATTRIBUTES logb(half16 x);
half16 __CL_CONST_ATTRIBUTES rint(half16 x);
half16 __CL_CONST_ATTRIBUTES round(half16 x);
half16 __CL_CONST_ATTRIBUTES rsqrt(half16 x);
half16 __CL_CONST_ATTRIBUTES sin(half16 x);
half16 __CL_CONST_ATTRIBUTES sinh(half16 x);
half16 __CL_CONST_ATTRIBUTES sinpi(half16 x);
half16 __CL_CONST_ATTRIBUTES sqrt(half16 x);
half16 __CL_CONST_ATTRIBUTES tan(half16 x);
half16 __CL_CONST_ATTRIBUTES tanh(half16 x);
half16 __CL_CONST_ATTRIBUTES tanpi(half16 x);
half16 __CL_CONST_ATTRIBUTES tgamma(half16 x);
half16 __CL_CONST_ATTRIBUTES trunc(half16 x);
int16 __CL_CONST_ATTRIBUTES ilogb(half16 x);
half16 __CL_CONST_ATTRIBUTES nan(ushort16 x);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES acos(float x);
float __CL_CONST_ATTRIBUTES acosh(float x);
float __CL_CONST_ATTRIBUTES acospi(float x);
float __CL_CONST_ATTRIBUTES asin(float x);
float __CL_CONST_ATTRIBUTES asinh(float x);
float __CL_CONST_ATTRIBUTES asinpi(float x);
float __CL_CONST_ATTRIBUTES atan(float x);
float __CL_CONST_ATTRIBUTES atanh(float x);
float __CL_CONST_ATTRIBUTES atanpi(float x);
float __CL_CONST_ATTRIBUTES cbrt(float x);
float __CL_CONST_ATTRIBUTES ceil(float x);
float __CL_CONST_ATTRIBUTES cos(float x);
float __CL_CONST_ATTRIBUTES half_cos(float x);
float __CL_CONST_ATTRIBUTES native_cos(float x);
float __CL_CONST_ATTRIBUTES cosh(float x);
float __CL_CONST_ATTRIBUTES cospi(float x);
float __CL_CONST_ATTRIBUTES erfc(float x);
float __CL_CONST_ATTRIBUTES erf(float x);
float __CL_CONST_ATTRIBUTES exp(float x);
float __CL_CONST_ATTRIBUTES half_exp(float x);
float __CL_CONST_ATTRIBUTES native_exp(float x);
float __CL_CONST_ATTRIBUTES exp2(float x);
float __CL_CONST_ATTRIBUTES half_exp2(float x);
float __CL_CONST_ATTRIBUTES native_exp2(float x);
float __CL_CONST_ATTRIBUTES exp10(float x);
float __CL_CONST_ATTRIBUTES half_exp10(float x);
float __CL_CONST_ATTRIBUTES native_exp10(float x);
float __CL_CONST_ATTRIBUTES expm1(float x);
float __CL_CONST_ATTRIBUTES fabs(float x);
float __CL_CONST_ATTRIBUTES floor(float x);
float __CL_CONST_ATTRIBUTES lgamma(float x);
float __CL_CONST_ATTRIBUTES log(float x);
float __CL_CONST_ATTRIBUTES half_log(float x);
float __CL_CONST_ATTRIBUTES native_log(float x);
float __CL_CONST_ATTRIBUTES log2(float x);
float __CL_CONST_ATTRIBUTES half_log2(float x);
float __CL_CONST_ATTRIBUTES native_log2(float x);
float __CL_CONST_ATTRIBUTES log10(float x);
float __CL_CONST_ATTRIBUTES half_log10(float x);
float __CL_CONST_ATTRIBUTES native_log10(float x);
float __CL_CONST_ATTRIBUTES log1p(float x);
float __CL_CONST_ATTRIBUTES logb(float x);
float __CL_CONST_ATTRIBUTES rint(float x);
float __CL_CONST_ATTRIBUTES round(float x);
float __CL_CONST_ATTRIBUTES rsqrt(float x);
float __CL_CONST_ATTRIBUTES half_rsqrt(float x);
float __CL_CONST_ATTRIBUTES native_rsqrt(float x);
float __CL_CONST_ATTRIBUTES sin(float x);
float __CL_CONST_ATTRIBUTES half_sin(float x);
float __CL_CONST_ATTRIBUTES native_sin(float x);
float __CL_CONST_ATTRIBUTES sinh(float x);
float __CL_CONST_ATTRIBUTES sinpi(float x);
float __CL_CONST_ATTRIBUTES sqrt(float x);
float __CL_CONST_ATTRIBUTES half_sqrt(float x);
float __CL_CONST_ATTRIBUTES native_sqrt(float x);
float __CL_CONST_ATTRIBUTES tan(float x);
float __CL_CONST_ATTRIBUTES half_tan(float x);
float __CL_CONST_ATTRIBUTES native_tan(float x);
float __CL_CONST_ATTRIBUTES tanh(float x);
float __CL_CONST_ATTRIBUTES tanpi(float x);
float __CL_CONST_ATTRIBUTES tgamma(float x);
float __CL_CONST_ATTRIBUTES trunc(float x);
float __CL_CONST_ATTRIBUTES half_recip(float x);
float __CL_CONST_ATTRIBUTES native_recip(float x);
int __CL_CONST_ATTRIBUTES ilogb(float x);
float __CL_CONST_ATTRIBUTES nan(uint x);
float2 __CL_CONST_ATTRIBUTES acos(float2 x);
float2 __CL_CONST_ATTRIBUTES acosh(float2 x);
float2 __CL_CONST_ATTRIBUTES acospi(float2 x);
float2 __CL_CONST_ATTRIBUTES asin(float2 x);
float2 __CL_CONST_ATTRIBUTES asinh(float2 x);
float2 __CL_CONST_ATTRIBUTES asinpi(float2 x);
float2 __CL_CONST_ATTRIBUTES atan(float2 x);
float2 __CL_CONST_ATTRIBUTES atanh(float2 x);
float2 __CL_CONST_ATTRIBUTES atanpi(float2 x);
float2 __CL_CONST_ATTRIBUTES cbrt(float2 x);
float2 __CL_CONST_ATTRIBUTES ceil(float2 x);
float2 __CL_CONST_ATTRIBUTES cos(float2 x);
float2 __CL_CONST_ATTRIBUTES half_cos(float2 x);
float2 __CL_CONST_ATTRIBUTES native_cos(float2 x);
float2 __CL_CONST_ATTRIBUTES cosh(float2 x);
float2 __CL_CONST_ATTRIBUTES cospi(float2 x);
float2 __CL_CONST_ATTRIBUTES erfc(float2 x);
float2 __CL_CONST_ATTRIBUTES erf(float2 x);
float2 __CL_CONST_ATTRIBUTES exp(float2 x);
float2 __CL_CONST_ATTRIBUTES half_exp(float2 x);
float2 __CL_CONST_ATTRIBUTES native_exp(float2 x);
float2 __CL_CONST_ATTRIBUTES exp2(float2 x);
float2 __CL_CONST_ATTRIBUTES half_exp2(float2 x);
float2 __CL_CONST_ATTRIBUTES native_exp2(float2 x);
float2 __CL_CONST_ATTRIBUTES exp10(float2 x);
float2 __CL_CONST_ATTRIBUTES half_exp10(float2 x);
float2 __CL_CONST_ATTRIBUTES native_exp10(float2 x);
float2 __CL_CONST_ATTRIBUTES expm1(float2 x);
float2 __CL_CONST_ATTRIBUTES fabs(float2 x);
float2 __CL_CONST_ATTRIBUTES floor(float2 x);
float2 __CL_CONST_ATTRIBUTES lgamma(float2 x);
float2 __CL_CONST_ATTRIBUTES log(float2 x);
float2 __CL_CONST_ATTRIBUTES half_log(float2 x);
float2 __CL_CONST_ATTRIBUTES native_log(float2 x);
float2 __CL_CONST_ATTRIBUTES log2(float2 x);
float2 __CL_CONST_ATTRIBUTES half_log2(float2 x);
float2 __CL_CONST_ATTRIBUTES native_log2(float2 x);
float2 __CL_CONST_ATTRIBUTES log10(float2 x);
float2 __CL_CONST_ATTRIBUTES half_log10(float2 x);
float2 __CL_CONST_ATTRIBUTES native_log10(float2 x);
float2 __CL_CONST_ATTRIBUTES log1p(float2 x);
float2 __CL_CONST_ATTRIBUTES logb(float2 x);
float2 __CL_CONST_ATTRIBUTES rint(float2 x);
float2 __CL_CONST_ATTRIBUTES round(float2 x);
float2 __CL_CONST_ATTRIBUTES rsqrt(float2 x);
float2 __CL_CONST_ATTRIBUTES half_rsqrt(float2 x);
float2 __CL_CONST_ATTRIBUTES native_rsqrt(float2 x);
float2 __CL_CONST_ATTRIBUTES sin(float2 x);
float2 __CL_CONST_ATTRIBUTES half_sin(float2 x);
float2 __CL_CONST_ATTRIBUTES native_sin(float2 x);
float2 __CL_CONST_ATTRIBUTES sinh(float2 x);
float2 __CL_CONST_ATTRIBUTES sinpi(float2 x);
float2 __CL_CONST_ATTRIBUTES sqrt(float2 x);
float2 __CL_CONST_ATTRIBUTES half_sqrt(float2 x);
float2 __CL_CONST_ATTRIBUTES native_sqrt(float2 x);
float2 __CL_CONST_ATTRIBUTES tan(float2 x);
float2 __CL_CONST_ATTRIBUTES half_tan(float2 x);
float2 __CL_CONST_ATTRIBUTES native_tan(float2 x);
float2 __CL_CONST_ATTRIBUTES tanh(float2 x);
float2 __CL_CONST_ATTRIBUTES tanpi(float2 x);
float2 __CL_CONST_ATTRIBUTES tgamma(float2 x);
float2 __CL_CONST_ATTRIBUTES trunc(float2 x);
float2 __CL_CONST_ATTRIBUTES half_recip(float2 x);
float2 __CL_CONST_ATTRIBUTES native_recip(float2 x);
int2 __CL_CONST_ATTRIBUTES ilogb(float2 x);
float2 __CL_CONST_ATTRIBUTES nan(uint2 x);
float3 __CL_CONST_ATTRIBUTES acos(float3 x);
float3 __CL_CONST_ATTRIBUTES acosh(float3 x);
float3 __CL_CONST_ATTRIBUTES acospi(float3 x);
float3 __CL_CONST_ATTRIBUTES asin(float3 x);
float3 __CL_CONST_ATTRIBUTES asinh(float3 x);
float3 __CL_CONST_ATTRIBUTES asinpi(float3 x);
float3 __CL_CONST_ATTRIBUTES atan(float3 x);
float3 __CL_CONST_ATTRIBUTES atanh(float3 x);
float3 __CL_CONST_ATTRIBUTES atanpi(float3 x);
float3 __CL_CONST_ATTRIBUTES cbrt(float3 x);
float3 __CL_CONST_ATTRIBUTES ceil(float3 x);
float3 __CL_CONST_ATTRIBUTES cos(float3 x);
float3 __CL_CONST_ATTRIBUTES half_cos(float3 x);
float3 __CL_CONST_ATTRIBUTES native_cos(float3 x);
float3 __CL_CONST_ATTRIBUTES cosh(float3 x);
float3 __CL_CONST_ATTRIBUTES cospi(float3 x);
float3 __CL_CONST_ATTRIBUTES erfc(float3 x);
float3 __CL_CONST_ATTRIBUTES erf(float3 x);
float3 __CL_CONST_ATTRIBUTES exp(float3 x);
float3 __CL_CONST_ATTRIBUTES half_exp(float3 x);
float3 __CL_CONST_ATTRIBUTES native_exp(float3 x);
float3 __CL_CONST_ATTRIBUTES exp2(float3 x);
float3 __CL_CONST_ATTRIBUTES half_exp2(float3 x);
float3 __CL_CONST_ATTRIBUTES native_exp2(float3 x);
float3 __CL_CONST_ATTRIBUTES exp10(float3 x);
float3 __CL_CONST_ATTRIBUTES half_exp10(float3 x);
float3 __CL_CONST_ATTRIBUTES native_exp10(float3 x);
float3 __CL_CONST_ATTRIBUTES expm1(float3 x);
float3 __CL_CONST_ATTRIBUTES fabs(float3 x);
float3 __CL_CONST_ATTRIBUTES floor(float3 x);
float3 __CL_CONST_ATTRIBUTES lgamma(float3 x);
float3 __CL_CONST_ATTRIBUTES log(float3 x);
float3 __CL_CONST_ATTRIBUTES half_log(float3 x);
float3 __CL_CONST_ATTRIBUTES native_log(float3 x);
float3 __CL_CONST_ATTRIBUTES log2(float3 x);
float3 __CL_CONST_ATTRIBUTES half_log2(float3 x);
float3 __CL_CONST_ATTRIBUTES native_log2(float3 x);
float3 __CL_CONST_ATTRIBUTES log10(float3 x);
float3 __CL_CONST_ATTRIBUTES half_log10(float3 x);
float3 __CL_CONST_ATTRIBUTES native_log10(float3 x);
float3 __CL_CONST_ATTRIBUTES log1p(float3 x);
float3 __CL_CONST_ATTRIBUTES logb(float3 x);
float3 __CL_CONST_ATTRIBUTES rint(float3 x);
float3 __CL_CONST_ATTRIBUTES round(float3 x);
float3 __CL_CONST_ATTRIBUTES rsqrt(float3 x);
float3 __CL_CONST_ATTRIBUTES half_rsqrt(float3 x);
float3 __CL_CONST_ATTRIBUTES native_rsqrt(float3 x);
float3 __CL_CONST_ATTRIBUTES sin(float3 x);
float3 __CL_CONST_ATTRIBUTES half_sin(float3 x);
float3 __CL_CONST_ATTRIBUTES native_sin(float3 x);
float3 __CL_CONST_ATTRIBUTES sinh(float3 x);
float3 __CL_CONST_ATTRIBUTES sinpi(float3 x);
float3 __CL_CONST_ATTRIBUTES sqrt(float3 x);
float3 __CL_CONST_ATTRIBUTES half_sqrt(float3 x);
float3 __CL_CONST_ATTRIBUTES native_sqrt(float3 x);
float3 __CL_CONST_ATTRIBUTES tan(float3 x);
float3 __CL_CONST_ATTRIBUTES half_tan(float3 x);
float3 __CL_CONST_ATTRIBUTES native_tan(float3 x);
float3 __CL_CONST_ATTRIBUTES tanh(float3 x);
float3 __CL_CONST_ATTRIBUTES tanpi(float3 x);
float3 __CL_CONST_ATTRIBUTES tgamma(float3 x);
float3 __CL_CONST_ATTRIBUTES trunc(float3 x);
float3 __CL_CONST_ATTRIBUTES half_recip(float3 x);
float3 __CL_CONST_ATTRIBUTES native_recip(float3 x);
int3 __CL_CONST_ATTRIBUTES ilogb(float3 x);
float3 __CL_CONST_ATTRIBUTES nan(uint3 x);
float4 __CL_CONST_ATTRIBUTES acos(float4 x);
float4 __CL_CONST_ATTRIBUTES acosh(float4 x);
float4 __CL_CONST_ATTRIBUTES acospi(float4 x);
float4 __CL_CONST_ATTRIBUTES asin(float4 x);
float4 __CL_CONST_ATTRIBUTES asinh(float4 x);
float4 __CL_CONST_ATTRIBUTES asinpi(float4 x);
float4 __CL_CONST_ATTRIBUTES atan(float4 x);
float4 __CL_CONST_ATTRIBUTES atanh(float4 x);
float4 __CL_CONST_ATTRIBUTES atanpi(float4 x);
float4 __CL_CONST_ATTRIBUTES cbrt(float4 x);
float4 __CL_CONST_ATTRIBUTES ceil(float4 x);
float4 __CL_CONST_ATTRIBUTES cos(float4 x);
float4 __CL_CONST_ATTRIBUTES half_cos(float4 x);
float4 __CL_CONST_ATTRIBUTES native_cos(float4 x);
float4 __CL_CONST_ATTRIBUTES cosh(float4 x);
float4 __CL_CONST_ATTRIBUTES cospi(float4 x);
float4 __CL_CONST_ATTRIBUTES erfc(float4 x);
float4 __CL_CONST_ATTRIBUTES erf(float4 x);
float4 __CL_CONST_ATTRIBUTES exp(float4 x);
float4 __CL_CONST_ATTRIBUTES half_exp(float4 x);
float4 __CL_CONST_ATTRIBUTES native_exp(float4 x);
float4 __CL_CONST_ATTRIBUTES exp2(float4 x);
float4 __CL_CONST_ATTRIBUTES half_exp2(float4 x);
float4 __CL_CONST_ATTRIBUTES native_exp2(float4 x);
float4 __CL_CONST_ATTRIBUTES exp10(float4 x);
float4 __CL_CONST_ATTRIBUTES half_exp10(float4 x);
float4 __CL_CONST_ATTRIBUTES native_exp10(float4 x);
float4 __CL_CONST_ATTRIBUTES expm1(float4 x);
float4 __CL_CONST_ATTRIBUTES fabs(float4 x);
float4 __CL_CONST_ATTRIBUTES floor(float4 x);
float4 __CL_CONST_ATTRIBUTES lgamma(float4 x);
float4 __CL_CONST_ATTRIBUTES log(float4 x);
float4 __CL_CONST_ATTRIBUTES half_log(float4 x);
float4 __CL_CONST_ATTRIBUTES native_log(float4 x);
float4 __CL_CONST_ATTRIBUTES log2(float4 x);
float4 __CL_CONST_ATTRIBUTES half_log2(float4 x);
float4 __CL_CONST_ATTRIBUTES native_log2(float4 x);
float4 __CL_CONST_ATTRIBUTES log10(float4 x);
float4 __CL_CONST_ATTRIBUTES half_log10(float4 x);
float4 __CL_CONST_ATTRIBUTES native_log10(float4 x);
float4 __CL_CONST_ATTRIBUTES log1p(float4 x);
float4 __CL_CONST_ATTRIBUTES logb(float4 x);
float4 __CL_CONST_ATTRIBUTES rint(float4 x);
float4 __CL_CONST_ATTRIBUTES round(float4 x);
float4 __CL_CONST_ATTRIBUTES rsqrt(float4 x);
float4 __CL_CONST_ATTRIBUTES half_rsqrt(float4 x);
float4 __CL_CONST_ATTRIBUTES native_rsqrt(float4 x);
float4 __CL_CONST_ATTRIBUTES sin(float4 x);
float4 __CL_CONST_ATTRIBUTES half_sin(float4 x);
float4 __CL_CONST_ATTRIBUTES native_sin(float4 x);
float4 __CL_CONST_ATTRIBUTES sinh(float4 x);
float4 __CL_CONST_ATTRIBUTES sinpi(float4 x);
float4 __CL_CONST_ATTRIBUTES sqrt(float4 x);
float4 __CL_CONST_ATTRIBUTES half_sqrt(float4 x);
float4 __CL_CONST_ATTRIBUTES native_sqrt(float4 x);
float4 __CL_CONST_ATTRIBUTES tan(float4 x);
float4 __CL_CONST_ATTRIBUTES half_tan(float4 x);
float4 __CL_CONST_ATTRIBUTES native_tan(float4 x);
float4 __CL_CONST_ATTRIBUTES tanh(float4 x);
float4 __CL_CONST_ATTRIBUTES tanpi(float4 x);
float4 __CL_CONST_ATTRIBUTES tgamma(float4 x);
float4 __CL_CONST_ATTRIBUTES trunc(float4 x);
float4 __CL_CONST_ATTRIBUTES half_recip(float4 x);
float4 __CL_CONST_ATTRIBUTES native_recip(float4 x);
int4 __CL_CONST_ATTRIBUTES ilogb(float4 x);
float4 __CL_CONST_ATTRIBUTES nan(uint4 x);
float8 __CL_CONST_ATTRIBUTES acos(float8 x);
float8 __CL_CONST_ATTRIBUTES acosh(float8 x);
float8 __CL_CONST_ATTRIBUTES acospi(float8 x);
float8 __CL_CONST_ATTRIBUTES asin(float8 x);
float8 __CL_CONST_ATTRIBUTES asinh(float8 x);
float8 __CL_CONST_ATTRIBUTES asinpi(float8 x);
float8 __CL_CONST_ATTRIBUTES atan(float8 x);
float8 __CL_CONST_ATTRIBUTES atanh(float8 x);
float8 __CL_CONST_ATTRIBUTES atanpi(float8 x);
float8 __CL_CONST_ATTRIBUTES cbrt(float8 x);
float8 __CL_CONST_ATTRIBUTES ceil(float8 x);
float8 __CL_CONST_ATTRIBUTES cos(float8 x);
float8 __CL_CONST_ATTRIBUTES half_cos(float8 x);
float8 __CL_CONST_ATTRIBUTES native_cos(float8 x);
float8 __CL_CONST_ATTRIBUTES cosh(float8 x);
float8 __CL_CONST_ATTRIBUTES cospi(float8 x);
float8 __CL_CONST_ATTRIBUTES erfc(float8 x);
float8 __CL_CONST_ATTRIBUTES erf(float8 x);
float8 __CL_CONST_ATTRIBUTES exp(float8 x);
float8 __CL_CONST_ATTRIBUTES half_exp(float8 x);
float8 __CL_CONST_ATTRIBUTES native_exp(float8 x);
float8 __CL_CONST_ATTRIBUTES exp2(float8 x);
float8 __CL_CONST_ATTRIBUTES half_exp2(float8 x);
float8 __CL_CONST_ATTRIBUTES native_exp2(float8 x);
float8 __CL_CONST_ATTRIBUTES exp10(float8 x);
float8 __CL_CONST_ATTRIBUTES half_exp10(float8 x);
float8 __CL_CONST_ATTRIBUTES native_exp10(float8 x);
float8 __CL_CONST_ATTRIBUTES expm1(float8 x);
float8 __CL_CONST_ATTRIBUTES fabs(float8 x);
float8 __CL_CONST_ATTRIBUTES floor(float8 x);
float8 __CL_CONST_ATTRIBUTES lgamma(float8 x);
float8 __CL_CONST_ATTRIBUTES log(float8 x);
float8 __CL_CONST_ATTRIBUTES half_log(float8 x);
float8 __CL_CONST_ATTRIBUTES native_log(float8 x);
float8 __CL_CONST_ATTRIBUTES log2(float8 x);
float8 __CL_CONST_ATTRIBUTES half_log2(float8 x);
float8 __CL_CONST_ATTRIBUTES native_log2(float8 x);
float8 __CL_CONST_ATTRIBUTES log10(float8 x);
float8 __CL_CONST_ATTRIBUTES half_log10(float8 x);
float8 __CL_CONST_ATTRIBUTES native_log10(float8 x);
float8 __CL_CONST_ATTRIBUTES log1p(float8 x);
float8 __CL_CONST_ATTRIBUTES logb(float8 x);
float8 __CL_CONST_ATTRIBUTES rint(float8 x);
float8 __CL_CONST_ATTRIBUTES round(float8 x);
float8 __CL_CONST_ATTRIBUTES rsqrt(float8 x);
float8 __CL_CONST_ATTRIBUTES half_rsqrt(float8 x);
float8 __CL_CONST_ATTRIBUTES native_rsqrt(float8 x);
float8 __CL_CONST_ATTRIBUTES sin(float8 x);
float8 __CL_CONST_ATTRIBUTES half_sin(float8 x);
float8 __CL_CONST_ATTRIBUTES native_sin(float8 x);
float8 __CL_CONST_ATTRIBUTES sinh(float8 x);
float8 __CL_CONST_ATTRIBUTES sinpi(float8 x);
float8 __CL_CONST_ATTRIBUTES sqrt(float8 x);
float8 __CL_CONST_ATTRIBUTES half_sqrt(float8 x);
float8 __CL_CONST_ATTRIBUTES native_sqrt(float8 x);
float8 __CL_CONST_ATTRIBUTES tan(float8 x);
float8 __CL_CONST_ATTRIBUTES half_tan(float8 x);
float8 __CL_CONST_ATTRIBUTES native_tan(float8 x);
float8 __CL_CONST_ATTRIBUTES tanh(float8 x);
float8 __CL_CONST_ATTRIBUTES tanpi(float8 x);
float8 __CL_CONST_ATTRIBUTES tgamma(float8 x);
float8 __CL_CONST_ATTRIBUTES trunc(float8 x);
float8 __CL_CONST_ATTRIBUTES half_recip(float8 x);
float8 __CL_CONST_ATTRIBUTES native_recip(float8 x);
int8 __CL_CONST_ATTRIBUTES ilogb(float8 x);
float8 __CL_CONST_ATTRIBUTES nan(uint8 x);
float16 __CL_CONST_ATTRIBUTES acos(float16 x);
float16 __CL_CONST_ATTRIBUTES acosh(float16 x);
float16 __CL_CONST_ATTRIBUTES acospi(float16 x);
float16 __CL_CONST_ATTRIBUTES asin(float16 x);
float16 __CL_CONST_ATTRIBUTES asinh(float16 x);
float16 __CL_CONST_ATTRIBUTES asinpi(float16 x);
float16 __CL_CONST_ATTRIBUTES atan(float16 x);
float16 __CL_CONST_ATTRIBUTES atanh(float16 x);
float16 __CL_CONST_ATTRIBUTES atanpi(float16 x);
float16 __CL_CONST_ATTRIBUTES cbrt(float16 x);
float16 __CL_CONST_ATTRIBUTES ceil(float16 x);
float16 __CL_CONST_ATTRIBUTES cos(float16 x);
float16 __CL_CONST_ATTRIBUTES half_cos(float16 x);
float16 __CL_CONST_ATTRIBUTES native_cos(float16 x);
float16 __CL_CONST_ATTRIBUTES cosh(float16 x);
float16 __CL_CONST_ATTRIBUTES cospi(float16 x);
float16 __CL_CONST_ATTRIBUTES erfc(float16 x);
float16 __CL_CONST_ATTRIBUTES erf(float16 x);
float16 __CL_CONST_ATTRIBUTES exp(float16 x);
float16 __CL_CONST_ATTRIBUTES half_exp(float16 x);
float16 __CL_CONST_ATTRIBUTES native_exp(float16 x);
float16 __CL_CONST_ATTRIBUTES exp2(float16 x);
float16 __CL_CONST_ATTRIBUTES half_exp2(float16 x);
float16 __CL_CONST_ATTRIBUTES native_exp2(float16 x);
float16 __CL_CONST_ATTRIBUTES exp10(float16 x);
float16 __CL_CONST_ATTRIBUTES half_exp10(float16 x);
float16 __CL_CONST_ATTRIBUTES native_exp10(float16 x);
float16 __CL_CONST_ATTRIBUTES expm1(float16 x);
float16 __CL_CONST_ATTRIBUTES fabs(float16 x);
float16 __CL_CONST_ATTRIBUTES floor(float16 x);
float16 __CL_CONST_ATTRIBUTES lgamma(float16 x);
float16 __CL_CONST_ATTRIBUTES log(float16 x);
float16 __CL_CONST_ATTRIBUTES half_log(float16 x);
float16 __CL_CONST_ATTRIBUTES native_log(float16 x);
float16 __CL_CONST_ATTRIBUTES log2(float16 x);
float16 __CL_CONST_ATTRIBUTES half_log2(float16 x);
float16 __CL_CONST_ATTRIBUTES native_log2(float16 x);
float16 __CL_CONST_ATTRIBUTES log10(float16 x);
float16 __CL_CONST_ATTRIBUTES half_log10(float16 x);
float16 __CL_CONST_ATTRIBUTES native_log10(float16 x);
float16 __CL_CONST_ATTRIBUTES log1p(float16 x);
float16 __CL_CONST_ATTRIBUTES logb(float16 x);
float16 __CL_CONST_ATTRIBUTES rint(float16 x);
float16 __CL_CONST_ATTRIBUTES round(float16 x);
float16 __CL_CONST_ATTRIBUTES rsqrt(float16 x);
float16 __CL_CONST_ATTRIBUTES half_rsqrt(float16 x);
float16 __CL_CONST_ATTRIBUTES native_rsqrt(float16 x);
float16 __CL_CONST_ATTRIBUTES sin(float16 x);
float16 __CL_CONST_ATTRIBUTES half_sin(float16 x);
float16 __CL_CONST_ATTRIBUTES native_sin(float16 x);
float16 __CL_CONST_ATTRIBUTES sinh(float16 x);
float16 __CL_CONST_ATTRIBUTES sinpi(float16 x);
float16 __CL_CONST_ATTRIBUTES sqrt(float16 x);
float16 __CL_CONST_ATTRIBUTES half_sqrt(float16 x);
float16 __CL_CONST_ATTRIBUTES native_sqrt(float16 x);
float16 __CL_CONST_ATTRIBUTES tan(float16 x);
float16 __CL_CONST_ATTRIBUTES half_tan(float16 x);
float16 __CL_CONST_ATTRIBUTES native_tan(float16 x);
float16 __CL_CONST_ATTRIBUTES tanh(float16 x);
float16 __CL_CONST_ATTRIBUTES tanpi(float16 x);
float16 __CL_CONST_ATTRIBUTES tgamma(float16 x);
float16 __CL_CONST_ATTRIBUTES trunc(float16 x);
float16 __CL_CONST_ATTRIBUTES half_recip(float16 x);
float16 __CL_CONST_ATTRIBUTES native_recip(float16 x);
int16 __CL_CONST_ATTRIBUTES ilogb(float16 x);
float16 __CL_CONST_ATTRIBUTES nan(uint16 x);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES acos(double x);
double __CL_CONST_ATTRIBUTES acosh(double x);
double __CL_CONST_ATTRIBUTES acospi(double x);
double __CL_CONST_ATTRIBUTES asin(double x);
double __CL_CONST_ATTRIBUTES asinh(double x);
double __CL_CONST_ATTRIBUTES asinpi(double x);
double __CL_CONST_ATTRIBUTES atan(double x);
double __CL_CONST_ATTRIBUTES atanh(double x);
double __CL_CONST_ATTRIBUTES atanpi(double x);
double __CL_CONST_ATTRIBUTES cbrt(double x);
double __CL_CONST_ATTRIBUTES ceil(double x);
double __CL_CONST_ATTRIBUTES cos(double x);
double __CL_CONST_ATTRIBUTES half_cos(double x);
double __CL_CONST_ATTRIBUTES native_cos(double x);
double __CL_CONST_ATTRIBUTES cosh(double x);
double __CL_CONST_ATTRIBUTES cospi(double x);
double __CL_CONST_ATTRIBUTES erfc(double x);
double __CL_CONST_ATTRIBUTES erf(double x);
double __CL_CONST_ATTRIBUTES exp(double x);
double __CL_CONST_ATTRIBUTES half_exp(double x);
double __CL_CONST_ATTRIBUTES native_exp(double x);
double __CL_CONST_ATTRIBUTES exp2(double x);
double __CL_CONST_ATTRIBUTES half_exp2(double x);
double __CL_CONST_ATTRIBUTES native_exp2(double x);
double __CL_CONST_ATTRIBUTES exp10(double x);
double __CL_CONST_ATTRIBUTES half_exp10(double x);
double __CL_CONST_ATTRIBUTES native_exp10(double x);
double __CL_CONST_ATTRIBUTES expm1(double x);
double __CL_CONST_ATTRIBUTES fabs(double x);
double __CL_CONST_ATTRIBUTES floor(double x);
double __CL_CONST_ATTRIBUTES lgamma(double x);
double __CL_CONST_ATTRIBUTES log(double x);
double __CL_CONST_ATTRIBUTES half_log(double x);
double __CL_CONST_ATTRIBUTES native_log(double x);
double __CL_CONST_ATTRIBUTES log2(double x);
double __CL_CONST_ATTRIBUTES half_log2(double x);
double __CL_CONST_ATTRIBUTES native_log2(double x);
double __CL_CONST_ATTRIBUTES log10(double x);
double __CL_CONST_ATTRIBUTES half_log10(double x);
double __CL_CONST_ATTRIBUTES native_log10(double x);
double __CL_CONST_ATTRIBUTES log1p(double x);
double __CL_CONST_ATTRIBUTES logb(double x);
double __CL_CONST_ATTRIBUTES rint(double x);
double __CL_CONST_ATTRIBUTES round(double x);
double __CL_CONST_ATTRIBUTES rsqrt(double x);
double __CL_CONST_ATTRIBUTES half_rsqrt(double x);
double __CL_CONST_ATTRIBUTES native_rsqrt(double x);
double __CL_CONST_ATTRIBUTES sin(double x);
double __CL_CONST_ATTRIBUTES half_sin(double x);
double __CL_CONST_ATTRIBUTES native_sin(double x);
double __CL_CONST_ATTRIBUTES sinh(double x);
double __CL_CONST_ATTRIBUTES sinpi(double x);
double __CL_CONST_ATTRIBUTES sqrt(double x);
double __CL_CONST_ATTRIBUTES half_sqrt(double x);
double __CL_CONST_ATTRIBUTES native_sqrt(double x);
double __CL_CONST_ATTRIBUTES tan(double x);
double __CL_CONST_ATTRIBUTES half_tan(double x);
double __CL_CONST_ATTRIBUTES native_tan(double x);
double __CL_CONST_ATTRIBUTES tanh(double x);
double __CL_CONST_ATTRIBUTES tanpi(double x);
double __CL_CONST_ATTRIBUTES tgamma(double x);
double __CL_CONST_ATTRIBUTES trunc(double x);
double __CL_CONST_ATTRIBUTES half_recip(double x);
double __CL_CONST_ATTRIBUTES native_recip(double x);
int __CL_CONST_ATTRIBUTES ilogb(double x);
double __CL_CONST_ATTRIBUTES nan(ulong x);
double2 __CL_CONST_ATTRIBUTES acos(double2 x);
double2 __CL_CONST_ATTRIBUTES acosh(double2 x);
double2 __CL_CONST_ATTRIBUTES acospi(double2 x);
double2 __CL_CONST_ATTRIBUTES asin(double2 x);
double2 __CL_CONST_ATTRIBUTES asinh(double2 x);
double2 __CL_CONST_ATTRIBUTES asinpi(double2 x);
double2 __CL_CONST_ATTRIBUTES atan(double2 x);
double2 __CL_CONST_ATTRIBUTES atanh(double2 x);
double2 __CL_CONST_ATTRIBUTES atanpi(double2 x);
double2 __CL_CONST_ATTRIBUTES cbrt(double2 x);
double2 __CL_CONST_ATTRIBUTES ceil(double2 x);
double2 __CL_CONST_ATTRIBUTES cos(double2 x);
double2 __CL_CONST_ATTRIBUTES half_cos(double2 x);
double2 __CL_CONST_ATTRIBUTES native_cos(double2 x);
double2 __CL_CONST_ATTRIBUTES cosh(double2 x);
double2 __CL_CONST_ATTRIBUTES cospi(double2 x);
double2 __CL_CONST_ATTRIBUTES erfc(double2 x);
double2 __CL_CONST_ATTRIBUTES erf(double2 x);
double2 __CL_CONST_ATTRIBUTES exp(double2 x);
double2 __CL_CONST_ATTRIBUTES half_exp(double2 x);
double2 __CL_CONST_ATTRIBUTES native_exp(double2 x);
double2 __CL_CONST_ATTRIBUTES exp2(double2 x);
double2 __CL_CONST_ATTRIBUTES half_exp2(double2 x);
double2 __CL_CONST_ATTRIBUTES native_exp2(double2 x);
double2 __CL_CONST_ATTRIBUTES exp10(double2 x);
double2 __CL_CONST_ATTRIBUTES half_exp10(double2 x);
double2 __CL_CONST_ATTRIBUTES native_exp10(double2 x);
double2 __CL_CONST_ATTRIBUTES expm1(double2 x);
double2 __CL_CONST_ATTRIBUTES fabs(double2 x);
double2 __CL_CONST_ATTRIBUTES floor(double2 x);
double2 __CL_CONST_ATTRIBUTES lgamma(double2 x);
double2 __CL_CONST_ATTRIBUTES log(double2 x);
double2 __CL_CONST_ATTRIBUTES half_log(double2 x);
double2 __CL_CONST_ATTRIBUTES native_log(double2 x);
double2 __CL_CONST_ATTRIBUTES log2(double2 x);
double2 __CL_CONST_ATTRIBUTES half_log2(double2 x);
double2 __CL_CONST_ATTRIBUTES native_log2(double2 x);
double2 __CL_CONST_ATTRIBUTES log10(double2 x);
double2 __CL_CONST_ATTRIBUTES half_log10(double2 x);
double2 __CL_CONST_ATTRIBUTES native_log10(double2 x);
double2 __CL_CONST_ATTRIBUTES log1p(double2 x);
double2 __CL_CONST_ATTRIBUTES logb(double2 x);
double2 __CL_CONST_ATTRIBUTES rint(double2 x);
double2 __CL_CONST_ATTRIBUTES round(double2 x);
double2 __CL_CONST_ATTRIBUTES rsqrt(double2 x);
double2 __CL_CONST_ATTRIBUTES half_rsqrt(double2 x);
double2 __CL_CONST_ATTRIBUTES native_rsqrt(double2 x);
double2 __CL_CONST_ATTRIBUTES sin(double2 x);
double2 __CL_CONST_ATTRIBUTES half_sin(double2 x);
double2 __CL_CONST_ATTRIBUTES native_sin(double2 x);
double2 __CL_CONST_ATTRIBUTES sinh(double2 x);
double2 __CL_CONST_ATTRIBUTES sinpi(double2 x);
double2 __CL_CONST_ATTRIBUTES sqrt(double2 x);
double2 __CL_CONST_ATTRIBUTES half_sqrt(double2 x);
double2 __CL_CONST_ATTRIBUTES native_sqrt(double2 x);
double2 __CL_CONST_ATTRIBUTES tan(double2 x);
double2 __CL_CONST_ATTRIBUTES half_tan(double2 x);
double2 __CL_CONST_ATTRIBUTES native_tan(double2 x);
double2 __CL_CONST_ATTRIBUTES tanh(double2 x);
double2 __CL_CONST_ATTRIBUTES tanpi(double2 x);
double2 __CL_CONST_ATTRIBUTES tgamma(double2 x);
double2 __CL_CONST_ATTRIBUTES trunc(double2 x);
double2 __CL_CONST_ATTRIBUTES half_recip(double2 x);
double2 __CL_CONST_ATTRIBUTES native_recip(double2 x);
int2 __CL_CONST_ATTRIBUTES ilogb(double2 x);
double2 __CL_CONST_ATTRIBUTES nan(ulong2 x);
double3 __CL_CONST_ATTRIBUTES acos(double3 x);
double3 __CL_CONST_ATTRIBUTES acosh(double3 x);
double3 __CL_CONST_ATTRIBUTES acospi(double3 x);
double3 __CL_CONST_ATTRIBUTES asin(double3 x);
double3 __CL_CONST_ATTRIBUTES asinh(double3 x);
double3 __CL_CONST_ATTRIBUTES asinpi(double3 x);
double3 __CL_CONST_ATTRIBUTES atan(double3 x);
double3 __CL_CONST_ATTRIBUTES atanh(double3 x);
double3 __CL_CONST_ATTRIBUTES atanpi(double3 x);
double3 __CL_CONST_ATTRIBUTES cbrt(double3 x);
double3 __CL_CONST_ATTRIBUTES ceil(double3 x);
double3 __CL_CONST_ATTRIBUTES cos(double3 x);
double3 __CL_CONST_ATTRIBUTES half_cos(double3 x);
double3 __CL_CONST_ATTRIBUTES native_cos(double3 x);
double3 __CL_CONST_ATTRIBUTES cosh(double3 x);
double3 __CL_CONST_ATTRIBUTES cospi(double3 x);
double3 __CL_CONST_ATTRIBUTES erfc(double3 x);
double3 __CL_CONST_ATTRIBUTES erf(double3 x);
double3 __CL_CONST_ATTRIBUTES exp(double3 x);
double3 __CL_CONST_ATTRIBUTES half_exp(double3 x);
double3 __CL_CONST_ATTRIBUTES native_exp(double3 x);
double3 __CL_CONST_ATTRIBUTES exp2(double3 x);
double3 __CL_CONST_ATTRIBUTES half_exp2(double3 x);
double3 __CL_CONST_ATTRIBUTES native_exp2(double3 x);
double3 __CL_CONST_ATTRIBUTES exp10(double3 x);
double3 __CL_CONST_ATTRIBUTES half_exp10(double3 x);
double3 __CL_CONST_ATTRIBUTES native_exp10(double3 x);
double3 __CL_CONST_ATTRIBUTES expm1(double3 x);
double3 __CL_CONST_ATTRIBUTES fabs(double3 x);
double3 __CL_CONST_ATTRIBUTES floor(double3 x);
double3 __CL_CONST_ATTRIBUTES lgamma(double3 x);
double3 __CL_CONST_ATTRIBUTES log(double3 x);
double3 __CL_CONST_ATTRIBUTES half_log(double3 x);
double3 __CL_CONST_ATTRIBUTES native_log(double3 x);
double3 __CL_CONST_ATTRIBUTES log2(double3 x);
double3 __CL_CONST_ATTRIBUTES half_log2(double3 x);
double3 __CL_CONST_ATTRIBUTES native_log2(double3 x);
double3 __CL_CONST_ATTRIBUTES log10(double3 x);
double3 __CL_CONST_ATTRIBUTES half_log10(double3 x);
double3 __CL_CONST_ATTRIBUTES native_log10(double3 x);
double3 __CL_CONST_ATTRIBUTES log1p(double3 x);
double3 __CL_CONST_ATTRIBUTES logb(double3 x);
double3 __CL_CONST_ATTRIBUTES rint(double3 x);
double3 __CL_CONST_ATTRIBUTES round(double3 x);
double3 __CL_CONST_ATTRIBUTES rsqrt(double3 x);
double3 __CL_CONST_ATTRIBUTES half_rsqrt(double3 x);
double3 __CL_CONST_ATTRIBUTES native_rsqrt(double3 x);
double3 __CL_CONST_ATTRIBUTES sin(double3 x);
double3 __CL_CONST_ATTRIBUTES half_sin(double3 x);
double3 __CL_CONST_ATTRIBUTES native_sin(double3 x);
double3 __CL_CONST_ATTRIBUTES sinh(double3 x);
double3 __CL_CONST_ATTRIBUTES sinpi(double3 x);
double3 __CL_CONST_ATTRIBUTES sqrt(double3 x);
double3 __CL_CONST_ATTRIBUTES half_sqrt(double3 x);
double3 __CL_CONST_ATTRIBUTES native_sqrt(double3 x);
double3 __CL_CONST_ATTRIBUTES tan(double3 x);
double3 __CL_CONST_ATTRIBUTES half_tan(double3 x);
double3 __CL_CONST_ATTRIBUTES native_tan(double3 x);
double3 __CL_CONST_ATTRIBUTES tanh(double3 x);
double3 __CL_CONST_ATTRIBUTES tanpi(double3 x);
double3 __CL_CONST_ATTRIBUTES tgamma(double3 x);
double3 __CL_CONST_ATTRIBUTES trunc(double3 x);
double3 __CL_CONST_ATTRIBUTES half_recip(double3 x);
double3 __CL_CONST_ATTRIBUTES native_recip(double3 x);
int3 __CL_CONST_ATTRIBUTES ilogb(double3 x);
double3 __CL_CONST_ATTRIBUTES nan(ulong3 x);
double4 __CL_CONST_ATTRIBUTES acos(double4 x);
double4 __CL_CONST_ATTRIBUTES acosh(double4 x);
double4 __CL_CONST_ATTRIBUTES acospi(double4 x);
double4 __CL_CONST_ATTRIBUTES asin(double4 x);
double4 __CL_CONST_ATTRIBUTES asinh(double4 x);
double4 __CL_CONST_ATTRIBUTES asinpi(double4 x);
double4 __CL_CONST_ATTRIBUTES atan(double4 x);
double4 __CL_CONST_ATTRIBUTES atanh(double4 x);
double4 __CL_CONST_ATTRIBUTES atanpi(double4 x);
double4 __CL_CONST_ATTRIBUTES cbrt(double4 x);
double4 __CL_CONST_ATTRIBUTES ceil(double4 x);
double4 __CL_CONST_ATTRIBUTES cos(double4 x);
double4 __CL_CONST_ATTRIBUTES half_cos(double4 x);
double4 __CL_CONST_ATTRIBUTES native_cos(double4 x);
double4 __CL_CONST_ATTRIBUTES cosh(double4 x);
double4 __CL_CONST_ATTRIBUTES cospi(double4 x);
double4 __CL_CONST_ATTRIBUTES erfc(double4 x);
double4 __CL_CONST_ATTRIBUTES erf(double4 x);
double4 __CL_CONST_ATTRIBUTES exp(double4 x);
double4 __CL_CONST_ATTRIBUTES half_exp(double4 x);
double4 __CL_CONST_ATTRIBUTES native_exp(double4 x);
double4 __CL_CONST_ATTRIBUTES exp2(double4 x);
double4 __CL_CONST_ATTRIBUTES half_exp2(double4 x);
double4 __CL_CONST_ATTRIBUTES native_exp2(double4 x);
double4 __CL_CONST_ATTRIBUTES exp10(double4 x);
double4 __CL_CONST_ATTRIBUTES half_exp10(double4 x);
double4 __CL_CONST_ATTRIBUTES native_exp10(double4 x);
double4 __CL_CONST_ATTRIBUTES expm1(double4 x);
double4 __CL_CONST_ATTRIBUTES fabs(double4 x);
double4 __CL_CONST_ATTRIBUTES floor(double4 x);
double4 __CL_CONST_ATTRIBUTES lgamma(double4 x);
double4 __CL_CONST_ATTRIBUTES log(double4 x);
double4 __CL_CONST_ATTRIBUTES half_log(double4 x);
double4 __CL_CONST_ATTRIBUTES native_log(double4 x);
double4 __CL_CONST_ATTRIBUTES log2(double4 x);
double4 __CL_CONST_ATTRIBUTES half_log2(double4 x);
double4 __CL_CONST_ATTRIBUTES native_log2(double4 x);
double4 __CL_CONST_ATTRIBUTES log10(double4 x);
double4 __CL_CONST_ATTRIBUTES half_log10(double4 x);
double4 __CL_CONST_ATTRIBUTES native_log10(double4 x);
double4 __CL_CONST_ATTRIBUTES log1p(double4 x);
double4 __CL_CONST_ATTRIBUTES logb(double4 x);
double4 __CL_CONST_ATTRIBUTES rint(double4 x);
double4 __CL_CONST_ATTRIBUTES round(double4 x);
double4 __CL_CONST_ATTRIBUTES rsqrt(double4 x);
double4 __CL_CONST_ATTRIBUTES half_rsqrt(double4 x);
double4 __CL_CONST_ATTRIBUTES native_rsqrt(double4 x);
double4 __CL_CONST_ATTRIBUTES sin(double4 x);
double4 __CL_CONST_ATTRIBUTES half_sin(double4 x);
double4 __CL_CONST_ATTRIBUTES native_sin(double4 x);
double4 __CL_CONST_ATTRIBUTES sinh(double4 x);
double4 __CL_CONST_ATTRIBUTES sinpi(double4 x);
double4 __CL_CONST_ATTRIBUTES sqrt(double4 x);
double4 __CL_CONST_ATTRIBUTES half_sqrt(double4 x);
double4 __CL_CONST_ATTRIBUTES native_sqrt(double4 x);
double4 __CL_CONST_ATTRIBUTES tan(double4 x);
double4 __CL_CONST_ATTRIBUTES half_tan(double4 x);
double4 __CL_CONST_ATTRIBUTES native_tan(double4 x);
double4 __CL_CONST_ATTRIBUTES tanh(double4 x);
double4 __CL_CONST_ATTRIBUTES tanpi(double4 x);
double4 __CL_CONST_ATTRIBUTES tgamma(double4 x);
double4 __CL_CONST_ATTRIBUTES trunc(double4 x);
double4 __CL_CONST_ATTRIBUTES half_recip(double4 x);
double4 __CL_CONST_ATTRIBUTES native_recip(double4 x);
int4 __CL_CONST_ATTRIBUTES ilogb(double4 x);
double4 __CL_CONST_ATTRIBUTES nan(ulong4 x);
double8 __CL_CONST_ATTRIBUTES acos(double8 x);
double8 __CL_CONST_ATTRIBUTES acosh(double8 x);
double8 __CL_CONST_ATTRIBUTES acospi(double8 x);
double8 __CL_CONST_ATTRIBUTES asin(double8 x);
double8 __CL_CONST_ATTRIBUTES asinh(double8 x);
double8 __CL_CONST_ATTRIBUTES asinpi(double8 x);
double8 __CL_CONST_ATTRIBUTES atan(double8 x);
double8 __CL_CONST_ATTRIBUTES atanh(double8 x);
double8 __CL_CONST_ATTRIBUTES atanpi(double8 x);
double8 __CL_CONST_ATTRIBUTES cbrt(double8 x);
double8 __CL_CONST_ATTRIBUTES ceil(double8 x);
double8 __CL_CONST_ATTRIBUTES cos(double8 x);
double8 __CL_CONST_ATTRIBUTES half_cos(double8 x);
double8 __CL_CONST_ATTRIBUTES native_cos(double8 x);
double8 __CL_CONST_ATTRIBUTES cosh(double8 x);
double8 __CL_CONST_ATTRIBUTES cospi(double8 x);
double8 __CL_CONST_ATTRIBUTES erfc(double8 x);
double8 __CL_CONST_ATTRIBUTES erf(double8 x);
double8 __CL_CONST_ATTRIBUTES exp(double8 x);
double8 __CL_CONST_ATTRIBUTES half_exp(double8 x);
double8 __CL_CONST_ATTRIBUTES native_exp(double8 x);
double8 __CL_CONST_ATTRIBUTES exp2(double8 x);
double8 __CL_CONST_ATTRIBUTES half_exp2(double8 x);
double8 __CL_CONST_ATTRIBUTES native_exp2(double8 x);
double8 __CL_CONST_ATTRIBUTES exp10(double8 x);
double8 __CL_CONST_ATTRIBUTES half_exp10(double8 x);
double8 __CL_CONST_ATTRIBUTES native_exp10(double8 x);
double8 __CL_CONST_ATTRIBUTES expm1(double8 x);
double8 __CL_CONST_ATTRIBUTES fabs(double8 x);
double8 __CL_CONST_ATTRIBUTES floor(double8 x);
double8 __CL_CONST_ATTRIBUTES lgamma(double8 x);
double8 __CL_CONST_ATTRIBUTES log(double8 x);
double8 __CL_CONST_ATTRIBUTES half_log(double8 x);
double8 __CL_CONST_ATTRIBUTES native_log(double8 x);
double8 __CL_CONST_ATTRIBUTES log2(double8 x);
double8 __CL_CONST_ATTRIBUTES half_log2(double8 x);
double8 __CL_CONST_ATTRIBUTES native_log2(double8 x);
double8 __CL_CONST_ATTRIBUTES log10(double8 x);
double8 __CL_CONST_ATTRIBUTES half_log10(double8 x);
double8 __CL_CONST_ATTRIBUTES native_log10(double8 x);
double8 __CL_CONST_ATTRIBUTES log1p(double8 x);
double8 __CL_CONST_ATTRIBUTES logb(double8 x);
double8 __CL_CONST_ATTRIBUTES rint(double8 x);
double8 __CL_CONST_ATTRIBUTES round(double8 x);
double8 __CL_CONST_ATTRIBUTES rsqrt(double8 x);
double8 __CL_CONST_ATTRIBUTES half_rsqrt(double8 x);
double8 __CL_CONST_ATTRIBUTES native_rsqrt(double8 x);
double8 __CL_CONST_ATTRIBUTES sin(double8 x);
double8 __CL_CONST_ATTRIBUTES half_sin(double8 x);
double8 __CL_CONST_ATTRIBUTES native_sin(double8 x);
double8 __CL_CONST_ATTRIBUTES sinh(double8 x);
double8 __CL_CONST_ATTRIBUTES sinpi(double8 x);
double8 __CL_CONST_ATTRIBUTES sqrt(double8 x);
double8 __CL_CONST_ATTRIBUTES half_sqrt(double8 x);
double8 __CL_CONST_ATTRIBUTES native_sqrt(double8 x);
double8 __CL_CONST_ATTRIBUTES tan(double8 x);
double8 __CL_CONST_ATTRIBUTES half_tan(double8 x);
double8 __CL_CONST_ATTRIBUTES native_tan(double8 x);
double8 __CL_CONST_ATTRIBUTES tanh(double8 x);
double8 __CL_CONST_ATTRIBUTES tanpi(double8 x);
double8 __CL_CONST_ATTRIBUTES tgamma(double8 x);
double8 __CL_CONST_ATTRIBUTES trunc(double8 x);
double8 __CL_CONST_ATTRIBUTES half_recip(double8 x);
double8 __CL_CONST_ATTRIBUTES native_recip(double8 x);
int8 __CL_CONST_ATTRIBUTES ilogb(double8 x);
double8 __CL_CONST_ATTRIBUTES nan(ulong8 x);
double16 __CL_CONST_ATTRIBUTES acos(double16 x);
double16 __CL_CONST_ATTRIBUTES acosh(double16 x);
double16 __CL_CONST_ATTRIBUTES acospi(double16 x);
double16 __CL_CONST_ATTRIBUTES asin(double16 x);
double16 __CL_CONST_ATTRIBUTES asinh(double16 x);
double16 __CL_CONST_ATTRIBUTES asinpi(double16 x);
double16 __CL_CONST_ATTRIBUTES atan(double16 x);
double16 __CL_CONST_ATTRIBUTES atanh(double16 x);
double16 __CL_CONST_ATTRIBUTES atanpi(double16 x);
double16 __CL_CONST_ATTRIBUTES cbrt(double16 x);
double16 __CL_CONST_ATTRIBUTES ceil(double16 x);
double16 __CL_CONST_ATTRIBUTES cos(double16 x);
double16 __CL_CONST_ATTRIBUTES half_cos(double16 x);
double16 __CL_CONST_ATTRIBUTES native_cos(double16 x);
double16 __CL_CONST_ATTRIBUTES cosh(double16 x);
double16 __CL_CONST_ATTRIBUTES cospi(double16 x);
double16 __CL_CONST_ATTRIBUTES erfc(double16 x);
double16 __CL_CONST_ATTRIBUTES erf(double16 x);
double16 __CL_CONST_ATTRIBUTES exp(double16 x);
double16 __CL_CONST_ATTRIBUTES half_exp(double16 x);
double16 __CL_CONST_ATTRIBUTES native_exp(double16 x);
double16 __CL_CONST_ATTRIBUTES exp2(double16 x);
double16 __CL_CONST_ATTRIBUTES half_exp2(double16 x);
double16 __CL_CONST_ATTRIBUTES native_exp2(double16 x);
double16 __CL_CONST_ATTRIBUTES exp10(double16 x);
double16 __CL_CONST_ATTRIBUTES half_exp10(double16 x);
double16 __CL_CONST_ATTRIBUTES native_exp10(double16 x);
double16 __CL_CONST_ATTRIBUTES expm1(double16 x);
double16 __CL_CONST_ATTRIBUTES fabs(double16 x);
double16 __CL_CONST_ATTRIBUTES floor(double16 x);
double16 __CL_CONST_ATTRIBUTES lgamma(double16 x);
double16 __CL_CONST_ATTRIBUTES log(double16 x);
double16 __CL_CONST_ATTRIBUTES half_log(double16 x);
double16 __CL_CONST_ATTRIBUTES native_log(double16 x);
double16 __CL_CONST_ATTRIBUTES log2(double16 x);
double16 __CL_CONST_ATTRIBUTES half_log2(double16 x);
double16 __CL_CONST_ATTRIBUTES native_log2(double16 x);
double16 __CL_CONST_ATTRIBUTES log10(double16 x);
double16 __CL_CONST_ATTRIBUTES half_log10(double16 x);
double16 __CL_CONST_ATTRIBUTES native_log10(double16 x);
double16 __CL_CONST_ATTRIBUTES log1p(double16 x);
double16 __CL_CONST_ATTRIBUTES logb(double16 x);
double16 __CL_CONST_ATTRIBUTES rint(double16 x);
double16 __CL_CONST_ATTRIBUTES round(double16 x);
double16 __CL_CONST_ATTRIBUTES rsqrt(double16 x);
double16 __CL_CONST_ATTRIBUTES half_rsqrt(double16 x);
double16 __CL_CONST_ATTRIBUTES native_rsqrt(double16 x);
double16 __CL_CONST_ATTRIBUTES sin(double16 x);
double16 __CL_CONST_ATTRIBUTES half_sin(double16 x);
double16 __CL_CONST_ATTRIBUTES native_sin(double16 x);
double16 __CL_CONST_ATTRIBUTES sinh(double16 x);
double16 __CL_CONST_ATTRIBUTES sinpi(double16 x);
double16 __CL_CONST_ATTRIBUTES sqrt(double16 x);
double16 __CL_CONST_ATTRIBUTES half_sqrt(double16 x);
double16 __CL_CONST_ATTRIBUTES native_sqrt(double16 x);
double16 __CL_CONST_ATTRIBUTES tan(double16 x);
double16 __CL_CONST_ATTRIBUTES half_tan(double16 x);
double16 __CL_CONST_ATTRIBUTES native_tan(double16 x);
double16 __CL_CONST_ATTRIBUTES tanh(double16 x);
double16 __CL_CONST_ATTRIBUTES tanpi(double16 x);
double16 __CL_CONST_ATTRIBUTES tgamma(double16 x);
double16 __CL_CONST_ATTRIBUTES trunc(double16 x);
double16 __CL_CONST_ATTRIBUTES half_recip(double16 x);
double16 __CL_CONST_ATTRIBUTES native_recip(double16 x);
int16 __CL_CONST_ATTRIBUTES ilogb(double16 x);
double16 __CL_CONST_ATTRIBUTES nan(ulong16 x);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES atan2(half x, half y);
half __CL_CONST_ATTRIBUTES atan2pi(half x, half y);
half __CL_CONST_ATTRIBUTES copysign(half x, half y);
half __CL_CONST_ATTRIBUTES half_divide(half x, half y);
half __CL_CONST_ATTRIBUTES native_divide(half x, half y);
half __CL_CONST_ATTRIBUTES fdim(half x, half y);
half __CL_CONST_ATTRIBUTES fmax(half x, half y);
half __CL_CONST_ATTRIBUTES fmin(half x, half y);
half __CL_CONST_ATTRIBUTES fmod(half x, half y);
half __CL_CONST_ATTRIBUTES hypot(half x, half y);
half __CL_CONST_ATTRIBUTES maxmag(half x, half y);
half __CL_CONST_ATTRIBUTES minmag(half x, half y);
half __CL_CONST_ATTRIBUTES nextafter(half x, half y);
half __CL_CONST_ATTRIBUTES pow(half x, half y);
half __CL_CONST_ATTRIBUTES powr(half x, half y);
half __CL_CONST_ATTRIBUTES half_powr(half x, half y);
half __CL_CONST_ATTRIBUTES native_powr(half x, half y);
half __CL_CONST_ATTRIBUTES remainder(half x, half y);
half __CL_CONST_ATTRIBUTES ldexp(half x, int y);
half __CL_CONST_ATTRIBUTES pown(half x, int y);
half __CL_CONST_ATTRIBUTES rootn(half x, int y);
half __CL_BUILTIN_ATTRIBUTES fract(half x, private half* y);
half __CL_BUILTIN_ATTRIBUTES modf(half x, private half* y);
half __CL_BUILTIN_ATTRIBUTES sincos(half x, private half* y);
half __CL_BUILTIN_ATTRIBUTES frexp(half x, private int* y);
half __CL_BUILTIN_ATTRIBUTES lgamma_r(half x, private int* y);
half __CL_BUILTIN_ATTRIBUTES fract(half x, global half* y);
half __CL_BUILTIN_ATTRIBUTES modf(half x, global half* y);
half __CL_BUILTIN_ATTRIBUTES sincos(half x, global half* y);
half __CL_BUILTIN_ATTRIBUTES frexp(half x, global int* y);
half __CL_BUILTIN_ATTRIBUTES lgamma_r(half x, global int* y);
half __CL_BUILTIN_ATTRIBUTES fract(half x, local half* y);
half __CL_BUILTIN_ATTRIBUTES modf(half x, local half* y);
half __CL_BUILTIN_ATTRIBUTES sincos(half x, local half* y);
half __CL_BUILTIN_ATTRIBUTES frexp(half x, local int* y);
half __CL_BUILTIN_ATTRIBUTES lgamma_r(half x, local int* y);
half2 __CL_CONST_ATTRIBUTES atan2(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES atan2pi(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES copysign(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES half_divide(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES native_divide(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES fdim(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES fmax(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES fmin(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES fmod(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES hypot(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES maxmag(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES minmag(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES nextafter(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES pow(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES powr(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES half_powr(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES native_powr(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES remainder(half2 x, half2 y);
half2 __CL_CONST_ATTRIBUTES fmax(half2 x, half y);
half2 __CL_CONST_ATTRIBUTES fmin(half2 x, half y);
half2 __CL_CONST_ATTRIBUTES ldexp(half2 x, int2 y);
half2 __CL_CONST_ATTRIBUTES pown(half2 x, int2 y);
half2 __CL_CONST_ATTRIBUTES rootn(half2 x, int2 y);
half2 __CL_BUILTIN_ATTRIBUTES fract(half2 x, private half2* y);
half2 __CL_BUILTIN_ATTRIBUTES modf(half2 x, private half2* y);
half2 __CL_BUILTIN_ATTRIBUTES sincos(half2 x, private half2* y);
half2 __CL_BUILTIN_ATTRIBUTES frexp(half2 x, private int2* y);
half2 __CL_BUILTIN_ATTRIBUTES lgamma_r(half2 x, private int2* y);
half2 __CL_BUILTIN_ATTRIBUTES fract(half2 x, global half2* y);
half2 __CL_BUILTIN_ATTRIBUTES modf(half2 x, global half2* y);
half2 __CL_BUILTIN_ATTRIBUTES sincos(half2 x, global half2* y);
half2 __CL_BUILTIN_ATTRIBUTES frexp(half2 x, global int2* y);
half2 __CL_BUILTIN_ATTRIBUTES lgamma_r(half2 x, global int2* y);
half2 __CL_BUILTIN_ATTRIBUTES fract(half2 x, local half2* y);
half2 __CL_BUILTIN_ATTRIBUTES modf(half2 x, local half2* y);
half2 __CL_BUILTIN_ATTRIBUTES sincos(half2 x, local half2* y);
half2 __CL_BUILTIN_ATTRIBUTES frexp(half2 x, local int2* y);
half2 __CL_BUILTIN_ATTRIBUTES lgamma_r(half2 x, local int2* y);
half3 __CL_CONST_ATTRIBUTES atan2(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES atan2pi(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES copysign(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES half_divide(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES native_divide(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES fdim(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES fmax(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES fmin(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES fmod(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES hypot(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES maxmag(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES minmag(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES nextafter(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES pow(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES powr(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES half_powr(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES native_powr(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES remainder(half3 x, half3 y);
half3 __CL_CONST_ATTRIBUTES fmax(half3 x, half y);
half3 __CL_CONST_ATTRIBUTES fmin(half3 x, half y);
half3 __CL_CONST_ATTRIBUTES ldexp(half3 x, int3 y);
half3 __CL_CONST_ATTRIBUTES pown(half3 x, int3 y);
half3 __CL_CONST_ATTRIBUTES rootn(half3 x, int3 y);
half3 __CL_BUILTIN_ATTRIBUTES fract(half3 x, private half3* y);
half3 __CL_BUILTIN_ATTRIBUTES modf(half3 x, private half3* y);
half3 __CL_BUILTIN_ATTRIBUTES sincos(half3 x, private half3* y);
half3 __CL_BUILTIN_ATTRIBUTES frexp(half3 x, private int3* y);
half3 __CL_BUILTIN_ATTRIBUTES lgamma_r(half3 x, private int3* y);
half3 __CL_BUILTIN_ATTRIBUTES fract(half3 x, global half3* y);
half3 __CL_BUILTIN_ATTRIBUTES modf(half3 x, global half3* y);
half3 __CL_BUILTIN_ATTRIBUTES sincos(half3 x, global half3* y);
half3 __CL_BUILTIN_ATTRIBUTES frexp(half3 x, global int3* y);
half3 __CL_BUILTIN_ATTRIBUTES lgamma_r(half3 x, global int3* y);
half3 __CL_BUILTIN_ATTRIBUTES fract(half3 x, local half3* y);
half3 __CL_BUILTIN_ATTRIBUTES modf(half3 x, local half3* y);
half3 __CL_BUILTIN_ATTRIBUTES sincos(half3 x, local half3* y);
half3 __CL_BUILTIN_ATTRIBUTES frexp(half3 x, local int3* y);
half3 __CL_BUILTIN_ATTRIBUTES lgamma_r(half3 x, local int3* y);
half4 __CL_CONST_ATTRIBUTES atan2(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES atan2pi(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES copysign(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES half_divide(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES native_divide(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES fdim(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES fmax(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES fmin(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES fmod(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES hypot(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES maxmag(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES minmag(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES nextafter(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES pow(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES powr(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES half_powr(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES native_powr(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES remainder(half4 x, half4 y);
half4 __CL_CONST_ATTRIBUTES fmax(half4 x, half y);
half4 __CL_CONST_ATTRIBUTES fmin(half4 x, half y);
half4 __CL_CONST_ATTRIBUTES ldexp(half4 x, int4 y);
half4 __CL_CONST_ATTRIBUTES pown(half4 x, int4 y);
half4 __CL_CONST_ATTRIBUTES rootn(half4 x, int4 y);
half4 __CL_BUILTIN_ATTRIBUTES fract(half4 x, private half4* y);
half4 __CL_BUILTIN_ATTRIBUTES modf(half4 x, private half4* y);
half4 __CL_BUILTIN_ATTRIBUTES sincos(half4 x, private half4* y);
half4 __CL_BUILTIN_ATTRIBUTES frexp(half4 x, private int4* y);
half4 __CL_BUILTIN_ATTRIBUTES lgamma_r(half4 x, private int4* y);
half4 __CL_BUILTIN_ATTRIBUTES fract(half4 x, global half4* y);
half4 __CL_BUILTIN_ATTRIBUTES modf(half4 x, global half4* y);
half4 __CL_BUILTIN_ATTRIBUTES sincos(half4 x, global half4* y);
half4 __CL_BUILTIN_ATTRIBUTES frexp(half4 x, global int4* y);
half4 __CL_BUILTIN_ATTRIBUTES lgamma_r(half4 x, global int4* y);
half4 __CL_BUILTIN_ATTRIBUTES fract(half4 x, local half4* y);
half4 __CL_BUILTIN_ATTRIBUTES modf(half4 x, local half4* y);
half4 __CL_BUILTIN_ATTRIBUTES sincos(half4 x, local half4* y);
half4 __CL_BUILTIN_ATTRIBUTES frexp(half4 x, local int4* y);
half4 __CL_BUILTIN_ATTRIBUTES lgamma_r(half4 x, local int4* y);
half8 __CL_CONST_ATTRIBUTES atan2(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES atan2pi(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES copysign(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES half_divide(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES native_divide(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES fdim(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES fmax(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES fmin(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES fmod(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES hypot(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES maxmag(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES minmag(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES nextafter(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES pow(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES powr(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES half_powr(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES native_powr(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES remainder(half8 x, half8 y);
half8 __CL_CONST_ATTRIBUTES fmax(half8 x, half y);
half8 __CL_CONST_ATTRIBUTES fmin(half8 x, half y);
half8 __CL_CONST_ATTRIBUTES ldexp(half8 x, int8 y);
half8 __CL_CONST_ATTRIBUTES pown(half8 x, int8 y);
half8 __CL_CONST_ATTRIBUTES rootn(half8 x, int8 y);
half8 __CL_BUILTIN_ATTRIBUTES fract(half8 x, private half8* y);
half8 __CL_BUILTIN_ATTRIBUTES modf(half8 x, private half8* y);
half8 __CL_BUILTIN_ATTRIBUTES sincos(half8 x, private half8* y);
half8 __CL_BUILTIN_ATTRIBUTES frexp(half8 x, private int8* y);
half8 __CL_BUILTIN_ATTRIBUTES lgamma_r(half8 x, private int8* y);
half8 __CL_BUILTIN_ATTRIBUTES fract(half8 x, global half8* y);
half8 __CL_BUILTIN_ATTRIBUTES modf(half8 x, global half8* y);
half8 __CL_BUILTIN_ATTRIBUTES sincos(half8 x, global half8* y);
half8 __CL_BUILTIN_ATTRIBUTES frexp(half8 x, global int8* y);
half8 __CL_BUILTIN_ATTRIBUTES lgamma_r(half8 x, global int8* y);
half8 __CL_BUILTIN_ATTRIBUTES fract(half8 x, local half8* y);
half8 __CL_BUILTIN_ATTRIBUTES modf(half8 x, local half8* y);
half8 __CL_BUILTIN_ATTRIBUTES sincos(half8 x, local half8* y);
half8 __CL_BUILTIN_ATTRIBUTES frexp(half8 x, local int8* y);
half8 __CL_BUILTIN_ATTRIBUTES lgamma_r(half8 x, local int8* y);
half16 __CL_CONST_ATTRIBUTES atan2(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES atan2pi(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES copysign(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES half_divide(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES native_divide(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES fdim(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES fmax(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES fmin(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES fmod(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES hypot(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES maxmag(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES minmag(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES nextafter(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES pow(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES powr(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES half_powr(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES native_powr(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES remainder(half16 x, half16 y);
half16 __CL_CONST_ATTRIBUTES fmax(half16 x, half y);
half16 __CL_CONST_ATTRIBUTES fmin(half16 x, half y);
half16 __CL_CONST_ATTRIBUTES ldexp(half16 x, int16 y);
half16 __CL_CONST_ATTRIBUTES pown(half16 x, int16 y);
half16 __CL_CONST_ATTRIBUTES rootn(half16 x, int16 y);
half16 __CL_BUILTIN_ATTRIBUTES fract(half16 x, private half16* y);
half16 __CL_BUILTIN_ATTRIBUTES modf(half16 x, private half16* y);
half16 __CL_BUILTIN_ATTRIBUTES sincos(half16 x, private half16* y);
half16 __CL_BUILTIN_ATTRIBUTES frexp(half16 x, private int16* y);
half16 __CL_BUILTIN_ATTRIBUTES lgamma_r(half16 x, private int16* y);
half16 __CL_BUILTIN_ATTRIBUTES fract(half16 x, global half16* y);
half16 __CL_BUILTIN_ATTRIBUTES modf(half16 x, global half16* y);
half16 __CL_BUILTIN_ATTRIBUTES sincos(half16 x, global half16* y);
half16 __CL_BUILTIN_ATTRIBUTES frexp(half16 x, global int16* y);
half16 __CL_BUILTIN_ATTRIBUTES lgamma_r(half16 x, global int16* y);
half16 __CL_BUILTIN_ATTRIBUTES fract(half16 x, local half16* y);
half16 __CL_BUILTIN_ATTRIBUTES modf(half16 x, local half16* y);
half16 __CL_BUILTIN_ATTRIBUTES sincos(half16 x, local half16* y);
half16 __CL_BUILTIN_ATTRIBUTES frexp(half16 x, local int16* y);
half16 __CL_BUILTIN_ATTRIBUTES lgamma_r(half16 x, local int16* y);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES atan2(float x, float y);
float __CL_CONST_ATTRIBUTES atan2pi(float x, float y);
float __CL_CONST_ATTRIBUTES copysign(float x, float y);
float __CL_CONST_ATTRIBUTES half_divide(float x, float y);
float __CL_CONST_ATTRIBUTES native_divide(float x, float y);
float __CL_CONST_ATTRIBUTES fdim(float x, float y);
float __CL_CONST_ATTRIBUTES fmax(float x, float y);
float __CL_CONST_ATTRIBUTES fmin(float x, float y);
float __CL_CONST_ATTRIBUTES fmod(float x, float y);
float __CL_CONST_ATTRIBUTES hypot(float x, float y);
float __CL_CONST_ATTRIBUTES maxmag(float x, float y);
float __CL_CONST_ATTRIBUTES minmag(float x, float y);
float __CL_CONST_ATTRIBUTES nextafter(float x, float y);
float __CL_CONST_ATTRIBUTES pow(float x, float y);
float __CL_CONST_ATTRIBUTES powr(float x, float y);
float __CL_CONST_ATTRIBUTES half_powr(float x, float y);
float __CL_CONST_ATTRIBUTES native_powr(float x, float y);
float __CL_CONST_ATTRIBUTES remainder(float x, float y);
float __CL_CONST_ATTRIBUTES ldexp(float x, int y);
float __CL_CONST_ATTRIBUTES pown(float x, int y);
float __CL_CONST_ATTRIBUTES rootn(float x, int y);
float __CL_BUILTIN_ATTRIBUTES fract(float x, private float* y);
float __CL_BUILTIN_ATTRIBUTES modf(float x, private float* y);
float __CL_BUILTIN_ATTRIBUTES sincos(float x, private float* y);
float __CL_BUILTIN_ATTRIBUTES frexp(float x, private int* y);
float __CL_BUILTIN_ATTRIBUTES lgamma_r(float x, private int* y);
float __CL_BUILTIN_ATTRIBUTES fract(float x, global float* y);
float __CL_BUILTIN_ATTRIBUTES modf(float x, global float* y);
float __CL_BUILTIN_ATTRIBUTES sincos(float x, global float* y);
float __CL_BUILTIN_ATTRIBUTES frexp(float x, global int* y);
float __CL_BUILTIN_ATTRIBUTES lgamma_r(float x, global int* y);
float __CL_BUILTIN_ATTRIBUTES fract(float x, local float* y);
float __CL_BUILTIN_ATTRIBUTES modf(float x, local float* y);
float __CL_BUILTIN_ATTRIBUTES sincos(float x, local float* y);
float __CL_BUILTIN_ATTRIBUTES frexp(float x, local int* y);
float __CL_BUILTIN_ATTRIBUTES lgamma_r(float x, local int* y);
float2 __CL_CONST_ATTRIBUTES atan2(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES atan2pi(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES copysign(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES half_divide(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES native_divide(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES fdim(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES fmax(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES fmin(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES fmod(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES hypot(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES maxmag(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES minmag(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES nextafter(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES pow(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES powr(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES half_powr(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES native_powr(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES remainder(float2 x, float2 y);
float2 __CL_CONST_ATTRIBUTES fmax(float2 x, float y);
float2 __CL_CONST_ATTRIBUTES fmin(float2 x, float y);
float2 __CL_CONST_ATTRIBUTES ldexp(float2 x, int2 y);
float2 __CL_CONST_ATTRIBUTES pown(float2 x, int2 y);
float2 __CL_CONST_ATTRIBUTES rootn(float2 x, int2 y);
float2 __CL_BUILTIN_ATTRIBUTES fract(float2 x, private float2* y);
float2 __CL_BUILTIN_ATTRIBUTES modf(float2 x, private float2* y);
float2 __CL_BUILTIN_ATTRIBUTES sincos(float2 x, private float2* y);
float2 __CL_BUILTIN_ATTRIBUTES frexp(float2 x, private int2* y);
float2 __CL_BUILTIN_ATTRIBUTES lgamma_r(float2 x, private int2* y);
float2 __CL_BUILTIN_ATTRIBUTES fract(float2 x, global float2* y);
float2 __CL_BUILTIN_ATTRIBUTES modf(float2 x, global float2* y);
float2 __CL_BUILTIN_ATTRIBUTES sincos(float2 x, global float2* y);
float2 __CL_BUILTIN_ATTRIBUTES frexp(float2 x, global int2* y);
float2 __CL_BUILTIN_ATTRIBUTES lgamma_r(float2 x, global int2* y);
float2 __CL_BUILTIN_ATTRIBUTES fract(float2 x, local float2* y);
float2 __CL_BUILTIN_ATTRIBUTES modf(float2 x, local float2* y);
float2 __CL_BUILTIN_ATTRIBUTES sincos(float2 x, local float2* y);
float2 __CL_BUILTIN_ATTRIBUTES frexp(float2 x, local int2* y);
float2 __CL_BUILTIN_ATTRIBUTES lgamma_r(float2 x, local int2* y);
float3 __CL_CONST_ATTRIBUTES atan2(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES atan2pi(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES copysign(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES half_divide(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES native_divide(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES fdim(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES fmax(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES fmin(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES fmod(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES hypot(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES maxmag(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES minmag(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES nextafter(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES pow(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES powr(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES half_powr(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES native_powr(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES remainder(float3 x, float3 y);
float3 __CL_CONST_ATTRIBUTES fmax(float3 x, float y);
float3 __CL_CONST_ATTRIBUTES fmin(float3 x, float y);
float3 __CL_CONST_ATTRIBUTES ldexp(float3 x, int3 y);
float3 __CL_CONST_ATTRIBUTES pown(float3 x, int3 y);
float3 __CL_CONST_ATTRIBUTES rootn(float3 x, int3 y);
float3 __CL_BUILTIN_ATTRIBUTES fract(float3 x, private float3* y);
float3 __CL_BUILTIN_ATTRIBUTES modf(float3 x, private float3* y);
float3 __CL_BUILTIN_ATTRIBUTES sincos(float3 x, private float3* y);
float3 __CL_BUILTIN_ATTRIBUTES frexp(float3 x, private int3* y);
float3 __CL_BUILTIN_ATTRIBUTES lgamma_r(float3 x, private int3* y);
float3 __CL_BUILTIN_ATTRIBUTES fract(float3 x, global float3* y);
float3 __CL_BUILTIN_ATTRIBUTES modf(float3 x, global float3* y);
float3 __CL_BUILTIN_ATTRIBUTES sincos(float3 x, global float3* y);
float3 __CL_BUILTIN_ATTRIBUTES frexp(float3 x, global int3* y);
float3 __CL_BUILTIN_ATTRIBUTES lgamma_r(float3 x, global int3* y);
float3 __CL_BUILTIN_ATTRIBUTES fract(float3 x, local float3* y);
float3 __CL_BUILTIN_ATTRIBUTES modf(float3 x, local float3* y);
float3 __CL_BUILTIN_ATTRIBUTES sincos(float3 x, local float3* y);
float3 __CL_BUILTIN_ATTRIBUTES frexp(float3 x, local int3* y);
float3 __CL_BUILTIN_ATTRIBUTES lgamma_r(float3 x, local int3* y);
float4 __CL_CONST_ATTRIBUTES atan2(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES atan2pi(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES copysign(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES half_divide(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES native_divide(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES fdim(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES fmax(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES fmin(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES fmod(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES hypot(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES maxmag(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES minmag(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES nextafter(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES pow(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES powr(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES half_powr(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES native_powr(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES remainder(float4 x, float4 y);
float4 __CL_CONST_ATTRIBUTES fmax(float4 x, float y);
float4 __CL_CONST_ATTRIBUTES fmin(float4 x, float y);
float4 __CL_CONST_ATTRIBUTES ldexp(float4 x, int4 y);
float4 __CL_CONST_ATTRIBUTES pown(float4 x, int4 y);
float4 __CL_CONST_ATTRIBUTES rootn(float4 x, int4 y);
float4 __CL_BUILTIN_ATTRIBUTES fract(float4 x, private float4* y);
float4 __CL_BUILTIN_ATTRIBUTES modf(float4 x, private float4* y);
float4 __CL_BUILTIN_ATTRIBUTES sincos(float4 x, private float4* y);
float4 __CL_BUILTIN_ATTRIBUTES frexp(float4 x, private int4* y);
float4 __CL_BUILTIN_ATTRIBUTES lgamma_r(float4 x, private int4* y);
float4 __CL_BUILTIN_ATTRIBUTES fract(float4 x, global float4* y);
float4 __CL_BUILTIN_ATTRIBUTES modf(float4 x, global float4* y);
float4 __CL_BUILTIN_ATTRIBUTES sincos(float4 x, global float4* y);
float4 __CL_BUILTIN_ATTRIBUTES frexp(float4 x, global int4* y);
float4 __CL_BUILTIN_ATTRIBUTES lgamma_r(float4 x, global int4* y);
float4 __CL_BUILTIN_ATTRIBUTES fract(float4 x, local float4* y);
float4 __CL_BUILTIN_ATTRIBUTES modf(float4 x, local float4* y);
float4 __CL_BUILTIN_ATTRIBUTES sincos(float4 x, local float4* y);
float4 __CL_BUILTIN_ATTRIBUTES frexp(float4 x, local int4* y);
float4 __CL_BUILTIN_ATTRIBUTES lgamma_r(float4 x, local int4* y);
float8 __CL_CONST_ATTRIBUTES atan2(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES atan2pi(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES copysign(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES half_divide(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES native_divide(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES fdim(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES fmax(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES fmin(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES fmod(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES hypot(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES maxmag(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES minmag(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES nextafter(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES pow(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES powr(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES half_powr(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES native_powr(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES remainder(float8 x, float8 y);
float8 __CL_CONST_ATTRIBUTES fmax(float8 x, float y);
float8 __CL_CONST_ATTRIBUTES fmin(float8 x, float y);
float8 __CL_CONST_ATTRIBUTES ldexp(float8 x, int8 y);
float8 __CL_CONST_ATTRIBUTES pown(float8 x, int8 y);
float8 __CL_CONST_ATTRIBUTES rootn(float8 x, int8 y);
float8 __CL_BUILTIN_ATTRIBUTES fract(float8 x, private float8* y);
float8 __CL_BUILTIN_ATTRIBUTES modf(float8 x, private float8* y);
float8 __CL_BUILTIN_ATTRIBUTES sincos(float8 x, private float8* y);
float8 __CL_BUILTIN_ATTRIBUTES frexp(float8 x, private int8* y);
float8 __CL_BUILTIN_ATTRIBUTES lgamma_r(float8 x, private int8* y);
float8 __CL_BUILTIN_ATTRIBUTES fract(float8 x, global float8* y);
float8 __CL_BUILTIN_ATTRIBUTES modf(float8 x, global float8* y);
float8 __CL_BUILTIN_ATTRIBUTES sincos(float8 x, global float8* y);
float8 __CL_BUILTIN_ATTRIBUTES frexp(float8 x, global int8* y);
float8 __CL_BUILTIN_ATTRIBUTES lgamma_r(float8 x, global int8* y);
float8 __CL_BUILTIN_ATTRIBUTES fract(float8 x, local float8* y);
float8 __CL_BUILTIN_ATTRIBUTES modf(float8 x, local float8* y);
float8 __CL_BUILTIN_ATTRIBUTES sincos(float8 x, local float8* y);
float8 __CL_BUILTIN_ATTRIBUTES frexp(float8 x, local int8* y);
float8 __CL_BUILTIN_ATTRIBUTES lgamma_r(float8 x, local int8* y);
float16 __CL_CONST_ATTRIBUTES atan2(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES atan2pi(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES copysign(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES half_divide(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES native_divide(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES fdim(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES fmax(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES fmin(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES fmod(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES hypot(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES maxmag(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES minmag(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES nextafter(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES pow(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES powr(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES half_powr(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES native_powr(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES remainder(float16 x, float16 y);
float16 __CL_CONST_ATTRIBUTES fmax(float16 x, float y);
float16 __CL_CONST_ATTRIBUTES fmin(float16 x, float y);
float16 __CL_CONST_ATTRIBUTES ldexp(float16 x, int16 y);
float16 __CL_CONST_ATTRIBUTES pown(float16 x, int16 y);
float16 __CL_CONST_ATTRIBUTES rootn(float16 x, int16 y);
float16 __CL_BUILTIN_ATTRIBUTES fract(float16 x, private float16* y);
float16 __CL_BUILTIN_ATTRIBUTES modf(float16 x, private float16* y);
float16 __CL_BUILTIN_ATTRIBUTES sincos(float16 x, private float16* y);
float16 __CL_BUILTIN_ATTRIBUTES frexp(float16 x, private int16* y);
float16 __CL_BUILTIN_ATTRIBUTES lgamma_r(float16 x, private int16* y);
float16 __CL_BUILTIN_ATTRIBUTES fract(float16 x, global float16* y);
float16 __CL_BUILTIN_ATTRIBUTES modf(float16 x, global float16* y);
float16 __CL_BUILTIN_ATTRIBUTES sincos(float16 x, global float16* y);
float16 __CL_BUILTIN_ATTRIBUTES frexp(float16 x, global int16* y);
float16 __CL_BUILTIN_ATTRIBUTES lgamma_r(float16 x, global int16* y);
float16 __CL_BUILTIN_ATTRIBUTES fract(float16 x, local float16* y);
float16 __CL_BUILTIN_ATTRIBUTES modf(float16 x, local float16* y);
float16 __CL_BUILTIN_ATTRIBUTES sincos(float16 x, local float16* y);
float16 __CL_BUILTIN_ATTRIBUTES frexp(float16 x, local int16* y);
float16 __CL_BUILTIN_ATTRIBUTES lgamma_r(float16 x, local int16* y);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES atan2(double x, double y);
double __CL_CONST_ATTRIBUTES atan2pi(double x, double y);
double __CL_CONST_ATTRIBUTES copysign(double x, double y);
double __CL_CONST_ATTRIBUTES half_divide(double x, double y);
double __CL_CONST_ATTRIBUTES native_divide(double x, double y);
double __CL_CONST_ATTRIBUTES fdim(double x, double y);
double __CL_CONST_ATTRIBUTES fmax(double x, double y);
double __CL_CONST_ATTRIBUTES fmin(double x, double y);
double __CL_CONST_ATTRIBUTES fmod(double x, double y);
double __CL_CONST_ATTRIBUTES hypot(double x, double y);
double __CL_CONST_ATTRIBUTES maxmag(double x, double y);
double __CL_CONST_ATTRIBUTES minmag(double x, double y);
double __CL_CONST_ATTRIBUTES nextafter(double x, double y);
double __CL_CONST_ATTRIBUTES pow(double x, double y);
double __CL_CONST_ATTRIBUTES powr(double x, double y);
double __CL_CONST_ATTRIBUTES half_powr(double x, double y);
double __CL_CONST_ATTRIBUTES native_powr(double x, double y);
double __CL_CONST_ATTRIBUTES remainder(double x, double y);
double __CL_CONST_ATTRIBUTES ldexp(double x, int y);
double __CL_CONST_ATTRIBUTES pown(double x, int y);
double __CL_CONST_ATTRIBUTES rootn(double x, int y);
double __CL_BUILTIN_ATTRIBUTES fract(double x, private double* y);
double __CL_BUILTIN_ATTRIBUTES modf(double x, private double* y);
double __CL_BUILTIN_ATTRIBUTES sincos(double x, private double* y);
double __CL_BUILTIN_ATTRIBUTES frexp(double x, private int* y);
double __CL_BUILTIN_ATTRIBUTES lgamma_r(double x, private int* y);
double __CL_BUILTIN_ATTRIBUTES fract(double x, global double* y);
double __CL_BUILTIN_ATTRIBUTES modf(double x, global double* y);
double __CL_BUILTIN_ATTRIBUTES sincos(double x, global double* y);
double __CL_BUILTIN_ATTRIBUTES frexp(double x, global int* y);
double __CL_BUILTIN_ATTRIBUTES lgamma_r(double x, global int* y);
double __CL_BUILTIN_ATTRIBUTES fract(double x, local double* y);
double __CL_BUILTIN_ATTRIBUTES modf(double x, local double* y);
double __CL_BUILTIN_ATTRIBUTES sincos(double x, local double* y);
double __CL_BUILTIN_ATTRIBUTES frexp(double x, local int* y);
double __CL_BUILTIN_ATTRIBUTES lgamma_r(double x, local int* y);
double2 __CL_CONST_ATTRIBUTES atan2(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES atan2pi(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES copysign(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES half_divide(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES native_divide(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES fdim(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES fmax(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES fmin(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES fmod(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES hypot(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES maxmag(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES minmag(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES nextafter(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES pow(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES powr(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES half_powr(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES native_powr(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES remainder(double2 x, double2 y);
double2 __CL_CONST_ATTRIBUTES fmax(double2 x, double y);
double2 __CL_CONST_ATTRIBUTES fmin(double2 x, double y);
double2 __CL_CONST_ATTRIBUTES ldexp(double2 x, int2 y);
double2 __CL_CONST_ATTRIBUTES pown(double2 x, int2 y);
double2 __CL_CONST_ATTRIBUTES rootn(double2 x, int2 y);
double2 __CL_BUILTIN_ATTRIBUTES fract(double2 x, private double2* y);
double2 __CL_BUILTIN_ATTRIBUTES modf(double2 x, private double2* y);
double2 __CL_BUILTIN_ATTRIBUTES sincos(double2 x, private double2* y);
double2 __CL_BUILTIN_ATTRIBUTES frexp(double2 x, private int2* y);
double2 __CL_BUILTIN_ATTRIBUTES lgamma_r(double2 x, private int2* y);
double2 __CL_BUILTIN_ATTRIBUTES fract(double2 x, global double2* y);
double2 __CL_BUILTIN_ATTRIBUTES modf(double2 x, global double2* y);
double2 __CL_BUILTIN_ATTRIBUTES sincos(double2 x, global double2* y);
double2 __CL_BUILTIN_ATTRIBUTES frexp(double2 x, global int2* y);
double2 __CL_BUILTIN_ATTRIBUTES lgamma_r(double2 x, global int2* y);
double2 __CL_BUILTIN_ATTRIBUTES fract(double2 x, local double2* y);
double2 __CL_BUILTIN_ATTRIBUTES modf(double2 x, local double2* y);
double2 __CL_BUILTIN_ATTRIBUTES sincos(double2 x, local double2* y);
double2 __CL_BUILTIN_ATTRIBUTES frexp(double2 x, local int2* y);
double2 __CL_BUILTIN_ATTRIBUTES lgamma_r(double2 x, local int2* y);
double3 __CL_CONST_ATTRIBUTES atan2(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES atan2pi(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES copysign(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES half_divide(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES native_divide(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES fdim(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES fmax(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES fmin(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES fmod(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES hypot(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES maxmag(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES minmag(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES nextafter(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES pow(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES powr(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES half_powr(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES native_powr(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES remainder(double3 x, double3 y);
double3 __CL_CONST_ATTRIBUTES fmax(double3 x, double y);
double3 __CL_CONST_ATTRIBUTES fmin(double3 x, double y);
double3 __CL_CONST_ATTRIBUTES ldexp(double3 x, int3 y);
double3 __CL_CONST_ATTRIBUTES pown(double3 x, int3 y);
double3 __CL_CONST_ATTRIBUTES rootn(double3 x, int3 y);
double3 __CL_BUILTIN_ATTRIBUTES fract(double3 x, private double3* y);
double3 __CL_BUILTIN_ATTRIBUTES modf(double3 x, private double3* y);
double3 __CL_BUILTIN_ATTRIBUTES sincos(double3 x, private double3* y);
double3 __CL_BUILTIN_ATTRIBUTES frexp(double3 x, private int3* y);
double3 __CL_BUILTIN_ATTRIBUTES lgamma_r(double3 x, private int3* y);
double3 __CL_BUILTIN_ATTRIBUTES fract(double3 x, global double3* y);
double3 __CL_BUILTIN_ATTRIBUTES modf(double3 x, global double3* y);
double3 __CL_BUILTIN_ATTRIBUTES sincos(double3 x, global double3* y);
double3 __CL_BUILTIN_ATTRIBUTES frexp(double3 x, global int3* y);
double3 __CL_BUILTIN_ATTRIBUTES lgamma_r(double3 x, global int3* y);
double3 __CL_BUILTIN_ATTRIBUTES fract(double3 x, local double3* y);
double3 __CL_BUILTIN_ATTRIBUTES modf(double3 x, local double3* y);
double3 __CL_BUILTIN_ATTRIBUTES sincos(double3 x, local double3* y);
double3 __CL_BUILTIN_ATTRIBUTES frexp(double3 x, local int3* y);
double3 __CL_BUILTIN_ATTRIBUTES lgamma_r(double3 x, local int3* y);
double4 __CL_CONST_ATTRIBUTES atan2(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES atan2pi(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES copysign(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES half_divide(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES native_divide(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES fdim(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES fmax(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES fmin(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES fmod(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES hypot(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES maxmag(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES minmag(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES nextafter(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES pow(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES powr(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES half_powr(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES native_powr(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES remainder(double4 x, double4 y);
double4 __CL_CONST_ATTRIBUTES fmax(double4 x, double y);
double4 __CL_CONST_ATTRIBUTES fmin(double4 x, double y);
double4 __CL_CONST_ATTRIBUTES ldexp(double4 x, int4 y);
double4 __CL_CONST_ATTRIBUTES pown(double4 x, int4 y);
double4 __CL_CONST_ATTRIBUTES rootn(double4 x, int4 y);
double4 __CL_BUILTIN_ATTRIBUTES fract(double4 x, private double4* y);
double4 __CL_BUILTIN_ATTRIBUTES modf(double4 x, private double4* y);
double4 __CL_BUILTIN_ATTRIBUTES sincos(double4 x, private double4* y);
double4 __CL_BUILTIN_ATTRIBUTES frexp(double4 x, private int4* y);
double4 __CL_BUILTIN_ATTRIBUTES lgamma_r(double4 x, private int4* y);
double4 __CL_BUILTIN_ATTRIBUTES fract(double4 x, global double4* y);
double4 __CL_BUILTIN_ATTRIBUTES modf(double4 x, global double4* y);
double4 __CL_BUILTIN_ATTRIBUTES sincos(double4 x, global double4* y);
double4 __CL_BUILTIN_ATTRIBUTES frexp(double4 x, global int4* y);
double4 __CL_BUILTIN_ATTRIBUTES lgamma_r(double4 x, global int4* y);
double4 __CL_BUILTIN_ATTRIBUTES fract(double4 x, local double4* y);
double4 __CL_BUILTIN_ATTRIBUTES modf(double4 x, local double4* y);
double4 __CL_BUILTIN_ATTRIBUTES sincos(double4 x, local double4* y);
double4 __CL_BUILTIN_ATTRIBUTES frexp(double4 x, local int4* y);
double4 __CL_BUILTIN_ATTRIBUTES lgamma_r(double4 x, local int4* y);
double8 __CL_CONST_ATTRIBUTES atan2(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES atan2pi(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES copysign(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES half_divide(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES native_divide(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES fdim(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES fmax(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES fmin(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES fmod(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES hypot(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES maxmag(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES minmag(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES nextafter(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES pow(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES powr(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES half_powr(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES native_powr(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES remainder(double8 x, double8 y);
double8 __CL_CONST_ATTRIBUTES fmax(double8 x, double y);
double8 __CL_CONST_ATTRIBUTES fmin(double8 x, double y);
double8 __CL_CONST_ATTRIBUTES ldexp(double8 x, int8 y);
double8 __CL_CONST_ATTRIBUTES pown(double8 x, int8 y);
double8 __CL_CONST_ATTRIBUTES rootn(double8 x, int8 y);
double8 __CL_BUILTIN_ATTRIBUTES fract(double8 x, private double8* y);
double8 __CL_BUILTIN_ATTRIBUTES modf(double8 x, private double8* y);
double8 __CL_BUILTIN_ATTRIBUTES sincos(double8 x, private double8* y);
double8 __CL_BUILTIN_ATTRIBUTES frexp(double8 x, private int8* y);
double8 __CL_BUILTIN_ATTRIBUTES lgamma_r(double8 x, private int8* y);
double8 __CL_BUILTIN_ATTRIBUTES fract(double8 x, global double8* y);
double8 __CL_BUILTIN_ATTRIBUTES modf(double8 x, global double8* y);
double8 __CL_BUILTIN_ATTRIBUTES sincos(double8 x, global double8* y);
double8 __CL_BUILTIN_ATTRIBUTES frexp(double8 x, global int8* y);
double8 __CL_BUILTIN_ATTRIBUTES lgamma_r(double8 x, global int8* y);
double8 __CL_BUILTIN_ATTRIBUTES fract(double8 x, local double8* y);
double8 __CL_BUILTIN_ATTRIBUTES modf(double8 x, local double8* y);
double8 __CL_BUILTIN_ATTRIBUTES sincos(double8 x, local double8* y);
double8 __CL_BUILTIN_ATTRIBUTES frexp(double8 x, local int8* y);
double8 __CL_BUILTIN_ATTRIBUTES lgamma_r(double8 x, local int8* y);
double16 __CL_CONST_ATTRIBUTES atan2(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES atan2pi(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES copysign(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES half_divide(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES native_divide(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES fdim(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES fmax(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES fmin(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES fmod(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES hypot(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES maxmag(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES minmag(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES nextafter(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES pow(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES powr(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES half_powr(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES native_powr(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES remainder(double16 x, double16 y);
double16 __CL_CONST_ATTRIBUTES fmax(double16 x, double y);
double16 __CL_CONST_ATTRIBUTES fmin(double16 x, double y);
double16 __CL_CONST_ATTRIBUTES ldexp(double16 x, int16 y);
double16 __CL_CONST_ATTRIBUTES pown(double16 x, int16 y);
double16 __CL_CONST_ATTRIBUTES rootn(double16 x, int16 y);
double16 __CL_BUILTIN_ATTRIBUTES fract(double16 x, private double16* y);
double16 __CL_BUILTIN_ATTRIBUTES modf(double16 x, private double16* y);
double16 __CL_BUILTIN_ATTRIBUTES sincos(double16 x, private double16* y);
double16 __CL_BUILTIN_ATTRIBUTES frexp(double16 x, private int16* y);
double16 __CL_BUILTIN_ATTRIBUTES lgamma_r(double16 x, private int16* y);
double16 __CL_BUILTIN_ATTRIBUTES fract(double16 x, global double16* y);
double16 __CL_BUILTIN_ATTRIBUTES modf(double16 x, global double16* y);
double16 __CL_BUILTIN_ATTRIBUTES sincos(double16 x, global double16* y);
double16 __CL_BUILTIN_ATTRIBUTES frexp(double16 x, global int16* y);
double16 __CL_BUILTIN_ATTRIBUTES lgamma_r(double16 x, global int16* y);
double16 __CL_BUILTIN_ATTRIBUTES fract(double16 x, local double16* y);
double16 __CL_BUILTIN_ATTRIBUTES modf(double16 x, local double16* y);
double16 __CL_BUILTIN_ATTRIBUTES sincos(double16 x, local double16* y);
double16 __CL_BUILTIN_ATTRIBUTES frexp(double16 x, local int16* y);
double16 __CL_BUILTIN_ATTRIBUTES lgamma_r(double16 x, local int16* y);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES fma(half x, half y, half z);
half __CL_CONST_ATTRIBUTES mad(half x, half y, half z);
half __CL_BUILTIN_ATTRIBUTES remquo(half x, half y, private int* z);
half __CL_BUILTIN_ATTRIBUTES remquo(half x, half y, global int* z);
half __CL_BUILTIN_ATTRIBUTES remquo(half x, half y, local int* z);
half2 __CL_CONST_ATTRIBUTES fma(half2 x, half2 y, half2 z);
half2 __CL_CONST_ATTRIBUTES mad(half2 x, half2 y, half2 z);
half2 __CL_BUILTIN_ATTRIBUTES remquo(half2 x, half2 y, private int2* z);
half2 __CL_BUILTIN_ATTRIBUTES remquo(half2 x, half2 y, global int2* z);
half2 __CL_BUILTIN_ATTRIBUTES remquo(half2 x, half2 y, local int2* z);
half3 __CL_CONST_ATTRIBUTES fma(half3 x, half3 y, half3 z);
half3 __CL_CONST_ATTRIBUTES mad(half3 x, half3 y, half3 z);
half3 __CL_BUILTIN_ATTRIBUTES remquo(half3 x, half3 y, private int3* z);
half3 __CL_BUILTIN_ATTRIBUTES remquo(half3 x, half3 y, global int3* z);
half3 __CL_BUILTIN_ATTRIBUTES remquo(half3 x, half3 y, local int3* z);
half4 __CL_CONST_ATTRIBUTES fma(half4 x, half4 y, half4 z);
half4 __CL_CONST_ATTRIBUTES mad(half4 x, half4 y, half4 z);
half4 __CL_BUILTIN_ATTRIBUTES remquo(half4 x, half4 y, private int4* z);
half4 __CL_BUILTIN_ATTRIBUTES remquo(half4 x, half4 y, global int4* z);
half4 __CL_BUILTIN_ATTRIBUTES remquo(half4 x, half4 y, local int4* z);
half8 __CL_CONST_ATTRIBUTES fma(half8 x, half8 y, half8 z);
half8 __CL_CONST_ATTRIBUTES mad(half8 x, half8 y, half8 z);
half8 __CL_BUILTIN_ATTRIBUTES remquo(half8 x, half8 y, private int8* z);
half8 __CL_BUILTIN_ATTRIBUTES remquo(half8 x, half8 y, global int8* z);
half8 __CL_BUILTIN_ATTRIBUTES remquo(half8 x, half8 y, local int8* z);
half16 __CL_CONST_ATTRIBUTES fma(half16 x, half16 y, half16 z);
half16 __CL_CONST_ATTRIBUTES mad(half16 x, half16 y, half16 z);
half16 __CL_BUILTIN_ATTRIBUTES remquo(half16 x, half16 y, private int16* z);
half16 __CL_BUILTIN_ATTRIBUTES remquo(half16 x, half16 y, global int16* z);
half16 __CL_BUILTIN_ATTRIBUTES remquo(half16 x, half16 y, local int16* z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES fma(float x, float y, float z);
float __CL_CONST_ATTRIBUTES mad(float x, float y, float z);
float __CL_BUILTIN_ATTRIBUTES remquo(float x, float y, private int* z);
float __CL_BUILTIN_ATTRIBUTES remquo(float x, float y, global int* z);
float __CL_BUILTIN_ATTRIBUTES remquo(float x, float y, local int* z);
float2 __CL_CONST_ATTRIBUTES fma(float2 x, float2 y, float2 z);
float2 __CL_CONST_ATTRIBUTES mad(float2 x, float2 y, float2 z);
float2 __CL_BUILTIN_ATTRIBUTES remquo(float2 x, float2 y, private int2* z);
float2 __CL_BUILTIN_ATTRIBUTES remquo(float2 x, float2 y, global int2* z);
float2 __CL_BUILTIN_ATTRIBUTES remquo(float2 x, float2 y, local int2* z);
float3 __CL_CONST_ATTRIBUTES fma(float3 x, float3 y, float3 z);
float3 __CL_CONST_ATTRIBUTES mad(float3 x, float3 y, float3 z);
float3 __CL_BUILTIN_ATTRIBUTES remquo(float3 x, float3 y, private int3* z);
float3 __CL_BUILTIN_ATTRIBUTES remquo(float3 x, float3 y, global int3* z);
float3 __CL_BUILTIN_ATTRIBUTES remquo(float3 x, float3 y, local int3* z);
float4 __CL_CONST_ATTRIBUTES fma(float4 x, float4 y, float4 z);
float4 __CL_CONST_ATTRIBUTES mad(float4 x, float4 y, float4 z);
float4 __CL_BUILTIN_ATTRIBUTES remquo(float4 x, float4 y, private int4* z);
float4 __CL_BUILTIN_ATTRIBUTES remquo(float4 x, float4 y, global int4* z);
float4 __CL_BUILTIN_ATTRIBUTES remquo(float4 x, float4 y, local int4* z);
float8 __CL_CONST_ATTRIBUTES fma(float8 x, float8 y, float8 z);
float8 __CL_CONST_ATTRIBUTES mad(float8 x, float8 y, float8 z);
float8 __CL_BUILTIN_ATTRIBUTES remquo(float8 x, float8 y, private int8* z);
float8 __CL_BUILTIN_ATTRIBUTES remquo(float8 x, float8 y, global int8* z);
float8 __CL_BUILTIN_ATTRIBUTES remquo(float8 x, float8 y, local int8* z);
float16 __CL_CONST_ATTRIBUTES fma(float16 x, float16 y, float16 z);
float16 __CL_CONST_ATTRIBUTES mad(float16 x, float16 y, float16 z);
float16 __CL_BUILTIN_ATTRIBUTES remquo(float16 x, float16 y, private int16* z);
float16 __CL_BUILTIN_ATTRIBUTES remquo(float16 x, float16 y, global int16* z);
float16 __CL_BUILTIN_ATTRIBUTES remquo(float16 x, float16 y, local int16* z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES fma(double x, double y, double z);
double __CL_CONST_ATTRIBUTES mad(double x, double y, double z);
double __CL_BUILTIN_ATTRIBUTES remquo(double x, double y, private int* z);
double __CL_BUILTIN_ATTRIBUTES remquo(double x, double y, global int* z);
double __CL_BUILTIN_ATTRIBUTES remquo(double x, double y, local int* z);
double2 __CL_CONST_ATTRIBUTES fma(double2 x, double2 y, double2 z);
double2 __CL_CONST_ATTRIBUTES mad(double2 x, double2 y, double2 z);
double2 __CL_BUILTIN_ATTRIBUTES remquo(double2 x, double2 y, private int2* z);
double2 __CL_BUILTIN_ATTRIBUTES remquo(double2 x, double2 y, global int2* z);
double2 __CL_BUILTIN_ATTRIBUTES remquo(double2 x, double2 y, local int2* z);
double3 __CL_CONST_ATTRIBUTES fma(double3 x, double3 y, double3 z);
double3 __CL_CONST_ATTRIBUTES mad(double3 x, double3 y, double3 z);
double3 __CL_BUILTIN_ATTRIBUTES remquo(double3 x, double3 y, private int3* z);
double3 __CL_BUILTIN_ATTRIBUTES remquo(double3 x, double3 y, global int3* z);
double3 __CL_BUILTIN_ATTRIBUTES remquo(double3 x, double3 y, local int3* z);
double4 __CL_CONST_ATTRIBUTES fma(double4 x, double4 y, double4 z);
double4 __CL_CONST_ATTRIBUTES mad(double4 x, double4 y, double4 z);
double4 __CL_BUILTIN_ATTRIBUTES remquo(double4 x, double4 y, private int4* z);
double4 __CL_BUILTIN_ATTRIBUTES remquo(double4 x, double4 y, global int4* z);
double4 __CL_BUILTIN_ATTRIBUTES remquo(double4 x, double4 y, local int4* z);
double8 __CL_CONST_ATTRIBUTES fma(double8 x, double8 y, double8 z);
double8 __CL_CONST_ATTRIBUTES mad(double8 x, double8 y, double8 z);
double8 __CL_BUILTIN_ATTRIBUTES remquo(double8 x, double8 y, private int8* z);
double8 __CL_BUILTIN_ATTRIBUTES remquo(double8 x, double8 y, global int8* z);
double8 __CL_BUILTIN_ATTRIBUTES remquo(double8 x, double8 y, local int8* z);
double16 __CL_CONST_ATTRIBUTES fma(double16 x, double16 y, double16 z);
double16 __CL_CONST_ATTRIBUTES mad(double16 x, double16 y, double16 z);
double16 __CL_BUILTIN_ATTRIBUTES remquo(double16 x, double16 y,
                                        private int16* z);
double16 __CL_BUILTIN_ATTRIBUTES remquo(double16 x, double16 y,
                                        global int16* z);
double16 __CL_BUILTIN_ATTRIBUTES remquo(double16 x, double16 y, local int16* z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifndef __cplusplus
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local char* dst,
                                                      const global char* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global char* dst,
                                                      const local char* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local char2* dst,
                                                      const global char2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global char2* dst,
                                                      const local char2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local char3* dst,
                                                      const global char3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global char3* dst,
                                                      const local char3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local char4* dst,
                                                      const global char4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global char4* dst,
                                                      const local char4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local char8* dst,
                                                      const global char8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global char8* dst,
                                                      const local char8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local char16* dst,
                                                      const global char16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global char16* dst,
                                                      const local char16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local short* dst,
                                                      const global short* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global short* dst,
                                                      const local short* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local short2* dst,
                                                      const global short2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global short2* dst,
                                                      const local short2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local short3* dst,
                                                      const global short3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global short3* dst,
                                                      const local short3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local short4* dst,
                                                      const global short4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global short4* dst,
                                                      const local short4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local short8* dst,
                                                      const global short8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global short8* dst,
                                                      const local short8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local short16* dst,
                                                      const global short16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global short16* dst,
                                                      const local short16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local int* dst,
                                                      const global int* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global int* dst,
                                                      const local int* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local int2* dst,
                                                      const global int2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global int2* dst,
                                                      const local int2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local int3* dst,
                                                      const global int3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global int3* dst,
                                                      const local int3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local int4* dst,
                                                      const global int4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global int4* dst,
                                                      const local int4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local int8* dst,
                                                      const global int8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global int8* dst,
                                                      const local int8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local int16* dst,
                                                      const global int16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global int16* dst,
                                                      const local int16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local long* dst,
                                                      const global long* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global long* dst,
                                                      const local long* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local long2* dst,
                                                      const global long2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global long2* dst,
                                                      const local long2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local long3* dst,
                                                      const global long3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global long3* dst,
                                                      const local long3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local long4* dst,
                                                      const global long4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global long4* dst,
                                                      const local long4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local long8* dst,
                                                      const global long8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global long8* dst,
                                                      const local long8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local long16* dst,
                                                      const global long16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global long16* dst,
                                                      const local long16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uchar* dst,
                                                      const global uchar* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uchar* dst,
                                                      const local uchar* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uchar2* dst,
                                                      const global uchar2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uchar2* dst,
                                                      const local uchar2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uchar3* dst,
                                                      const global uchar3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uchar3* dst,
                                                      const local uchar3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uchar4* dst,
                                                      const global uchar4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uchar4* dst,
                                                      const local uchar4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uchar8* dst,
                                                      const global uchar8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uchar8* dst,
                                                      const local uchar8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uchar16* dst,
                                                      const global uchar16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uchar16* dst,
                                                      const local uchar16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ushort* dst,
                                                      const global ushort* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ushort* dst,
                                                      const local ushort* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ushort2* dst,
                                                      const global ushort2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ushort2* dst,
                                                      const local ushort2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ushort3* dst,
                                                      const global ushort3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ushort3* dst,
                                                      const local ushort3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ushort4* dst,
                                                      const global ushort4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ushort4* dst,
                                                      const local ushort4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ushort8* dst,
                                                      const global ushort8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ushort8* dst,
                                                      const local ushort8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(
    local ushort16* dst, const global ushort16* src, size_t num, event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ushort16* dst,
                                                      const local ushort16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uint* dst,
                                                      const global uint* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uint* dst,
                                                      const local uint* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uint2* dst,
                                                      const global uint2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uint2* dst,
                                                      const local uint2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uint3* dst,
                                                      const global uint3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uint3* dst,
                                                      const local uint3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uint4* dst,
                                                      const global uint4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uint4* dst,
                                                      const local uint4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uint8* dst,
                                                      const global uint8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uint8* dst,
                                                      const local uint8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local uint16* dst,
                                                      const global uint16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global uint16* dst,
                                                      const local uint16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ulong* dst,
                                                      const global ulong* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ulong* dst,
                                                      const local ulong* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ulong2* dst,
                                                      const global ulong2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ulong2* dst,
                                                      const local ulong2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ulong3* dst,
                                                      const global ulong3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ulong3* dst,
                                                      const local ulong3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ulong4* dst,
                                                      const global ulong4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ulong4* dst,
                                                      const local ulong4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ulong8* dst,
                                                      const global ulong8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ulong8* dst,
                                                      const local ulong8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local ulong16* dst,
                                                      const global ulong16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global ulong16* dst,
                                                      const local ulong16* src,
                                                      size_t num,
                                                      event_t event);
#ifdef __CA_BUILTINS_HALF_SUPPORT
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local half* dst,
                                                      const global half* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global half* dst,
                                                      const local half* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local half2* dst,
                                                      const global half2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global half2* dst,
                                                      const local half2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local half3* dst,
                                                      const global half3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global half3* dst,
                                                      const local half3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local half4* dst,
                                                      const global half4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global half4* dst,
                                                      const local half4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local half8* dst,
                                                      const global half8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global half8* dst,
                                                      const local half8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local half16* dst,
                                                      const global half16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global half16* dst,
                                                      const local half16* src,
                                                      size_t num,
                                                      event_t event);
#endif  // __CA_BUILTINS_HALF_SUPPORT
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local float* dst,
                                                      const global float* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global float* dst,
                                                      const local float* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local float2* dst,
                                                      const global float2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global float2* dst,
                                                      const local float2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local float3* dst,
                                                      const global float3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global float3* dst,
                                                      const local float3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local float4* dst,
                                                      const global float4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global float4* dst,
                                                      const local float4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local float8* dst,
                                                      const global float8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global float8* dst,
                                                      const local float8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local float16* dst,
                                                      const global float16* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global float16* dst,
                                                      const local float16* src,
                                                      size_t num,
                                                      event_t event);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local double* dst,
                                                      const global double* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global double* dst,
                                                      const local double* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local double2* dst,
                                                      const global double2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global double2* dst,
                                                      const local double2* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local double3* dst,
                                                      const global double3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global double3* dst,
                                                      const local double3* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local double4* dst,
                                                      const global double4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global double4* dst,
                                                      const local double4* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(local double8* dst,
                                                      const global double8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global double8* dst,
                                                      const local double8* src,
                                                      size_t num,
                                                      event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(
    local double16* dst, const global double16* src, size_t num, event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy(global double16* dst,
                                                      const local double16* src,
                                                      size_t num,
                                                      event_t event);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local char* dst, const global char* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global char* dst, const local char* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local char2* dst, const global char2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global char2* dst, const local char2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local char3* dst, const global char3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global char3* dst, const local char3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local char4* dst, const global char4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global char4* dst, const local char4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local char8* dst, const global char8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global char8* dst, const local char8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local char16* dst, const global char16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global char16* dst, const local char16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local short* dst, const global short* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global short* dst, const local short* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local short2* dst, const global short2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global short2* dst, const local short2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local short3* dst, const global short3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global short3* dst, const local short3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local short4* dst, const global short4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global short4* dst, const local short4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local short8* dst, const global short8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global short8* dst, const local short8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local short16* dst, const global short16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global short16* dst, const local short16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local int* dst, const global int* src, size_t num,
                              size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global int* dst, const local int* src, size_t num,
                              size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local int2* dst, const global int2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global int2* dst, const local int2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local int3* dst, const global int3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global int3* dst, const local int3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local int4* dst, const global int4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global int4* dst, const local int4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local int8* dst, const global int8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global int8* dst, const local int8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local int16* dst, const global int16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global int16* dst, const local int16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local long* dst, const global long* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global long* dst, const local long* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local long2* dst, const global long2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global long2* dst, const local long2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local long3* dst, const global long3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global long3* dst, const local long3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local long4* dst, const global long4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global long4* dst, const local long4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local long8* dst, const global long8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global long8* dst, const local long8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local long16* dst, const global long16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global long16* dst, const local long16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uchar* dst, const global uchar* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uchar* dst, const local uchar* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uchar2* dst, const global uchar2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uchar2* dst, const local uchar2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uchar3* dst, const global uchar3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uchar3* dst, const local uchar3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uchar4* dst, const global uchar4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uchar4* dst, const local uchar4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uchar8* dst, const global uchar8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uchar8* dst, const local uchar8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uchar16* dst, const global uchar16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uchar16* dst, const local uchar16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ushort* dst, const global ushort* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ushort* dst, const local ushort* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ushort2* dst, const global ushort2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ushort2* dst, const local ushort2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ushort3* dst, const global ushort3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ushort3* dst, const local ushort3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ushort4* dst, const global ushort4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ushort4* dst, const local ushort4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ushort8* dst, const global ushort8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ushort8* dst, const local ushort8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ushort16* dst, const global ushort16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ushort16* dst, const local ushort16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uint* dst, const global uint* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uint* dst, const local uint* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uint2* dst, const global uint2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uint2* dst, const local uint2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uint3* dst, const global uint3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uint3* dst, const local uint3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uint4* dst, const global uint4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uint4* dst, const local uint4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uint8* dst, const global uint8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uint8* dst, const local uint8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local uint16* dst, const global uint16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global uint16* dst, const local uint16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ulong* dst, const global ulong* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ulong* dst, const local ulong* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ulong2* dst, const global ulong2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ulong2* dst, const local ulong2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ulong3* dst, const global ulong3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ulong3* dst, const local ulong3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ulong4* dst, const global ulong4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ulong4* dst, const local ulong4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ulong8* dst, const global ulong8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ulong8* dst, const local ulong8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local ulong16* dst, const global ulong16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global ulong16* dst, const local ulong16* src,
                              size_t num, size_t stride, event_t event);
#ifdef __CA_BUILTINS_HALF_SUPPORT
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local half* dst, const global half* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global half* dst, const local half* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local half2* dst, const global half2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global half2* dst, const local half2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local half3* dst, const global half3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global half3* dst, const local half3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local half4* dst, const global half4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global half4* dst, const local half4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local half8* dst, const global half8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global half8* dst, const local half8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local half16* dst, const global half16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global half16* dst, const local half16* src,
                              size_t num, size_t stride, event_t event);
#endif  // __CA_BUILTINS_HALF_SUPPORT
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local float* dst, const global float* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global float* dst, const local float* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local float2* dst, const global float2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global float2* dst, const local float2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local float3* dst, const global float3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global float3* dst, const local float3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local float4* dst, const global float4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global float4* dst, const local float4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local float8* dst, const global float8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global float8* dst, const local float8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local float16* dst, const global float16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global float16* dst, const local float16* src,
                              size_t num, size_t stride, event_t event);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local double* dst, const global double* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global double* dst, const local double* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local double2* dst, const global double2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global double2* dst, const local double2* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local double3* dst, const global double3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global double3* dst, const local double3* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local double4* dst, const global double4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global double4* dst, const local double4* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local double8* dst, const global double8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global double8* dst, const local double8* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(local double16* dst, const global double16* src,
                              size_t num, size_t stride, event_t event);
event_t __CL_BARRIER_ATTRIBUTES
async_work_group_strided_copy(global double16* dst, const local double16* src,
                              size_t num, size_t stride, event_t event);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy_2D2D(
    local void* dst, size_t dst_offset, const global void* src,
    size_t src_offset, size_t num_bytes_per_element,
    size_t num_elements_per_line, size_t num_lines,
    size_t src_total_line_length, size_t dst_total_line_length, event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy_2D2D(
    global void* dst, size_t dst_offset, const local void* src,
    size_t src_offset, size_t num_bytes_per_element,
    size_t num_elements_per_line, size_t num_lines,
    size_t src_total_line_length, size_t dst_total_line_length, event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy_3D3D(
    local void* dst, size_t dst_offset, const global void* src,
    size_t src_offset, size_t num_bytes_per_element,
    size_t num_elements_per_line, size_t num_lines, size_t num_planes,
    size_t src_total_line_length, size_t src_total_plane_area,
    size_t dst_total_line_length, size_t dst_total_plane_area, event_t event);
event_t __CL_BARRIER_ATTRIBUTES async_work_group_copy_3D3D(
    global void* dst, size_t dst_offset, const local void* src,
    size_t src_offset, size_t num_bytes_per_element,
    size_t num_elements_per_line, size_t num_lines, size_t num_planes,
    size_t src_total_line_length, size_t src_total_plane_area,
    size_t dst_total_line_length, size_t dst_total_plane_area, event_t event);
void __CL_BARRIER_ATTRIBUTES wait_group_events(int num_events,
                                               event_t* event_list);
#endif  //__cplusplus
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char2* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char3* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char4* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char8* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global char16* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short2* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short3* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short4* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short8* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global short16* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int2* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int3* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int4* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int8* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global int16* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long2* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long3* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long4* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long8* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global long16* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar2* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar3* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar4* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar8* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uchar16* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort2* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort3* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort4* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort8* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ushort16* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint2* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint3* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint4* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint8* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global uint16* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong2* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong3* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong4* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong8* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global ulong16* pointer,
                                      size_t num);
#ifdef __CA_BUILTINS_HALF_SUPPORT
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half2* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half3* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half4* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half8* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global half16* pointer, size_t num);
#endif  // __CA_BUILTINS_HALF_SUPPORT
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float2* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float3* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float4* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float8* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global float16* pointer,
                                      size_t num);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double* pointer, size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double2* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double3* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double4* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double8* pointer,
                                      size_t num);
void __CL_BUILTIN_ATTRIBUTES prefetch(const global double16* pointer,
                                      size_t num);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES length(half p);
half __CL_CONST_ATTRIBUTES length(half2 p);
half __CL_CONST_ATTRIBUTES length(half3 p);
half __CL_CONST_ATTRIBUTES length(half4 p);
half __CL_CONST_ATTRIBUTES length(half8 p);
half __CL_CONST_ATTRIBUTES length(half16 p);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES length(float p);
float __CL_CONST_ATTRIBUTES length(float2 p);
float __CL_CONST_ATTRIBUTES length(float3 p);
float __CL_CONST_ATTRIBUTES length(float4 p);
float __CL_CONST_ATTRIBUTES length(float8 p);
float __CL_CONST_ATTRIBUTES length(float16 p);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES length(double p);
double __CL_CONST_ATTRIBUTES length(double2 p);
double __CL_CONST_ATTRIBUTES length(double3 p);
double __CL_CONST_ATTRIBUTES length(double4 p);
double __CL_CONST_ATTRIBUTES length(double8 p);
double __CL_CONST_ATTRIBUTES length(double16 p);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES fast_length(half p);
half __CL_CONST_ATTRIBUTES fast_length(half2 p);
half __CL_CONST_ATTRIBUTES fast_length(half3 p);
half __CL_CONST_ATTRIBUTES fast_length(half4 p);
half __CL_CONST_ATTRIBUTES fast_length(half8 p);
half __CL_CONST_ATTRIBUTES fast_length(half16 p);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES fast_length(float p);
float __CL_CONST_ATTRIBUTES fast_length(float2 p);
float __CL_CONST_ATTRIBUTES fast_length(float3 p);
float __CL_CONST_ATTRIBUTES fast_length(float4 p);
float __CL_CONST_ATTRIBUTES fast_length(float8 p);
float __CL_CONST_ATTRIBUTES fast_length(float16 p);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES fast_length(double p);
double __CL_CONST_ATTRIBUTES fast_length(double2 p);
double __CL_CONST_ATTRIBUTES fast_length(double3 p);
double __CL_CONST_ATTRIBUTES fast_length(double4 p);
double __CL_CONST_ATTRIBUTES fast_length(double8 p);
double __CL_CONST_ATTRIBUTES fast_length(double16 p);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES distance(half p0, half p1);
half __CL_CONST_ATTRIBUTES distance(half2 p0, half2 p1);
half __CL_CONST_ATTRIBUTES distance(half3 p0, half3 p1);
half __CL_CONST_ATTRIBUTES distance(half4 p0, half4 p1);
half __CL_CONST_ATTRIBUTES distance(half8 p0, half8 p1);
half __CL_CONST_ATTRIBUTES distance(half16 p0, half16 p1);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES distance(float p0, float p1);
float __CL_CONST_ATTRIBUTES distance(float2 p0, float2 p1);
float __CL_CONST_ATTRIBUTES distance(float3 p0, float3 p1);
float __CL_CONST_ATTRIBUTES distance(float4 p0, float4 p1);
float __CL_CONST_ATTRIBUTES distance(float8 p0, float8 p1);
float __CL_CONST_ATTRIBUTES distance(float16 p0, float16 p1);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES distance(double p0, double p1);
double __CL_CONST_ATTRIBUTES distance(double2 p0, double2 p1);
double __CL_CONST_ATTRIBUTES distance(double3 p0, double3 p1);
double __CL_CONST_ATTRIBUTES distance(double4 p0, double4 p1);
double __CL_CONST_ATTRIBUTES distance(double8 p0, double8 p1);
double __CL_CONST_ATTRIBUTES distance(double16 p0, double16 p1);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES fast_distance(half p0, half p1);
half __CL_CONST_ATTRIBUTES fast_distance(half2 p0, half2 p1);
half __CL_CONST_ATTRIBUTES fast_distance(half3 p0, half3 p1);
half __CL_CONST_ATTRIBUTES fast_distance(half4 p0, half4 p1);
half __CL_CONST_ATTRIBUTES fast_distance(half8 p0, half8 p1);
half __CL_CONST_ATTRIBUTES fast_distance(half16 p0, half16 p1);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES fast_distance(float p0, float p1);
float __CL_CONST_ATTRIBUTES fast_distance(float2 p0, float2 p1);
float __CL_CONST_ATTRIBUTES fast_distance(float3 p0, float3 p1);
float __CL_CONST_ATTRIBUTES fast_distance(float4 p0, float4 p1);
float __CL_CONST_ATTRIBUTES fast_distance(float8 p0, float8 p1);
float __CL_CONST_ATTRIBUTES fast_distance(float16 p0, float16 p1);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES fast_distance(double p0, double p1);
double __CL_CONST_ATTRIBUTES fast_distance(double2 p0, double2 p1);
double __CL_CONST_ATTRIBUTES fast_distance(double3 p0, double3 p1);
double __CL_CONST_ATTRIBUTES fast_distance(double4 p0, double4 p1);
double __CL_CONST_ATTRIBUTES fast_distance(double8 p0, double8 p1);
double __CL_CONST_ATTRIBUTES fast_distance(double16 p0, double16 p1);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES normalize(half p);
half2 __CL_CONST_ATTRIBUTES normalize(half2 p);
half3 __CL_CONST_ATTRIBUTES normalize(half3 p);
half4 __CL_CONST_ATTRIBUTES normalize(half4 p);
half8 __CL_CONST_ATTRIBUTES normalize(half8 p);
half16 __CL_CONST_ATTRIBUTES normalize(half16 p);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES normalize(float p);
float2 __CL_CONST_ATTRIBUTES normalize(float2 p);
float3 __CL_CONST_ATTRIBUTES normalize(float3 p);
float4 __CL_CONST_ATTRIBUTES normalize(float4 p);
float8 __CL_CONST_ATTRIBUTES normalize(float8 p);
float16 __CL_CONST_ATTRIBUTES normalize(float16 p);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES normalize(double p);
double2 __CL_CONST_ATTRIBUTES normalize(double2 p);
double3 __CL_CONST_ATTRIBUTES normalize(double3 p);
double4 __CL_CONST_ATTRIBUTES normalize(double4 p);
double8 __CL_CONST_ATTRIBUTES normalize(double8 p);
double16 __CL_CONST_ATTRIBUTES normalize(double16 p);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES fast_normalize(half p);
half2 __CL_CONST_ATTRIBUTES fast_normalize(half2 p);
half3 __CL_CONST_ATTRIBUTES fast_normalize(half3 p);
half4 __CL_CONST_ATTRIBUTES fast_normalize(half4 p);
half8 __CL_CONST_ATTRIBUTES fast_normalize(half8 p);
half16 __CL_CONST_ATTRIBUTES fast_normalize(half16 p);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES fast_normalize(float p);
float2 __CL_CONST_ATTRIBUTES fast_normalize(float2 p);
float3 __CL_CONST_ATTRIBUTES fast_normalize(float3 p);
float4 __CL_CONST_ATTRIBUTES fast_normalize(float4 p);
float8 __CL_CONST_ATTRIBUTES fast_normalize(float8 p);
float16 __CL_CONST_ATTRIBUTES fast_normalize(float16 p);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES fast_normalize(double p);
double2 __CL_CONST_ATTRIBUTES fast_normalize(double2 p);
double3 __CL_CONST_ATTRIBUTES fast_normalize(double3 p);
double4 __CL_CONST_ATTRIBUTES fast_normalize(double4 p);
double8 __CL_CONST_ATTRIBUTES fast_normalize(double8 p);
double16 __CL_CONST_ATTRIBUTES fast_normalize(double16 p);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES cross(half3 p0, half3 p1);
half4 __CL_CONST_ATTRIBUTES cross(half4 p0, half4 p1);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float3 __CL_CONST_ATTRIBUTES cross(float3 p0, float3 p1);
float4 __CL_CONST_ATTRIBUTES cross(float4 p0, float4 p1);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double3 __CL_CONST_ATTRIBUTES cross(double3 p0, double3 p1);
double4 __CL_CONST_ATTRIBUTES cross(double4 p0, double4 p1);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES dot(half p0, half p1);
half __CL_CONST_ATTRIBUTES dot(half2 p0, half2 p1);
half __CL_CONST_ATTRIBUTES dot(half3 p0, half3 p1);
half __CL_CONST_ATTRIBUTES dot(half4 p0, half4 p1);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES dot(float p0, float p1);
float __CL_CONST_ATTRIBUTES dot(float2 p0, float2 p1);
float __CL_CONST_ATTRIBUTES dot(float3 p0, float3 p1);
float __CL_CONST_ATTRIBUTES dot(float4 p0, float4 p1);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES dot(double p0, double p1);
double __CL_CONST_ATTRIBUTES dot(double2 p0, double2 p1);
double __CL_CONST_ATTRIBUTES dot(double3 p0, double3 p1);
double __CL_CONST_ATTRIBUTES dot(double4 p0, double4 p1);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

int __attribute__((weak)) printf(const constant char* const restrict fmt, ...);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __CODEPLAY_OCL_IMAGE_SUPPORT
#define CLK_R 0x10B0
#define CLK_A 0x10B1
#define CLK_RG 0x10B2
#define CLK_RA 0x10B3
#define CLK_RGB 0x10B4
#define CLK_RGBA 0x10B5
#define CLK_BGRA 0x10B6
#define CLK_ARGB 0x10B7
#define CLK_INTENSITY 0x10B8
#define CLK_LUMINANCE 0x10B9
#define CLK_Rx 0x10BA
#define CLK_RGx 0x10BB
#define CLK_RGBx 0x10BC
#define CLK_DEPTH 0x10BD
#define CLK_DEPTH_STENCIL 0x10BE
#define CLK_SNORM_INT8 0x10D0
#define CLK_SNORM_INT16 0x10D1
#define CLK_UNORM_INT8 0x10D2
#define CLK_UNORM_INT16 0x10D3
#define CLK_UNORM_SHORT_565 0x10D4
#define CLK_UNORM_SHORT_555 0x10D5
#define CLK_UNORM_INT_101010 0x10D6
#define CLK_SIGNED_INT8 0x10D7
#define CLK_SIGNED_INT16 0x10D8
#define CLK_SIGNED_INT32 0x10D9
#define CLK_UNSIGNED_INT8 0x10DA
#define CLK_UNSIGNED_INT16 0x10DB
#define CLK_UNSIGNED_INT32 0x10DC
#define CLK_HALF_FLOAT 0x10DD
#define CLK_FLOAT 0x10DE
#define CLK_UNORM_INT24 0x10DF
#define CLK_ADDRESS_NONE 0x0000
#define CLK_ADDRESS_CLAMP_TO_EDGE 0x0002
#define CLK_ADDRESS_CLAMP 0x0004
#define CLK_ADDRESS_REPEAT 0x0006
#define CLK_ADDRESS_MIRRORED_REPEAT 0x0008
#define CLK_NORMALIZED_COORDS_FALSE 0x0000
#define CLK_NORMALIZED_COORDS_TRUE 0x0001
#define CLK_FILTER_NEAREST 0x0010
#define CLK_FILTER_LINEAR 0x0020
#define __IMAGE_SUPPORT__ 1
#ifndef __cplusplus
#pragma OPENCL EXTENSION cl_khr_3d_image_writes : enable
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image1d_t image,
                                         sampler_t sampler, int coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image1d_t image,
                                         sampler_t sampler, float coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image1d_t image,
                                         int coord);
void __CL_BUILTIN_ATTRIBUTES write_imagef(__write_only image1d_t image,
                                          int coord, float4 color);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image1d_buffer_t image,
                                         int coord);
void __CL_BUILTIN_ATTRIBUTES write_imagef(__write_only image1d_buffer_t image,
                                          int coord, float4 color);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image1d_array_t image,
                                         sampler_t sampler, int2 coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image1d_array_t image,
                                         sampler_t sampler, float2 coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image1d_array_t image,
                                         int2 coord);
void __CL_BUILTIN_ATTRIBUTES write_imagef(__write_only image1d_array_t image,
                                          int2 coord, float4 color);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image2d_t image,
                                         sampler_t sampler, int2 coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image2d_t image,
                                         sampler_t sampler, float2 coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image2d_t image,
                                         int2 coord);
void __CL_BUILTIN_ATTRIBUTES write_imagef(__write_only image2d_t image,
                                          int2 coord, float4 color);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image2d_array_t image,
                                         sampler_t sampler, int4 coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image2d_array_t image,
                                         sampler_t sampler, float4 coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image2d_array_t image,
                                         int4 coord);
void __CL_BUILTIN_ATTRIBUTES write_imagef(__write_only image2d_array_t image,
                                          int4 coord, float4 color);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image3d_t image,
                                         sampler_t sampler, int4 coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image3d_t image,
                                         sampler_t sampler, float4 coord);
float4 __CL_CONST_ATTRIBUTES read_imagef(__read_only image3d_t image,
                                         int4 coord);
void __CL_BUILTIN_ATTRIBUTES write_imagef(__write_only image3d_t image,
                                          int4 coord, float4 color);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image1d_t image,
                                       sampler_t sampler, int coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image1d_t image,
                                       sampler_t sampler, float coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image1d_t image, int coord);
void __CL_BUILTIN_ATTRIBUTES write_imagei(__write_only image1d_t image,
                                          int coord, int4 color);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image1d_buffer_t image,
                                       int coord);
void __CL_BUILTIN_ATTRIBUTES write_imagei(__write_only image1d_buffer_t image,
                                          int coord, int4 color);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image1d_array_t image,
                                       sampler_t sampler, int2 coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image1d_array_t image,
                                       sampler_t sampler, float2 coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image1d_array_t image,
                                       int2 coord);
void __CL_BUILTIN_ATTRIBUTES write_imagei(__write_only image1d_array_t image,
                                          int2 coord, int4 color);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image2d_t image,
                                       sampler_t sampler, int2 coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image2d_t image,
                                       sampler_t sampler, float2 coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image2d_t image, int2 coord);
void __CL_BUILTIN_ATTRIBUTES write_imagei(__write_only image2d_t image,
                                          int2 coord, int4 color);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image2d_array_t image,
                                       sampler_t sampler, int4 coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image2d_array_t image,
                                       sampler_t sampler, float4 coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image2d_array_t image,
                                       int4 coord);
void __CL_BUILTIN_ATTRIBUTES write_imagei(__write_only image2d_array_t image,
                                          int4 coord, int4 color);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image3d_t image,
                                       sampler_t sampler, int4 coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image3d_t image,
                                       sampler_t sampler, float4 coord);
int4 __CL_CONST_ATTRIBUTES read_imagei(__read_only image3d_t image, int4 coord);
void __CL_BUILTIN_ATTRIBUTES write_imagei(__write_only image3d_t image,
                                          int4 coord, int4 color);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image1d_t image,
                                         sampler_t sampler, int coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image1d_t image,
                                         sampler_t sampler, float coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image1d_t image,
                                         int coord);
void __CL_BUILTIN_ATTRIBUTES write_imageui(__write_only image1d_t image,
                                           int coord, uint4 color);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image1d_buffer_t image,
                                         int coord);
void __CL_BUILTIN_ATTRIBUTES write_imageui(__write_only image1d_buffer_t image,
                                           int coord, uint4 color);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image1d_array_t image,
                                         sampler_t sampler, int2 coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image1d_array_t image,
                                         sampler_t sampler, float2 coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image1d_array_t image,
                                         int2 coord);
void __CL_BUILTIN_ATTRIBUTES write_imageui(__write_only image1d_array_t image,
                                           int2 coord, uint4 color);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image2d_t image,
                                         sampler_t sampler, int2 coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image2d_t image,
                                         sampler_t sampler, float2 coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image2d_t image,
                                         int2 coord);
void __CL_BUILTIN_ATTRIBUTES write_imageui(__write_only image2d_t image,
                                           int2 coord, uint4 color);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image2d_array_t image,
                                         sampler_t sampler, int4 coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image2d_array_t image,
                                         sampler_t sampler, float4 coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image2d_array_t image,
                                         int4 coord);
void __CL_BUILTIN_ATTRIBUTES write_imageui(__write_only image2d_array_t image,
                                           int4 coord, uint4 color);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image3d_t image,
                                         sampler_t sampler, int4 coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image3d_t image,
                                         sampler_t sampler, float4 coord);
uint4 __CL_CONST_ATTRIBUTES read_imageui(__read_only image3d_t image,
                                         int4 coord);
void __CL_BUILTIN_ATTRIBUTES write_imageui(__write_only image3d_t image,
                                           int4 coord, uint4 color);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image1d_t image,
                                        sampler_t sampler, int coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image1d_t image,
                                        sampler_t sampler, float coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image1d_t image, int coord);
void __CL_BUILTIN_ATTRIBUTES write_imageh(__write_only image1d_t image,
                                          int coord, half4 color);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image1d_buffer_t image,
                                        int coord);
void __CL_BUILTIN_ATTRIBUTES write_imageh(__write_only image1d_buffer_t image,
                                          int coord, half4 color);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image1d_array_t image,
                                        sampler_t sampler, int2 coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image1d_array_t image,
                                        sampler_t sampler, float2 coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image1d_array_t image,
                                        int2 coord);
void __CL_BUILTIN_ATTRIBUTES write_imageh(__write_only image1d_array_t image,
                                          int2 coord, half4 color);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image2d_t image,
                                        sampler_t sampler, int2 coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image2d_t image,
                                        sampler_t sampler, float2 coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image2d_t image,
                                        int2 coord);
void __CL_BUILTIN_ATTRIBUTES write_imageh(__write_only image2d_t image,
                                          int2 coord, half4 color);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image2d_array_t image,
                                        sampler_t sampler, int4 coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image2d_array_t image,
                                        sampler_t sampler, float4 coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image2d_array_t image,
                                        int4 coord);
void __CL_BUILTIN_ATTRIBUTES write_imageh(__write_only image2d_array_t image,
                                          int4 coord, half4 color);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image3d_t image,
                                        sampler_t sampler, int4 coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image3d_t image,
                                        sampler_t sampler, float4 coord);
half4 __CL_CONST_ATTRIBUTES read_imageh(__read_only image3d_t image,
                                        int4 coord);
void __CL_BUILTIN_ATTRIBUTES write_imageh(__write_only image3d_t image,
                                          int4 coord, half4 color);
#endif  // __CA_BUILTINS_HALF_SUPPORT
int __CL_BUILTIN_ATTRIBUTES get_image_width(__read_only image1d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__read_only image1d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__read_only image1d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__write_only image1d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__write_only image1d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__write_only image1d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__read_only image1d_buffer_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__read_only image1d_buffer_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__read_only image1d_buffer_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_width(__write_only image1d_buffer_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__write_only image1d_buffer_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__write_only image1d_buffer_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__read_only image1d_array_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__read_only image1d_array_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__read_only image1d_array_t image);
size_t __CL_BUILTIN_ATTRIBUTES
get_image_array_size(__read_only image1d_array_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__write_only image1d_array_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__write_only image1d_array_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__write_only image1d_array_t image);
size_t __CL_BUILTIN_ATTRIBUTES
get_image_array_size(__write_only image1d_array_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__read_only image2d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_height(__read_only image2d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__read_only image2d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__read_only image2d_t image);
int2 __CL_BUILTIN_ATTRIBUTES get_image_dim(__read_only image2d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__write_only image2d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_height(__write_only image2d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__write_only image2d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__write_only image2d_t image);
int2 __CL_BUILTIN_ATTRIBUTES get_image_dim(__write_only image2d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__read_only image2d_array_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_height(__read_only image2d_array_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__read_only image2d_array_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__read_only image2d_array_t image);
int2 __CL_BUILTIN_ATTRIBUTES get_image_dim(__read_only image2d_array_t image);
size_t __CL_BUILTIN_ATTRIBUTES
get_image_array_size(__read_only image2d_array_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__write_only image2d_array_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_height(__write_only image2d_array_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__write_only image2d_array_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__write_only image2d_array_t image);
int2 __CL_BUILTIN_ATTRIBUTES get_image_dim(__write_only image2d_array_t image);
size_t __CL_BUILTIN_ATTRIBUTES
get_image_array_size(__write_only image2d_array_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__read_only image3d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_height(__read_only image3d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_depth(__read_only image3d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__read_only image3d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__read_only image3d_t image);
int4 __CL_BUILTIN_ATTRIBUTES get_image_dim(__read_only image3d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_width(__write_only image3d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_height(__write_only image3d_t image);
int __CL_BUILTIN_ATTRIBUTES get_image_depth(__write_only image3d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_data_type(__write_only image3d_t image);
int __CL_BUILTIN_ATTRIBUTES
get_image_channel_order(__write_only image3d_t image);
int4 __CL_BUILTIN_ATTRIBUTES get_image_dim(__write_only image3d_t image);
#endif  // __cplusplus
#endif  // __CODEPLAY_OCL_IMAGE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

char __CL_CONST_ATTRIBUTES findLSB(char x);
char __CL_CONST_ATTRIBUTES findLSB(uchar x);
char __CL_CONST_ATTRIBUTES findMSB(char x);
char __CL_CONST_ATTRIBUTES findMSB(uchar x);
char __CL_CONST_ATTRIBUTES bitfieldReverse(char x);
uchar __CL_CONST_ATTRIBUTES bitfieldReverse(uchar x);
char2 __CL_CONST_ATTRIBUTES findLSB(char2 x);
char2 __CL_CONST_ATTRIBUTES findLSB(uchar2 x);
char2 __CL_CONST_ATTRIBUTES findMSB(char2 x);
char2 __CL_CONST_ATTRIBUTES findMSB(uchar2 x);
char2 __CL_CONST_ATTRIBUTES bitfieldReverse(char2 x);
uchar2 __CL_CONST_ATTRIBUTES bitfieldReverse(uchar2 x);
char3 __CL_CONST_ATTRIBUTES findLSB(char3 x);
char3 __CL_CONST_ATTRIBUTES findLSB(uchar3 x);
char3 __CL_CONST_ATTRIBUTES findMSB(char3 x);
char3 __CL_CONST_ATTRIBUTES findMSB(uchar3 x);
char3 __CL_CONST_ATTRIBUTES bitfieldReverse(char3 x);
uchar3 __CL_CONST_ATTRIBUTES bitfieldReverse(uchar3 x);
char4 __CL_CONST_ATTRIBUTES findLSB(char4 x);
char4 __CL_CONST_ATTRIBUTES findLSB(uchar4 x);
char4 __CL_CONST_ATTRIBUTES findMSB(char4 x);
char4 __CL_CONST_ATTRIBUTES findMSB(uchar4 x);
char4 __CL_CONST_ATTRIBUTES bitfieldReverse(char4 x);
uchar4 __CL_CONST_ATTRIBUTES bitfieldReverse(uchar4 x);
char8 __CL_CONST_ATTRIBUTES findLSB(char8 x);
char8 __CL_CONST_ATTRIBUTES findLSB(uchar8 x);
char8 __CL_CONST_ATTRIBUTES findMSB(char8 x);
char8 __CL_CONST_ATTRIBUTES findMSB(uchar8 x);
char8 __CL_CONST_ATTRIBUTES bitfieldReverse(char8 x);
uchar8 __CL_CONST_ATTRIBUTES bitfieldReverse(uchar8 x);
char16 __CL_CONST_ATTRIBUTES findLSB(char16 x);
char16 __CL_CONST_ATTRIBUTES findLSB(uchar16 x);
char16 __CL_CONST_ATTRIBUTES findMSB(char16 x);
char16 __CL_CONST_ATTRIBUTES findMSB(uchar16 x);
char16 __CL_CONST_ATTRIBUTES bitfieldReverse(char16 x);
uchar16 __CL_CONST_ATTRIBUTES bitfieldReverse(uchar16 x);
short __CL_CONST_ATTRIBUTES findLSB(short x);
short __CL_CONST_ATTRIBUTES findLSB(ushort x);
short __CL_CONST_ATTRIBUTES findMSB(short x);
short __CL_CONST_ATTRIBUTES findMSB(ushort x);
short __CL_CONST_ATTRIBUTES bitfieldReverse(short x);
ushort __CL_CONST_ATTRIBUTES bitfieldReverse(ushort x);
short2 __CL_CONST_ATTRIBUTES findLSB(short2 x);
short2 __CL_CONST_ATTRIBUTES findLSB(ushort2 x);
short2 __CL_CONST_ATTRIBUTES findMSB(short2 x);
short2 __CL_CONST_ATTRIBUTES findMSB(ushort2 x);
short2 __CL_CONST_ATTRIBUTES bitfieldReverse(short2 x);
ushort2 __CL_CONST_ATTRIBUTES bitfieldReverse(ushort2 x);
short3 __CL_CONST_ATTRIBUTES findLSB(short3 x);
short3 __CL_CONST_ATTRIBUTES findLSB(ushort3 x);
short3 __CL_CONST_ATTRIBUTES findMSB(short3 x);
short3 __CL_CONST_ATTRIBUTES findMSB(ushort3 x);
short3 __CL_CONST_ATTRIBUTES bitfieldReverse(short3 x);
ushort3 __CL_CONST_ATTRIBUTES bitfieldReverse(ushort3 x);
short4 __CL_CONST_ATTRIBUTES findLSB(short4 x);
short4 __CL_CONST_ATTRIBUTES findLSB(ushort4 x);
short4 __CL_CONST_ATTRIBUTES findMSB(short4 x);
short4 __CL_CONST_ATTRIBUTES findMSB(ushort4 x);
short4 __CL_CONST_ATTRIBUTES bitfieldReverse(short4 x);
ushort4 __CL_CONST_ATTRIBUTES bitfieldReverse(ushort4 x);
short8 __CL_CONST_ATTRIBUTES findLSB(short8 x);
short8 __CL_CONST_ATTRIBUTES findLSB(ushort8 x);
short8 __CL_CONST_ATTRIBUTES findMSB(short8 x);
short8 __CL_CONST_ATTRIBUTES findMSB(ushort8 x);
short8 __CL_CONST_ATTRIBUTES bitfieldReverse(short8 x);
ushort8 __CL_CONST_ATTRIBUTES bitfieldReverse(ushort8 x);
short16 __CL_CONST_ATTRIBUTES findLSB(short16 x);
short16 __CL_CONST_ATTRIBUTES findLSB(ushort16 x);
short16 __CL_CONST_ATTRIBUTES findMSB(short16 x);
short16 __CL_CONST_ATTRIBUTES findMSB(ushort16 x);
short16 __CL_CONST_ATTRIBUTES bitfieldReverse(short16 x);
ushort16 __CL_CONST_ATTRIBUTES bitfieldReverse(ushort16 x);
int __CL_CONST_ATTRIBUTES findLSB(int x);
int __CL_CONST_ATTRIBUTES findLSB(uint x);
int __CL_CONST_ATTRIBUTES findMSB(int x);
int __CL_CONST_ATTRIBUTES findMSB(uint x);
int __CL_CONST_ATTRIBUTES bitfieldReverse(int x);
uint __CL_CONST_ATTRIBUTES bitfieldReverse(uint x);
int2 __CL_CONST_ATTRIBUTES findLSB(int2 x);
int2 __CL_CONST_ATTRIBUTES findLSB(uint2 x);
int2 __CL_CONST_ATTRIBUTES findMSB(int2 x);
int2 __CL_CONST_ATTRIBUTES findMSB(uint2 x);
int2 __CL_CONST_ATTRIBUTES bitfieldReverse(int2 x);
uint2 __CL_CONST_ATTRIBUTES bitfieldReverse(uint2 x);
int3 __CL_CONST_ATTRIBUTES findLSB(int3 x);
int3 __CL_CONST_ATTRIBUTES findLSB(uint3 x);
int3 __CL_CONST_ATTRIBUTES findMSB(int3 x);
int3 __CL_CONST_ATTRIBUTES findMSB(uint3 x);
int3 __CL_CONST_ATTRIBUTES bitfieldReverse(int3 x);
uint3 __CL_CONST_ATTRIBUTES bitfieldReverse(uint3 x);
int4 __CL_CONST_ATTRIBUTES findLSB(int4 x);
int4 __CL_CONST_ATTRIBUTES findLSB(uint4 x);
int4 __CL_CONST_ATTRIBUTES findMSB(int4 x);
int4 __CL_CONST_ATTRIBUTES findMSB(uint4 x);
int4 __CL_CONST_ATTRIBUTES bitfieldReverse(int4 x);
uint4 __CL_CONST_ATTRIBUTES bitfieldReverse(uint4 x);
int8 __CL_CONST_ATTRIBUTES findLSB(int8 x);
int8 __CL_CONST_ATTRIBUTES findLSB(uint8 x);
int8 __CL_CONST_ATTRIBUTES findMSB(int8 x);
int8 __CL_CONST_ATTRIBUTES findMSB(uint8 x);
int8 __CL_CONST_ATTRIBUTES bitfieldReverse(int8 x);
uint8 __CL_CONST_ATTRIBUTES bitfieldReverse(uint8 x);
int16 __CL_CONST_ATTRIBUTES findLSB(int16 x);
int16 __CL_CONST_ATTRIBUTES findLSB(uint16 x);
int16 __CL_CONST_ATTRIBUTES findMSB(int16 x);
int16 __CL_CONST_ATTRIBUTES findMSB(uint16 x);
int16 __CL_CONST_ATTRIBUTES bitfieldReverse(int16 x);
uint16 __CL_CONST_ATTRIBUTES bitfieldReverse(uint16 x);
long __CL_CONST_ATTRIBUTES findLSB(long x);
long __CL_CONST_ATTRIBUTES findLSB(ulong x);
long __CL_CONST_ATTRIBUTES findMSB(long x);
long __CL_CONST_ATTRIBUTES findMSB(ulong x);
long __CL_CONST_ATTRIBUTES bitfieldReverse(long x);
ulong __CL_CONST_ATTRIBUTES bitfieldReverse(ulong x);
long2 __CL_CONST_ATTRIBUTES findLSB(long2 x);
long2 __CL_CONST_ATTRIBUTES findLSB(ulong2 x);
long2 __CL_CONST_ATTRIBUTES findMSB(long2 x);
long2 __CL_CONST_ATTRIBUTES findMSB(ulong2 x);
long2 __CL_CONST_ATTRIBUTES bitfieldReverse(long2 x);
ulong2 __CL_CONST_ATTRIBUTES bitfieldReverse(ulong2 x);
long3 __CL_CONST_ATTRIBUTES findLSB(long3 x);
long3 __CL_CONST_ATTRIBUTES findLSB(ulong3 x);
long3 __CL_CONST_ATTRIBUTES findMSB(long3 x);
long3 __CL_CONST_ATTRIBUTES findMSB(ulong3 x);
long3 __CL_CONST_ATTRIBUTES bitfieldReverse(long3 x);
ulong3 __CL_CONST_ATTRIBUTES bitfieldReverse(ulong3 x);
long4 __CL_CONST_ATTRIBUTES findLSB(long4 x);
long4 __CL_CONST_ATTRIBUTES findLSB(ulong4 x);
long4 __CL_CONST_ATTRIBUTES findMSB(long4 x);
long4 __CL_CONST_ATTRIBUTES findMSB(ulong4 x);
long4 __CL_CONST_ATTRIBUTES bitfieldReverse(long4 x);
ulong4 __CL_CONST_ATTRIBUTES bitfieldReverse(ulong4 x);
long8 __CL_CONST_ATTRIBUTES findLSB(long8 x);
long8 __CL_CONST_ATTRIBUTES findLSB(ulong8 x);
long8 __CL_CONST_ATTRIBUTES findMSB(long8 x);
long8 __CL_CONST_ATTRIBUTES findMSB(ulong8 x);
long8 __CL_CONST_ATTRIBUTES bitfieldReverse(long8 x);
ulong8 __CL_CONST_ATTRIBUTES bitfieldReverse(ulong8 x);
long16 __CL_CONST_ATTRIBUTES findLSB(long16 x);
long16 __CL_CONST_ATTRIBUTES findLSB(ulong16 x);
long16 __CL_CONST_ATTRIBUTES findMSB(long16 x);
long16 __CL_CONST_ATTRIBUTES findMSB(ulong16 x);
long16 __CL_CONST_ATTRIBUTES bitfieldReverse(long16 x);
ulong16 __CL_CONST_ATTRIBUTES bitfieldReverse(ulong16 x);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES faceforward(half n, half i, half nref);
half __CL_CONST_ATTRIBUTES reflect(half n, half i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES refract(half n, half i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
half __CL_CONST_ATTRIBUTES refract(half n, half i, float eta);
half2 __CL_CONST_ATTRIBUTES faceforward(half2 n, half2 i, half2 nref);
half2 __CL_CONST_ATTRIBUTES reflect(half2 n, half2 i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES refract(half2 n, half2 i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
half2 __CL_CONST_ATTRIBUTES refract(half2 n, half2 i, float eta);
half3 __CL_CONST_ATTRIBUTES faceforward(half3 n, half3 i, half3 nref);
half3 __CL_CONST_ATTRIBUTES reflect(half3 n, half3 i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES refract(half3 n, half3 i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
half3 __CL_CONST_ATTRIBUTES refract(half3 n, half3 i, float eta);
half4 __CL_CONST_ATTRIBUTES faceforward(half4 n, half4 i, half4 nref);
half4 __CL_CONST_ATTRIBUTES reflect(half4 n, half4 i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES refract(half4 n, half4 i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
half4 __CL_CONST_ATTRIBUTES refract(half4 n, half4 i, float eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES faceforward(float n, float i, float nref);
float __CL_CONST_ATTRIBUTES reflect(float n, float i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES refract(float n, float i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_CONST_ATTRIBUTES refract(float n, float i, float eta);
float2 __CL_CONST_ATTRIBUTES faceforward(float2 n, float2 i, float2 nref);
float2 __CL_CONST_ATTRIBUTES reflect(float2 n, float2 i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES refract(float2 n, float2 i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_CONST_ATTRIBUTES refract(float2 n, float2 i, float eta);
float3 __CL_CONST_ATTRIBUTES faceforward(float3 n, float3 i, float3 nref);
float3 __CL_CONST_ATTRIBUTES reflect(float3 n, float3 i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
float3 __CL_CONST_ATTRIBUTES refract(float3 n, float3 i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float3 __CL_CONST_ATTRIBUTES refract(float3 n, float3 i, float eta);
float4 __CL_CONST_ATTRIBUTES faceforward(float4 n, float4 i, float4 nref);
float4 __CL_CONST_ATTRIBUTES reflect(float4 n, float4 i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES refract(float4 n, float4 i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float4 __CL_CONST_ATTRIBUTES refract(float4 n, float4 i, float eta);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_CONST_ATTRIBUTES faceforward(double n, double i, double nref);
double __CL_CONST_ATTRIBUTES reflect(double n, double i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
double __CL_CONST_ATTRIBUTES refract(double n, double i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
double __CL_CONST_ATTRIBUTES refract(double n, double i, float eta);
double __CL_CONST_ATTRIBUTES refract(double n, double i, double eta);
double2 __CL_CONST_ATTRIBUTES faceforward(double2 n, double2 i, double2 nref);
double2 __CL_CONST_ATTRIBUTES reflect(double2 n, double2 i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
double2 __CL_CONST_ATTRIBUTES refract(double2 n, double2 i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
double2 __CL_CONST_ATTRIBUTES refract(double2 n, double2 i, float eta);
double2 __CL_CONST_ATTRIBUTES refract(double2 n, double2 i, double eta);
double3 __CL_CONST_ATTRIBUTES faceforward(double3 n, double3 i, double3 nref);
double3 __CL_CONST_ATTRIBUTES reflect(double3 n, double3 i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
double3 __CL_CONST_ATTRIBUTES refract(double3 n, double3 i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
double3 __CL_CONST_ATTRIBUTES refract(double3 n, double3 i, float eta);
double3 __CL_CONST_ATTRIBUTES refract(double3 n, double3 i, double eta);
double4 __CL_CONST_ATTRIBUTES faceforward(double4 n, double4 i, double4 nref);
double4 __CL_CONST_ATTRIBUTES reflect(double4 n, double4 i);
#ifdef __CA_BUILTINS_HALF_SUPPORT
double4 __CL_CONST_ATTRIBUTES refract(double4 n, double4 i, half eta);
#endif  // __CA_BUILTINS_HALF_SUPPORT
double4 __CL_CONST_ATTRIBUTES refract(double4 n, double4 i, float eta);
double4 __CL_CONST_ATTRIBUTES refract(double4 n, double4 i, double eta);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
uint __CL_CONST_ATTRIBUTES packSnorm4x8(float4 x);
uint __CL_CONST_ATTRIBUTES packUnorm4x8(float4 x);
uint __CL_CONST_ATTRIBUTES packSnorm2x16(float2 x);
uint __CL_CONST_ATTRIBUTES packUnorm2x16(float2 x);
uint __CL_CONST_ATTRIBUTES packHalf2x16(float2 x);
float4 __CL_CONST_ATTRIBUTES unpackSnorm4x8(uint x);
float4 __CL_CONST_ATTRIBUTES unpackUnorm4x8(uint x);
float2 __CL_CONST_ATTRIBUTES unpackSnorm2x16(uint x);
float2 __CL_CONST_ATTRIBUTES unpackUnorm2x16(uint x);
float2 __CL_CONST_ATTRIBUTES unpackHalf2x16(uint x);
float __CL_CONST_ATTRIBUTES quantizeToF16(float x);
float2 __CL_CONST_ATTRIBUTES quantizeToF16(float2 x);
float3 __CL_CONST_ATTRIBUTES quantizeToF16(float3 x);
float4 __CL_CONST_ATTRIBUTES quantizeToF16(float4 x);

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __cplusplus
};
#endif

#endif  // __CODEPLAY_BUILTINS_H__
